import "pkg:/source/core/BaseClass.bs"

class InputValidator extends mc.BaseClass
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Fields
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    private NUMERIC_VALIDATOR_TYPE = "numeric"
    private EMAIL_VALIDATOR_TYPE =  "email"
    private validationData = {hasError: false, errorMessage: ""}


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialize
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super("InputValidator")
      m.log = new log.Logger("InputValidator")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function validate(validatorType as string, value as string) as mc.types.assocarray
        if validatorType <> "":
            return m.validateByType(validatorType, value)
        end if
        return m.validationData
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    private function validateByType(validatorType as string, value as string)
        isValid = true
        if validatorType = m.NUMERIC_VALIDATOR_TYPE
            regex = createObject("roRegex", "^[0-9]+$", "i")
            isValid = regex.isMatch(value) and len(value) = 5:
            m.validationData.errorMessage = isValid ? "" : "Invalid.Must contain only numbers."
        else if validatorType = m.EMAIL_VALIDATOR_TYPE
            regex = createObject("roRegex", "^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$", "i")
            isValid = regex.isMatch(value)
            m.validationData.errorMessage = isValid ? "" : "Invalid email address."
        end if
        m.validationData.hasError = not isValid
        return m.validationData
    end function
end class
