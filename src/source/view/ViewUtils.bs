import "pkg:/source/core/Utils.bs"
import "pkg:/source/roku_modules/log/LogMixin.brs"

namespace mv
  function findNodes(nodeIds as mc.types.array) as void
    if type(nodeIds) = "roArray"
      for each nodeId in nodeIds
        node = m.top.findNode(nodeId)
        if node <> invalid
          m[nodeId] = node
        else
          m.log.warn("could not find node with id {0}", nodeId)
        end if
      end for
    end if
  end function

  function getFirstParentWithType(node as mc.types.node, parentType as string) as mc.types.node
    currentNode = node

    while currentNode <> invalid

      if currentNode.subType() = parentType
        return currentNode
      end if

      currentNode = currentNode.getParent()
    end while
    return invalid
  end function

  function getFieldInParent(content as mc.types.node, fieldName as string, maxIterations = 3 as integer, defaultValue = {} as dynamic) as dynamic
    currentNode = content
    value = invalid

    i = 0
    while currentNode <> invalid and i < maxIterations
      value = currentNode[fieldName]
      if value <> invalid
        return value
      end if
      currentNode = currentNode.getParent()
      i++
    end while

    return defaultValue
  end function

  function destroyView(view as mc.types.node)
    p = view.getParent()

    if p <> invalid
      p.removeChild(view)
    end if
  end function

  function createViewsFromStyleJson(childrenJson as mc.types.array, targetNode as mc.types.node, assignViewsToM = true as boolean, mTarget = invalid as mc.types.assocarray)
    if mTarget = invalid
      mTarget = m
    end if

    'TODO - convert this to use update api, for speed.
    if mc.isArray(childrenJson)
      if type(targetNode) = "roSGNode"
        for i = 0 to childrenJson.count() - 1
          nodeJson = childrenJson[i]

          nodeType = nodeJson._type
          if nodeType <> invalid
            children = nodeJson._children
            id = nodeJson.id
            nodeJson.delete("id")
            nodeJson.delete("_type")
            nodeJson.delete("_children")
            view = mc.createSGNode(nodeType, targetNode, id, nodeJson)
            if view <> invalid
              if children <> invalid
                mv.createViewsFromStyleJson(children, view, assignViewsToM, mTarget)
              end if
              if assignViewsToM and id <> invalid
                mTarget[id] = view
              end if
            else
              m.log.error("could not create view ", id, "with type", nodeType)
            end if
          end if
        end for
      else
        m.log.error("could not create views from style Json. Node was invalid")
      end if
    else
      m.log.error("could not create view in targetNode", mc.dv(targetNode), "json was invalid")
    end if
  end function
end namespace