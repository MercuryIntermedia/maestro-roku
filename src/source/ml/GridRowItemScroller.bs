import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace ml
  class GridRowItemScroller extends ml.ItemScroller

    public currentRowIndex = 0

    function new(viewManager as ml.GridRowItemViewManager, focusManager as ml.ItemFocusManager)
      super("GridRowItemScroller", viewManager, focusManager)
      m.isOnlyFloatingFocus = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function getFocusSettings()
      return ml.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    'For a grid row, we can only move to the end of the current row
    override function moveToEnd(direction as integer, animated = true as boolean, fast = false as boolean) as boolean

      m.isScrollCancelled = false

      if (m.index >= m.viewManager.numberOfItems - 1 and direction = 1) or m.index = 0 and direction = -1
        m.log.info("already at end - ignoring")
        return false
      end if

      if direction = -1
        index = fix(m.index / m.viewManager.numCols) * m.viewManager.numCols
        m.moveToIndex(index, animated, fast, -1, true)
      else
        index = ((fix(m.index / m.viewManager.numCols) * m.viewManager.numCols) + m.viewManager.numCols) - 1
        m.moveToIndex(index, animated, fast, 1, true)
      end if
      return true
    end function

    protected override function setComponentInfo(info as ml.ComponentInfo)
      super.setComponentInfo(info)
      if info <> invalid
        m.currentRowIndex = fix(info.index / m.viewManager.numCols)
        'notify viewport events for this row
        ' m.notifyViewPortEventsForSubRows(m.viewManager.row.isInViewPort)
      else
        m.currentRowIndex = -1
      end if
    end function

    'FIXME - not really used: will probably always come from the list
    function notifyViewPortEventsForSubRows(isInViewPort as boolean) as void
      if m.currentRowIndex = -1
        return
      end if
      index = m.currentRowIndex
      'TODO
      notifyStart = index - 1
      notifyEnd = index + 1

      if isInViewPort
        m.notifyEnterEvent(notifyStart, notifyEnd)
      else
        m.notifyExitEvent(notifyStart, notifyEnd)
      end if
    end function

    private inViewportComponentsById = {}

    function notifyExitEvent(notifyStart as integer, notifyEnd as integer) as void
      for i = notifyStart to notifyEnd
        rowRenderers = m.viewManager.getRenderersInRow(i)
        for each comp in rowRenderers
          if comp.isInViewPort
            comp.isInViewPort = false
            if comp.id <> "#_#phc"
              comp.listEvent = {
                name: "didExit"
                direction: 1
                index: comp.index
              }
              m.viewManager.releaseCell(comp.index)
            end if
          else
          end if
        end for
      end for
      m.inViewportComponentsById = {}
    end function

    function notifyEnterEvent(notifyStart as integer, notifyEnd as integer) as void
      ' newInViewportComponentsById = {}
      for i = notifyStart to notifyEnd
        rowRenderers = m.viewManager.getRenderersInRow(i)
        index = (i * m.viewManager.numCols) - 1
        for each comp in rowRenderers
          index++
          if comp.id = "#_#phc"
            ' ? " comp needs to be made!! "; index
            comp = m.viewManager.getCell(index)
          end if
          if comp <> invalid and not comp.isInViewPort
            comp.isInViewPort = true
            comp.listEvent = {
              name: "didEnter"
              direction: 1
              index: comp.index
            }
            ' newInViewportComponentsById[comp.id] = comp
            m.inViewportComponentsById[comp.id] = comp
          end if
          ' newInViewportComponentsById[comp.id] = comp
          ' m.inViewportComponentsById.delete(comp.id)
        end for
      end for
      ' for each key in m.inViewportComponentsById
      '   comp = m.inViewportComponentsById[key]
      '   if comp.isInViewPort
      '     ? " CLEARING " ; comp.id
      '     comp.isInViewPort = false
      '     comp.listEvent = {
      '       name: "didExit"
      '       direction: 1
      '       index: comp.index
      '     }
      '   end if
      ' end for
      ' m.inViewportComponentsById = newInViewportComponentsById
    end function

    protected override function getCellComponentInfo(componentInfo as ml.ComponentInfo, isFromListScroll = false as boolean) as ml.ComponentInfo

      'TODO - add the ability for a given row to _remember_ or choose the
      'default index it should give us
      if componentInfo = invalid
        return invalid
      end if

      if isFromListScroll
        ' ? " GRID CHOOSING INDEX CURRENT INDEX IS " ; m.index ; " CI  " ;componentInfo.componentIndex ; " is List scroll? "; isFromListScroll
        focusX = m.focusIndicatorManager.focusScreenPosition[0] - m.viewManager.settings.contentOffset[0]

        cellInfosInRow = m.viewManager.getCellInfosInRow(componentInfo.componentIndex)
        nextInfo = invalid

        for each info in cellInfosInRow
          ' ? " RI " ; componentInfo.componentIndex ; " CI " ; info.index ; " P " ; info.getScreenPosition(1) ; " FP " ; focusX
          if info <> invalid and info.getScreenPosition(1) <= focusX
            nextInfo = info
          end if
        end for
        ' colIndex = m.index mod m.viewManager.numCols
        ' cellIndex = mc.clamp((componentInfo.componentIndex * m.viewManager.numCols) + colIndex, 0, m.numberOfComponents - 1)
        ' ? " GRID CHOSE " ; cellIndex ; " M " ; m.numberOfComponents - 1
        if nextInfo = invalid
          ' ? "no item found for indicator position - using first item in row"
          nextInfo = cellInfosInRow[0]
        end if

        return nextInfo
      else
        return m.viewManager.cellInfos[componentInfo.index]
      end if
    end function

    public override function chooseComponentInfoForScrollingIntoRow(componentInfo as ml.ComponentInfo)
      ' ? " GRID CHOOSE SCROLLING INTO ROW" ; componentInfo.index; " CI "; componentInfo.componentIndex
      componentInfo = m.getCellComponentInfo(componentInfo, true)
      if componentInfo <> invalid
        m.setComponentInfo(componentInfo)
        'bs:disable-next-line
        m.viewManager.row.focusedCellIndex = m.index
        ' ? " GRID CHOICE IS MADE index is now "; m.index
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Indicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getFocusIndicatorConfig(componentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as ml.FocusIndicatorConfig
      if componentInfo = invalid
        ? "ERROR grid got invalid componentInfo"
        return invalid
      end if
      ' ? " GET GRID FOCUS INDICATOR CONFIG "
      info = m.getCellComponentInfo(componentInfo, isFromListScroll)
      config = super.getFocusIndicatorConfig(componentInfo, direction, isFloatingFocus, isFromListScroll)
      config.gridIndex = info.contentIndex
      return config
    end function

    protected override function getFocusIndicatorTranslation(info as ml.ComponentInfo, parentComponentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean) as object
      ' ? " START GRID GET FOCUS INDICATOR TRANS INFO : " ; info
      ' ? " GFIT Parent info " ; parentComponentInfo
      if info = invalid or m.viewManager.settings = invalid
        return [0, 0]
      end if

      yScreenPos = 0

      if not isFloatingFocus and info.contentIndex > 1 and m.viewManager.isVerticalFlowFocusAllowed
        if direction = -1
          yScreenPos = m.viewManager.upScreenPosition
        else
          yScreenPos = m.viewManager.downScreenPosition
        end if
      else if m.viewManager.rowInfos <> invalid
        rect = m.viewManager.rects[info.contentIndex]
        ' ? " SUB ROW INDEX " ; rect.gridRow
        rowInfo = m.viewManager.rowInfos[rect.gridRow]
        if rowInfo <> invalid
          yScreenPos = rowInfo.getScreenPosition(direction)
        else
          ? " ERROR GETTING ROW INFO"
        end if
      end if
      ' yScreenPos = 0
      contentOffset = m.viewManager.settings.contentOffset

      ' ? " info CI "; info.contentIndex ; " " ; yScreenPos ; " axes "; m.axes ; " isFloatingFocus" ; isFloatingFocus

      ' ? " contentOffset "; formatJson(contentOffset)
      ' translation = [contentOffset[0], contentOffset[1]]
      translation = [contentOffset[0], contentOffset[1] + yScreenPos]

      headerOffset = m.viewManager.settings.headerSettings.height
      translation[1] += headerOffset

      if isFloatingFocus
        ' ? " is float"
        'replace with actual screen location
        cell = m.viewManager.getRenderer(info.contentIndex)
        if cell <> invalid
          'bs:disable-next-line
          bounds = cell.sceneBoundingRect()
          translation = [bounds.x, bounds.y]
        end if
      else

        translation[0] += info.getScreenPosition(direction)
        ' ? " INFO TRANSLATION "; translation[0]
      end if

      ' ? " END GRID GET FOCUS INDICATOR TRANS"
      return translation
    end function


  end class
end namespace
