import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"

namespace ml
  class GridRowItemScroller extends ml.ItemScroller

    public isFloatingFocus = true

    function new(viewManager as ml.GridRowItemViewManager)
      super(viewManager, 0)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function canMoveRowUpDown(direction as integer)
      ? "I " ; m.index ; " NI " ; m.viewManager.numberOfItems ; " NC " ; m.viewManager.numCols
      canMove = m.viewManager.numberOfItems > 0 and ((direction = -1 and m.index >= m.viewManager.numCols) or (direction = 1 and m.index < m.viewManager.numberOfItems - m.viewManager.numCols))
      ? "CAN MOVE ROW UP DOWN" ; canMove
      return canMove
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function onViewManagerUpdate()
      super.onViewManagerUpdate()
      ' m.isFloatingFocus = m.settings.horizAnimStyle = "floating"
    end function

    override function setFocusOnRenderer(isMoving as boolean, index = invalid as integer)
      if not isMoving
        m.log.info("stopped scrolling on item", m.index)
      end if
    end function

    override function getFocusSettings()
      return ml.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    protected override function moveUsingFlowAnim(index as integer, nextIndex as integer, direction as integer)
      m.toggleScrolling(true)
      m.focusManager.setFocusPosition(index, 0, nextIndex, 0, direction)
      m.flowFocusIndex = nextIndex
      m.viewManager.owner@.startFlowFocus([m.viewManager.row.index, index], [m.viewManager.row.index, nextIndex], m.animSpeed, mc.getTop())
    end function

    override function moveToEnd(direction as integer, animated = true as boolean, fast = false as boolean) as boolean
      if (m.index >= m.viewManager.numberOfItems - 1 and direction = 1) or m.index = 0 and direction = -1
        m.log.info("already at end - ignoring")
        return false
      end if

      if direction = -1
        index = fix(m.index / m.viewManager.numCols) * m.viewManager.numCols
        m.moveToIndex(index, animated, fast, -1, true)
      else
        index = ((fix(m.index / m.viewManager.numCols) * m.viewManager.numCols) + m.viewManager.numCols) - 1
        m.moveToIndex(index, animated, fast, 1, true)
      end if
      return true
    end function

    override function finishAnimating() as void
      super.finishAnimating()
      m.isMovingMultiple = false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ private impl
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function ceiling(x as float) as integer
      i = int(x)
      if i < x
        i = i + 1
      end if
      return i
    end function


  end class
end namespace