import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace ml
  class GridRowItemScroller extends ml.ItemScroller

    public currentRowIndex = 0

    function new(viewManager as ml.GridRowItemViewManager, focusManager as ml.ItemFocusManager)
      super("GridRowItemScroller", viewManager, focusManager)
      m.isOnlyFloatingFocus = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function getFocusSettings()
      return ml.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    'For a grid row, we can only move to the end of the current row
    override function moveToEnd(direction as integer, animated = true as boolean, fast = false as boolean) as boolean

      if (m.index >= m.viewManager.numberOfItems - 1 and direction = 1) or m.index = 0 and direction = -1
        m.log.info("already at end - ignoring")
        return false
      end if

      if direction = -1
        index = fix(m.index / m.viewManager.numCols) * m.viewManager.numCols
        m.moveToIndex(index, animated, fast, -1, true)
      else
        index = ((fix(m.index / m.viewManager.numCols) * m.viewManager.numCols) + m.viewManager.numCols) - 1
        m.moveToIndex(index, animated, fast, 1, true)
      end if
      return true
    end function

    protected override function setComponentInfo(info as ml.ComponentInfo)
      super.setComponentInfo(info)
      if info <> invalid
        m.currentRowIndex = fix(info.index / m.viewManager.numCols)
      else
        m.currentRowIndex = -1
      end if
    end function

    protected override function getCellComponentInfo(componentInfo as ml.ComponentInfo, isFromListScroll = false as boolean) as ml.ComponentInfo
      if isFromListScroll
        ' ? " GRID CHOOSING INDEX CURRENT INDEX IS " ; m.index ; " CI  " ;componentInfo.componentIndex
        colIndex = m.index mod m.viewManager.numCols
        cellIndex = mc.clamp((componentInfo.componentIndex * m.viewManager.numCols) + colIndex, 0, m.numberOfComponents - 1)
        ' ? " GRID CHOSE " ; cellIndex ; " M " ; m.numberOfComponents -1
        return m.viewManager.cellInfos[cellIndex]
      else
        return m.viewManager.cellInfos[componentInfo.index]
      end if
    end function

    public override function chooseComponentInfoForScrollingIntoRow(componentInfo as ml.ComponentInfo)
      ' ? " GRID CHOOSE SCROLLING INTO ROW" ; componentInfo.index; " CI "; componentInfo.componentIndex
      componentInfo = m.getCellComponentInfo(componentInfo, true)
      if componentInfo <> invalid
        m.setComponentInfo(componentInfo)
        'bs:disable-next-line
        m.viewManager.row.focusedCellIndex = m.index
        ' ? " GRID CHOICE IS MADE index is now "; m.index
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Indicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    protected override function getFocusIndicatorTranslation(info as ml.ComponentInfo, componentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean) as object
      if info = invalid
        return [0, 0]
      end if

      ' ? " GRID GET FOCUS INDICATOR TRANS"
      ' ? " GRID GET FOCUS INDICATOR TRANS"
      ' ? " GRID GET FOCUS INDICATOR TRANS"
      ' ? " GRID GET FOCUS INDICATOR TRANS"
      ' ? " GRID GET FOCUS INDICATOR TRANS ----- " ; info.contentIndex ; " D "; direction
      if isFloatingFocus
        screenPos = info.getScreenPositionForDirection(direction)
      else
        screenPos = info.getScreenPositionForDirection(direction)
      end if


      parentScreenPos = componentInfo.getScreenPositionForDirection(direction)
      contentOffset = m.viewManager.settings.contentOffset

      ? " PARENT " ; componentInfo.index ; " PSP "; parentScreenPos
      ? " info sp "; info.contentIndex ; " " ; screenPos ; " axes "; m.axes

      ? " contentOffset "; formatJson(contentOffset)
      if m.axes = 0
        translation = [contentOffset[0] + screenPos, contentOffset[1] + parentScreenPos]
      else
        translation = [contentOffset[0] + parentScreenPos, contentOffset[1] + screenPos]
      end if

      if isFloatingFocus
        ? " is float"
        'replace with actual screen location
        cell = m.viewManager.getRenderer(info.contentIndex)
        'bs:disable-next-line
        bounds = cell.sceneBoundingRect()
        translation = [bounds.x, bounds.y]
      end if

      if m.settings.horizAnimStyle = "fixed"
        translation[m.axes] = contentOffset[m.axes]
      end if

      ? " END GRID GET FOCUS INDICATOR TRANS"

      return translation
    end function


  end class
end namespace