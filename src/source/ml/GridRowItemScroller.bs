import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace ml
  class GridRowItemScroller extends ml.ItemScroller

    public currentRowIndex = 0

    function new(viewManager as ml.GridRowItemViewManager, focusManager as ml.ItemFocusManager)
      super("GridRowItemScroller", viewManager, focusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function onViewManagerUpdate()
      super.onViewManagerUpdate()
      m.isFloatingFocus = true
    end function

    override function getFocusSettings()
      return ml.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    'For a grid row, we can only move to the end of the current row
    override function moveToEnd(direction as integer, animated = true as boolean, fast = false as boolean) as boolean

      if (m.index >= m.viewManager.numberOfItems - 1 and direction = 1) or m.index = 0 and direction = -1
        m.log.info("already at end - ignoring")
        return false
      end if

      if direction = -1
        index = fix(m.index / m.viewManager.numCols) * m.viewManager.numCols
        m.moveToIndex(index, animated, fast, -1, true)
      else
        index = ((fix(m.index / m.viewManager.numCols) * m.viewManager.numCols) + m.viewManager.numCols) - 1
        m.moveToIndex(index, animated, fast, 1, true)
      end if
      return true
    end function

    protected override function setComponentInfo(info as ml.ComponentInfo)
      super.setComponentInfo(info)
      if info <> invalid
        m.currentRowIndex = fix(info.index / m.viewManager.numCols)
      else
        m.currentRowIndex = -1
      end if
    end function

    protected override function getCellComponentInfo(componentInfo as ml.ComponentInfo) as ml.ComponentInfo
      colIndex = m.index mod m.viewManager.numCols
      cellIndex = (componentInfo.componentIndex * m.viewManager.numCols) + colIndex
      return m.viewManager.cellInfos[cellIndex]
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus Indicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getFocusIndicatorConfig(componentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean) as ml.FocusIndicatorConfig

      info = m.getCellComponentInfo(componentInfo)
      
      size = m.viewManager.getItemSize(info.contentIndex)

      if info = invalid or info.component = invalid
        ? "Cell item info - EMPTY FOCUS SETTINGS"
        return new ml.FocusIndicatorConfig([0, 0], [0, 0], m.index, -1, [0, 0], [0, 0], m.settings, true)
      end if

      translation = m.getFocusIndicatorTranslation(info, componentInfo, direction, isFloatingFocus)

      indicatorTranslation = [translation[0] + m.settings.feedbackOffsets[0], translation[1] + m.settings.feedbackOffsets[1]]

      indicatorSize = [size[0] + m.settings.feedbackOffsets[2] - m.settings.feedbackOffsets[0], size[1] + m.settings.feedbackOffsets[3] - m.settings.feedbackOffsets[1]]

      isHidden = mc.getPath(m.viewManager.content, "isHidden", false)

      return new ml.FocusIndicatorConfig(size, translation, componentInfo.contentIndex, info.contentIndex, indicatorTranslation, indicatorSize, m.settings, isHidden)
    end function


  end class
end namespace