import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/GridRowItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"
import "pkg:/source/ml/BaseRow.bs"
import "pkg:/source/ml/CellInfo.bs"

namespace ml
  ' displays items in a grid, with:
  ' - floating focus scrolling left and right
  ' - TBD fixed focus vertical
  @node("ml_GridRow", "ml_BaseRow")
  class GridRow extends ml.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ additional private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public focusedCellIndex = 0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private itemScroller
    private currentHeaderType = invalid
    private settings

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private backgroundGroup
    private cellsGroup
    private contentGroup
    private foregroundGroup
    private header

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ view tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private componentPool = m.global.componentPool

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      m.backgroundGroup = m.createSGNode("Group", m.top, "backgroundGroup")
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.cellsGroup = m.createSGNode("Group", m.contentGroup, "cellsGroup")
      m.foregroundGroup = m.createSGNode("Group", m.top, "foregroundGroup")

      'debug stuff
      ' if m.index = 0
      '   mioc.setInstance("listContainer", m.cellsGroup)
      ' end if
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new ml.GridRowItemViewManager(m.owner, m.top, m.cellsGroup, m.componentPool, 0, m.width)
      m.itemScroller = new ml.GridRowItemScroller(m.viewManager, m.owner.focusIndicatorManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ row movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onRecycle(newContent as mc.types.node)
      m.cleanHeader()
      m.viewManager.owner = m.owner
      m.viewManager.setContent(invalid)
      m.itemScroller.reset()
    end function

    protected override function onContentChange(content as mc.types.node, keepOldFocusIfPossible = false as boolean)
      if m.owner._updatesEnabled
        m.log.info("onContentChange")
        m.configureHeader()

        if content = invalid
          m.log.info("row content is set to invalid. resetting")
          m.viewManager.reset()
        else
          m.viewManager.reset()
          m.viewManager.setContent(content)

          ' m.focusManager.isNotifying = keepOldFocusIfPossible = invalid or keepOldFocusIfPossible = true
          m.itemScroller.reset(keepOldFocusIfPossible)
          ' m.focusManager.isNotifying = true
        end if
      else
        m.log.info("Updates are disabled. onContentChange returning without updating")
      end if
    end function

    protected override function onContentItemsChange(changes as mc.types.array)
      if m.owner._updatesEnabled
        if changes <> invalid and changes.count() > 0
          m.log.info("This content has changed in some way")
          m.viewManager.onContentItemsChange(changes)
        else
          m.viewManager.updateChangedItems()
        end if
      else
        m.log.info("Updates are disabled. onContentItemsChange returning without updating")
      end if
    end function

    public override function jumpToItem(index as integer, animated as boolean)

      if m._content <> invalid and index <> -1
        ' m.itemScroller.index = index
        ' m.focusedCellIndex = index
        ' m.owner.focusedCellIndex = index
        m.focusOnIndexNow(index)
      end if
    end function

    protected override function onIsRenderedChange()
      ' if m.viewManager <> invalid
      '   if m.isRendered
      '     'TODO get correct indexes
      '     m.itemScroller.notifyEnterEvent(m.itemScroller.focusIndex, m.itemScroller.focusIndex + 4)
      '   else
      '     'TODO get correct indexes
      '     m.itemScroller.notifyExitEvent(m.itemScroller.focusIndex, m.itemScroller.focusIndex + 4)
      '   end if
      ' end if
    end function

    public override function updateChangedItems()
      super.updateChangedItems()
    end function

    protected override function onListEvent(event as object) as void
      'TODO improve this - make it more efficient
      'make it so we can specify to pass on scroll updates
      'or pass on scroll/start/stop, or didEnter
      isPropagatedToAll = m.propagatedEvents[event.name]
      if isPropagatedToAll <> invalid
        if event.index = -1
          'ignore general grid event
          return
        end if

        if isPropagatedToAll
          if event.name = "didExit"
            m.viewManager.notifyExitEvent(event.index, event.index)
          else if event.name = "didEnter"
            m.viewManager.notifyEnterEvent(event.index, event.index, event.forceCellUpdate = true)
          end if
        end if
      else
        if event.contentIndex <> invalid and event.contentIndex <> -1
          cell = m.viewManager.getRenderer(event.contentIndex)
        else
          cell = m.viewManager.getRenderer(m.focusedCellIndex)
        end if

        if cell <> invalid
          cell.listEvent = event
        end if
      end if
    end function

    public override function getRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public override function getRect(index as integer, useScreenCoords = false as boolean)
      return m.viewManager.getRect(index, useScreenCoords = true)
    end function

    public override function getItemSize(index as integer) as mc.types.array
      return m.viewManager.getItemSize(index)
    end function

    public override function onFlowFocusFraction(fraction as float)
      ? " MOVED A FRACTION"
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    public override function getCellContainer()
      return m.cellsGroup
    end function

    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean) as void
      m.itemScroller.setFocusIndex(index, isMoving, notifyFocusManager = true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ header
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function configureHeader(forceUpdate = false as boolean)
      if m._content = invalid
        m.cleanHeader()
      else
        headerSettings = m.settings.headerSettings
        if forceUpdate = true or m.currentHeaderType = invalid or m.currentHeaderType <> headerSettings.compName
          m.cleanHeader()
          m.header = m.componentPool@.getComponent(headerSettings.compName, 1)

          if m.header <> invalid
            m.currentHeaderType = headerSettings.compName
            if headerSettings.position = "onTop"
              m.foregroundGroup.appendChild(m.header)
            else if headerSettings.position = "underneath"
              m.backgroundGroup.appendChild(m.header)
            end if
          else
            m.log.error("could not create header")

          end if
        end if

        if m.header <> invalid
          m.header.translation = [-m.settings.contentOffset[0], 0] 'cancel out this row's offset
          m.header.width = m.width
          m.header.height = headerSettings.height
          m.header@.setContent(m._content, headerSettings)
          m.contentGroup.translation = [0, headerSettings.height]
        else
          m.contentGroup.translation = [0, 0]
        end if
      end if
    end function

    private function cleanHeader()
      if m.header <> invalid
        m.log.info("cleaning header")
        m.header@.setContent(invalid)
        m.componentPool@.releaseComponent(m.header)
        m.header = invalid
        m.currentHeaderType = invalid
      end if
    end function

    private function focusOnIndexNow(index as integer) as void
      m.log.info("updating focus on cellIndex", index)

      if m.itemScroller <> invalid
        cellInfo = m.viewManager.getCellInfoForContentindex(index)
        if cellInfo = invalid
          m.log.error("No component info")
        end if

        m.itemScroller.forceFocusOnIndex(index, true, false)
        m.itemScroller.setCellInfo(cellInfo)

        ' m.setFocusIndex(index, false)

        config = m.itemScroller.getFocusIndicatorConfig(cellInfo, m.itemScroller.direction, false, false)
        if config <> invalid
          config.cellIndex = m.focusedCellIndex
          ' ? "GRID ROW focusOnIndexNow"
          m.owner.focusIndicatorManager@.setNextFocusIndicatorConfig(config)
          m.owner.focusIndicatorManager@.setFocusComplete(config)
        else
        end if
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List move API implementation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function moveFromPress(direction as integer, isLongPress as boolean) as boolean
      ? "moving row from press long? " isLongPress
      if isLongPress
        return m.itemScroller.moveToEnd(direction)
      else
        return m.itemScroller.moveFromPress(direction)
      end if
    end function

    function canMoveInDirection(direction as integer) as boolean
      ' if m.isAlreadyScrolling(key = "up" or key = "down")
      '   return false
      ' end if
      index = m.itemScroller.index
      normalizedColumn = index mod m.viewManager.numCols

      ' ? "CAN SCROLL KEY"; key

      return (m._content <> invalid and m._content.length > 0) and ((direction = -1 and normalizedColumn <> 0) or (direction = 1 and normalizedColumn < m.viewManager.numCols - 1))
    end function

  end class
end namespace
