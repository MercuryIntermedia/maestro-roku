import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/GridRowItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"
import "pkg:/source/ml/BaseRow.bs"
import "pkg:/source/ml/CellInfo.bs"

namespace ml
  ' displays items in a grid, with:
  ' - floating focus scrolling left and right
  ' - TBD fixed focus vertical
  @node("ml_GridRow", "ml_BaseRow")
  class GridRow extends ml.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private itemScroller

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ view tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      super.createViews()
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new ml.GridRowItemViewManager(m.owner, m.top, m.contentGroup, m.global.componentPool, 0, m.width)
      m.itemScroller = new ml.GridRowItemScroller(m.viewManager, m.owner.focusIndicatorManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onRecycle(newContent as mc.types.node)
      m.cleanHeader()
      m.viewManager.owner = m.owner
      m.viewManager.setContent(invalid)
      m.itemScroller.reset()
    end function

    protected override function onContentChange(content as mc.types.node, keepOldFocusIfPossible = false as boolean)
      if m.owner._updatesEnabled
        m.log.info("onContentChange")
        m.configureHeader()

        if content = invalid
          m.log.info("row content is set to invalid. resetting")
          m.viewManager.reset()
        else
          m.viewManager.reset()
          m.viewManager.setContent(content)

          ' m.focusManager.isNotifying = keepOldFocusIfPossible = invalid or keepOldFocusIfPossible = true
          m.itemScroller.reset(keepOldFocusIfPossible)
          ' m.focusManager.isNotifying = true
        end if
      else
        m.log.info("Updates are disabled. onContentChange returning without updating")
      end if
    end function

    protected override function onContentItemsChange(changes as mc.types.array)
      if m.owner._updatesEnabled
        if changes <> invalid and changes.count() > 0
          m.log.info("This content has changed in some way")
          m.viewManager.onContentItemsChange(changes)
        else
          m.viewManager.updateChangedItems()
        end if
      else
        m.log.info("Updates are disabled. onContentItemsChange returning without updating")
      end if
    end function

    public override function moveToIndex(index as integer, animated as boolean, animSpeedIndex = 0 as integer)
      'FIXME - what to do here?
      ? " GRID MOVE TO INDEX - ASSUMING THIS INDEX IS ON SCREEN - OR THIS SHOULD NOT HAVE BEEN CALLED"
      if m._content <> invalid and index <> -1
        m.itemScroller.forceFocusOnIndex(index, true, false)
      end if
    end function

    override function cancelMove(forceFocusUpdate as boolean)
      ? "GRID cancelling move CANCEL CANCEL========================"
      if m._content <> invalid
        m.itemScroller.cancelScrolling(forceFocusUpdate)
      end if
    end function

    public override function updateChangedItems()
      super.updateChangedItems()
    end function

    public override function getRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public override function getRect(index as integer, useScreenCoords = false as boolean)
      return m.viewManager.getRect(index, useScreenCoords = true)
    end function

    public override function getItemSize(index as integer) as mc.types.array
      return m.viewManager.getItemSize(index)
    end function

    ' function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean) as void
    '   m.itemScroller.setFocusIndex(index, isMoving, notifyFocusManager = true)
    ' end function

    private function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List move API implementation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function moveFromPress(direction as integer, isLongPress as boolean, isPage = false as boolean) as boolean
      ? "moving row from press long? " isLongPress
      if isLongPress
        return m.itemScroller.moveToEnd(direction)
      else
        return m.itemScroller.moveFromPress(direction, true, isPage)
      end if
    end function

    override function canMoveInDirection(direction as integer) as boolean
      ' if m.isAlreadyScrolling(key = "up" or key = "down")
      '   return false
      ' end if
      index = m.itemScroller.index
      normalizedColumn = index mod m.viewManager.numCols

      ' ? "CAN SCROLL KEY"; key

      return (m._content <> invalid and m._content.length > 0) and ((direction = -1 and normalizedColumn <> 0) or (direction = 1 and normalizedColumn < m.viewManager.numCols - 1))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onDidEnter(subRowIndex as integer, direction as integer, forceCellUpdate = false as boolean)
      ? " GRID onDidEnter "
      m.viewManager.notifyEnterEvent(subRowIndex, subRowIndex, forceCellUpdate = true)
    end function

    private function onDidExit(subRowIndex as integer, direction as integer)
      ? " GRID onDidExit "
      m.viewManager.notifyExitEvent(subRowIndex, subRowIndex)
    end function

    ' private function onScrollingChange(rowIndex as integer, subRowIndex as integer, direction as integer)
    '   ? " onScrollingChange "
    ' end function

    private function onDidGainFocus(subRowIndex as integer, direction as integer)
      ? " GRID onDidGainFocus " m.index subRowIndex direction
    end function

    private function onDidLoseFocus(subRowIndex as integer, direction as integer)
      ? " GRID onDidLoseFocus " m.index subRowIndex direction
    end function

    private function onGainingFocus(subRowIndex as integer, direction as integer, fraction as float)
      ? " GRID onGainingFocus " m.index subRowIndex direction fraction
    end function

    private function onLosingFocus(subRowIndex as integer, direction as integer, fraction as float)
      ? " GRID onLosingFocus " m.index subRowIndex direction fraction
    end function

    private function callMethodOnFocusedCell(functionName as string, args as mc.types.array)
      cell = m.itemScroller.cellInfo.component

      if cell <> invalid
        ' TODO potentially filter events
        cell@._apply(functionName, args, false)
      end if
    end function

  end class
end namespace
