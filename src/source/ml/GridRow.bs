import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/GridRowItemScroller.bs"
import "pkg:/source/ml/GridRowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"
import "pkg:/source/ml/BaseRow.bs"
import "pkg:/source/ml/ComponentInfo.bs"

namespace ml
  ' displays items in a grid, with:
  ' - floating focus scrolling left and right
  ' - TBD fixed focus vertical
  @node("ml_GridRow", "ml_BaseRow")
  class GridRow extends ml.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ additional private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public focusedCellIndex = 0
    public focusedCellPercent = 0.0

    public isMultiRow = true
    public focusedRowPercent = 0.0
    public focusedRowIndex = 0

    public isScrolling = false
    private isDoingFlowFocus = false
    private isScrollingEnabled = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private focusManager
    private itemScroller
    private currentHeaderType = invalid
    private settings

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private backgroundGroup
    private cellsGroup
    private contentGroup
    private foregroundGroup
    private header

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ view tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private componentPool = m.global.componentPool

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      m.backgroundGroup = m.createSGNode("Group", m.top, "backgroundGroup")
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.cellsGroup = m.createSGNode("Group", m.contentGroup, "cellsGroup")
      m.foregroundGroup = m.createSGNode("Group", m.top, "foregroundGroup")

      'debug stuff
      ' if m.index = 0
      '   ? "SETTING LIST CONTAINER"
      '   mioc.setInstance("listContainer", m.cellsGroup)
      ' end if
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new ml.GridRowItemViewManager(m.owner, m.top, m.cellsGroup, m.componentPool, 0, m.width)
      m.focusManager = new ml.ItemFocusManager(m.viewManager, m.owner.cellEvents, m.index)
      m.focusManager.name = "ROW FM "
      m.focusManager.isRow = true
      m.itemScroller = new ml.GridRowItemScroller(m.viewManager, m.focusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ row movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onRecycle(newContent as mc.types.node)
      m.cleanHeader()
      m.viewManager.setContent(invalid)
      m.itemScroller.reset()
    end function

    protected override function onContentChange(content as mc.types.node, keepOldFocusIfPossible = false as boolean)
      m.log.info("onContentChange")
      m.configureHeader()

      if content = invalid
        m.log.info("row content is set to invalid. resetting")
        m.viewManager.reset()
      else
        m.viewManager.reset()
        m.viewManager.setContent(content)

        m.focusManager.isNotifying = keepOldFocusIfPossible = invalid or keepOldFocusIfPossible = true
        m.itemScroller.reset(keepOldFocusIfPossible)
        m.focusManager.isNotifying = true
      end if
      ' end if
    end function

    protected override function onContentItemsChange(changes as mc.types.array)
      m.log.info("This content has changed in some way")
      m.viewManager.onContentItemsChange(changes)
    end function

    protected override function onIsRenderedChange()
      if m.viewManager <> invalid
        m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index)
      end if
    end function

    protected override function onListEvent(event as object)
      ' ? "ROW ON LIST EVENT " ; event
      if event.name = "willEnter" or event.name = "didEnter"
        for each component in m.cellsGroup.getChildren(-1, 0)
          if component.doesExist("listEvent")
            component.listEvent = event
          end if
        end for
      end if
      cell = m.viewManager.getRenderer(m.focusedCellIndex)
      if cell <> invalid
        ' TODO potentially filter events
        cell.listEvent = event
      end if
    end function

    public override function jumpToItem(index as integer, animated as boolean)
      if m._content <> invalid
        m.owner@.moveToSubRowIndex(m.index, index, 1, animated, true)
      end if
    end function

    public override function getRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public override function getRect(index as integer, useScreenCoords = false as boolean)
      return m.viewManager.getRect(index, useScreenCoords)
    end function

    public override function getItemSize(index as integer) as mc.types.array
      return m.viewManager.getItemSize(index)
    end function

    public override function onFlowFocusFraction(fraction as float)
      m.isDoingFlowFocus = fraction <> 1
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    function moveUsingFlowAnim(index as integer, nextIndex as integer, direction as integer)
      return m.itemScroller.moveUsingFlowAnim(index, nextIndex, direction)
    end function

    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean) as void
      m.itemScroller.setFocusIndex(index, isMoving, notifyFocusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ header
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function configureHeader()
      if m._content = invalid
        m.cleanHeader()
      else
        headerSettings = m.settings.headerSettings
        if m.currentHeaderType = invalid or m.currentHeaderType <> headerSettings.compName
          m.cleanHeader()
          m.currentHeaderType = headerSettings.compName
          m.header = m.componentPool@.getComponent(headerSettings.compName, 1)

          if m.header <> invalid
            if headerSettings.position = "onTop"
              m.foregroundGroup.appendChild(m.header)
            else if headerSettings.position = "underneath"
              m.backgroundGroup.appendChild(m.header)
            end if
          end if
        end if

        if m.header <> invalid
          m.header.translation = [- m.settings.contentOffset[0], 0] 'cancel out this row's offset
          m.header.width = m.width
          m.header.height = headerSettings.height
          m.header@.setContent(m._content, headerSettings)
          m.contentGroup.translation = [0, headerSettings.height]
        else
          m.contentGroup.translation = [0, 0]
        end if
      end if
    end function

    private function cleanHeader()
      if m.header <> invalid
        m.log.info("cleaning header")
        m.header@.setContent(invalid)
        m.componentPool@.releaseComponent(m.header)
        m.header = invalid
        m.currentHeaderType = invalid
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressLeft() as boolean
      m.log.verbose("onKeyPressLeft")
      m.itemScroller.isDoingLongPress = false
      if m.isAlreadyScrolling()
        return true
      end if
      if m.canScroll("left")
        return m.itemScroller.moveFromPress(-1)
      end if
      return false
    end function

    private function onKeyPressRight() as boolean
      m.log.verbose("onKeyPressRight")
      if m.isAlreadyScrolling()
        return true
      end if

      m.itemScroller.isDoingLongPress = false
      if m.canScroll("right")
        return m.itemScroller.moveFromPress(1)
      end if
      return false
    end function

    private function getLongPressIntervalForKey(key as string) as float
      m.log.verbose("getLongPressIntervalForKey", key)
      if m.canScroll(key)
        return 0.2
      else
        return 0
      end if
    end function

    private function canScroll(key as string)

      if m.isAlreadyScrolling()
        return false
      end if
      index = m.itemScroller.index
      normalizedColumn = index mod m.viewManager.numCols
      return (m.isScrollingEnabled and m._content <> invalid and m._content.getChildCount() > 0) and ((key = "left" and normalizedColumn <> 0) or (key = "right" and normalizedColumn < m.viewManager.numCols - 1))
    end function

    private function isAlreadyScrolling() as boolean
      return m.viewManager.isScrolling or m.isDoingFlowFocus
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.verbose(">>>>onLongPressStart", key)
      '      ? " ON LONG PRESS START "; key
      if m.canScroll(key)
        m.log.verbose("long press started on key", key, "going to animate to final scroll position")
        m.itemScroller.isDoingLongPress = true
        if key = "left"
          m.itemScroller.moveToEnd(-1, true, true)
        else
          m.itemScroller.moveToEnd(1, true, true)
        end if

        return true
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean

      m.itemScroller.isDoingLongPress = false
      if key = "left" or key = "right"
        m.log.verbose("long press finished on key", key)
        m.itemScroller.cancelScrolling()
        return true
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function onWillLoseFocus(direction as integer)
      m.log.verbose("This row will lose focus - disabling scrolling")
      m.itemScroller.cancelScrolling()
      m.toggleLongPressTimer(0)
      m.isScrollingEnabled = false
    end function

    protected function onWillGainFocus(direction as integer)
      m.log.verbose("This row will gain focus - enabling scrolling")
      m.isScrollingEnabled = true
    end function

  end class
end namespace
