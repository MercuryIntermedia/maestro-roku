import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
#const use_debug_hacks = false

namespace ml
  class ItemFocusManager extends mc.BaseClass

    public viewManager = invalid
    public itemScroller = invalid
    public nextCell = invalid
    public cell = invalid
    public index = 0
    public indexPosition = 0
    public nextIndex = 0
    public nextPosition = 0
    public direction = 0
    public didStart = false
    public didFinish = false
    public isRow = false
    public isNotifying = true

    private container
    private moveAnimation
    private rowIndex
    private delegates

    function new(viewManager as ml.ItemViewManager, scroller as ml.ItemScroller, ownerDelegate = invalid as object, rowIndex = -1 as float)
      super("ItemFocusManager")
      m.rowIndex = rowIndex
      m.viewManager = viewManager
      m.itemScroller = scroller
      m.itemScroller.focusManager = m
      m.container = viewManager.container
      m.moveAnimation = scroller.moveAnimation
      m.delegates = [viewManager.owner]

      if ownerDelegate <> invalid
        m.delegates.push(ownerDelegate)
      else
        m.log.error("There was no delegate passed to this focus manager - events wont be handled")
      end if
      owner = viewManager.owner
      if owner.delegate <> invalid
        m.delegates.push(owner.delegate)
      end if

    end function

    function setFocusPosition(index as integer, indexPosition as integer, nextIndex as integer, nextPosition as integer, direction as integer) as void
      m.log.info(index, indexPosition, nextIndex, nextPosition, direction)
      ' ? "+++++++++++++++++++++++++++++++++++++++++++++++++++++++"
      ' ? "SFP I: "; index ; " NI "; nextIndex ; " D "; direction
      if m.index = index and m.nextIndex = nextIndex and m.direction = direction
        return
      end if
      m.index = index
      m.indexPosition = indexPosition
      m.nextIndex = nextIndex
      m.nextPosition = nextPosition
      m.direction = direction
      m.cell = m.viewManager.getRenderer(m.index)
      m.nextCell = m.viewManager.getRenderer(m.nextIndex)
      m.didStart = false
      m.didFinish = false
      m.onFocusUpdate(0)
    end function

    function onFocusAnimationUpdate(fraction as float) as void
      ' ? "ANIM UPDATE "; m.name ; " F " ; fraction

      if m.didStart and not m.didFinish
        m.onFocusUpdate(fraction)
      end if
    end function

    function onContainerPositionChange(offset as integer)
      ' ? "OCPC " ; offset
      distance = abs(m.nextPosition - m.indexPosition)
      currentPos = abs(m.indexPosition - offset)
      if distance <> 0
        fraction = currentPos / distance
      else
        fraction = 0
      end if
      #if use_debug_hacks
        mioc.setInstance("_percent", fraction)
        mioc.setInstance("_distance", distance)
        mioc.setInstance("_currentPos", currentPos)
        mioc.setInstance("_startPos", m.indexPosition)
        mioc.setInstance("_offset", offset)
        mioc.setInstance("_currentPos", offset)
        mioc.setInstance("_targetPos", m.nextPosition)
      #end if
      ' ? " IP " ; m.indexPosition ;" > NIP "; m.nextPosition
      ' ? "offset:" ; offset ; " CP: " ; currentPos ; " P " ; m.indexPosition ;" > "; m.nextPosition ; " D:" ; distance ; " C:" ; " F: ";fraction

      m.onFocusUpdate(mc.clamp(fraction, 0, 1))
      return fraction
    end function

    function onFocusUpdate(fraction as float) as void
      if fraction = 1 or fraction = 0
        ' ? "+++ onFocusUpdate(" ; m.name ; ") didStart "; m.didStart ; " isNotifying " ; m.isNotifying ; fraction
        ' ? " OFU I "; m.index ; " NI "; m.nextIndex
      end if
      if not m.isNotifying
        ' ? "NOT NOTIFYING"
        return
      end if
      if not m.didStart
        name = "willLoseFocus"
        nextName = "willGainFocus"
        m.didStart = true
        m.setOwnerNextFocusIndex()
        ' ? " + sending WILL lose " ; m.index ; " / WILL gain" ; m.nextIndex
      else if fraction = 0
        return
      else if fraction = 1
        if m.didFinish or not m.didStart
          return
        end if
        ' ? " DID FINISH "; m.nextIndex
        m.didFinish = true
        name = "didLoseFocus"
        nextName = "didGainFocus"
        ' ? " + sending DID lose " ; m.index ; " / DID gain" ; m.nextIndex
        m.setOwnerIndexes()
      else
        name = "losingFocus"
        nextName = "gainingFocus"
      end if

      if m.isRow
        m.viewManager.owner.focusedCellPercent = fraction
      else
        m.viewManager.owner.focusedRowPercent = fraction
      end if

       m.sendEvents(name, nextName, fraction)
    end function

    function sendEvents(name as string, nextName as string, fraction as float)
      event = {
        direction: m.direction
        fraction: fraction
        name: name
        index: m.index
      }
      nextEvent = {
        direction: m.direction
        fraction: fraction
        name: nextName
        index: m.nextIndex
      }
      isSendingFromEvent = m.nextIndex <> m.index
      if isSendingFromEvent
        event.rowIndex = m.rowIndex
      end if
      nextEvent.rowIndex = m.rowIndex

      'let components know, so they can react
      if isSendingFromEvent and m.cell <> invalid
        m.cell.listEvent = event
      end if

      if m.nextCell <> invalid
        m.nextCell.listEvent = nextEvent
      end if

      for each delegate in m.delegates
        if isSendingFromEvent
          delegate.listEvent = event
        end if
        delegate.listEvent = nextEvent
      end for
    end function

    function setOwnerNextFocusIndex()
      if m.isRow
        m.viewManager.owner.nextFocusIndex = [m.viewManager.row.index, m.nextIndex]
      else
        comp = m.viewManager.getRenderer(m.nextIndex)
        if comp <> invalid
          m.viewManager.owner.nextFocusIndex = [comp.index, comp.focusedCellIndex]
        end if
      end if

    end function

    function setOwnerIndexes()
      if m.isRow
        m.viewManager.owner.focusedCellIndex = m.nextIndex
        m.viewManager.row.focusedCellIndex = m.nextIndex
      else
        m.viewManager.owner.focusedRowIndex = m.nextIndex
        comp = m.viewManager.getRenderer(m.nextIndex)
        if comp <> invalid
          m.viewManager.owner.focusedCellIndex = comp.focusedCellIndex
        end if
      end if

    end function

  end class
end namespace