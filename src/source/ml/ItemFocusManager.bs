import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/ml/CellInfo.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"
import "pkg:/source/ml/FocusIndicatorManager.bs"

namespace ml
  class ItemFocusManager extends mc.BaseClass


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ State
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusIndicatorConfig = ml.createFocusIndicatorConfig(invalid, invalid)
    private previousFocusIndicatorConfig = ml.createFocusIndicatorConfig(invalid, invalid)
    private didStart = false
    private didFinish = false
    private isNotifying = true
    private lastSentFraction = -1
    private direction = 0

    private delegates as mc.types.array
    private ownerDelegate as mc.types.node
    private fromEvent as ml.ListEvent
    private toEvent as ml.ListEvent
    private isSendingFromEvent = false
    private isSendingToEvent = false

    private focusIndicatorManager as ml.FocusIndicatorManager
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function new(name as string, focusIndicatorManager as mc.types.node)
      super("ItemFocusManager")
      m.name = name
      m.focusIndicatorManager = focusIndicatorManager
      m.fromEvent = {}
      m.toEvent = {}
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function reset(focusIndicatorConfig as ml.FocusIndicatorConfig)
      'FIXME - get delegates when we set properties
      ' if rowIndex = invalid
      '   rowIndex = -1
      ' end if
      ' m.rowIndex = rowIndex
      ' m.delegates = [viewManager.owner]

      ' if ownerDelegate <> invalid
      '   m.delegates.push(ownerDelegate)
      ' else
      '   m.log.error("There was no delegate passed to this focus manager - events wont be handled")
      '   ' ? " NO OWNER DELEGATE!!!!!"
      ' end if
      ' owner = viewManager.owner
      ' if owner.delegate <> invalid
      '   m.delegates.push(owner.delegate)
      ' end if
    end function

    ' function updateCellInfo(cellInfo as ml.cellInfo, nextCellInfo as ml.cellInfo)
    '   'ensure that the focus manager
    ' end function

    function setNextFocusIndicatorConfig(focusIndicatorConfig as ml.FocusIndicatorConfig) as void

      if focusIndicatorConfig = invalid
        m.log.error("received invalid config")
        return
      end if

      if m.isSameConfig(focusIndicatorConfig)
        ? ">>>> NOTHING HAS CHANGED DS " ; m.didStart ; " DF "; m.didFinish
        'TODO - why is this here?
        m.didFinish = false
        return
      end if


      ' ? ">>S> "; m.viewManager.__classname
      ' ? ">>S> SET COMP INFO " ; nextFocusIndicatorConfig.rowIndex ; ", " nextFocusIndicatorConfig.colIndex ; " " ; nextFocusIndicatorConfig.gridIndex
      ' if focusIndicatorConfig <> invalid and focusIndicatorConfig.gridIndex <> invalid and focusIndicatorConfig.gridIndex <> -1
      '   m.previousFocusIndicatorConfig = focusIndicatorConfig
      ' else
      '   m.previousFocusIndicatorConfig = m.focusIndicatorConfig
      ' end if

      ' if m.previousFocusIndicatorConfig <> invalid
      '   ? ">>S> PREVIOUS " ; ; m.previousFocusIndicatorConfig.rowIndex ; ", " m.previousFocusIndicatorConfig.colIndex ; " " ; m.previousFocusIndicatorConfig.gridIndex
      ' end if

      m._setNextFocusIndicatorConfig(focusIndicatorConfig)
      m.onFocusUpdate(0)
    end function


    function onFocusAnimationUpdate(fraction as float) as void
      ' ? "ANIM UPDATE "; m.name ; " F " ; fraction ; " DS" ; m.didStart ; " DF " ; m.didFinish
      ' ? " CI "; m.cellInfo.index ; " NCI "; m.nextCellInfo.index
      if m.didStart and not m.didFinish
        m.onFocusUpdate(fraction)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function _setNextFocusIndicatorConfig(focusIndicatorConfig as ml.FocusIndicatorConfig)
      m.previousFocusIndicatorConfig = m.focusIndicatorConfig
      m.lastSentFraction = -1
      m.focusIndicatorConfig = focusIndicatorConfig
      m.direction = m.focusIndicatorConfig.direction
      m.didStart = false
      m.didFinish = false

      m.configureEventTemplate(m.fromEvent, m.previousFocusIndicatorConfig)
      m.configureEventTemplate(m.toEvent, m.focusIndicatorConfig)
      m.isSendingFromEvent = m.getIsSendingFromEvent()
      m.isSendingToEvent = m.getIsSendingToEvent()
    end function

    private function getIsSendingFromEvent()
      return m.previousFocusIndicatorConfig.cell <> invalid and m.fromEvent.index <> -1 and m.toEvent.index <> m.fromEvent.index
    end function

    private function getIsSendingToEvent()
      return m.toEvent.index <> -1 and (m.toEvent.index <> m.fromEvent.index) and m.previousFocusIndicatorConfig.cell <> invalid
    end function

    private function isSameConfig(newConfig as ml.FocusIndicatorConfig)
      if m.focusIndicatorConfig = invalid or newConfig = invalid
        return false
      end if
      return m.focusIndicatorConfig.rowIndex = newConfig.rowIndex and m.focusIndicatorConfig.colIndex = newConfig.colIndex and m.focusIndicatorConfig.direction = newConfig.direction
    end function

    private function onFocusUpdate(fraction as float) as void
      if fraction = 1 or fraction = 0
        ' ? "+++ onFocusUpdate(" ; m.name ; ") didStart "; m.didStart ; " isNotifying " ; m.isNotifying ; fraction
        ' ? " OFU I "; m.index ; " NI "; m.nextIndex
      end if
      if m.didFinish
        return
      end if
      if not m.isNotifying
        ' ? "NOT NOTIFYING"
        return
      end if
      if m.focusIndicatorConfig = invalid
        ' ? " no focus config"
        return
      end if

      if not m.didStart
        name = "willLoseFocus"
        nextName = "willGainFocus"
        m.didStart = true
      else if fraction = 0
        return
      else if fraction >= 1
        ' ? " DID FINISH "; m.focusIndicatorConfig.rowIndex " " m.focusIndicatorConfig.colIndex
        m.didFinish = true
        name = "didLoseFocus"
        nextName = "didGainFocus"
        m.focusIndicatorManager.setFocusComplete(m.focusIndicatorConfig)
      else
        name = "losingFocus"
        nextName = "gainingFocus"
      end if

      m.focusIndicatorManager.setFocusedFraction(fraction)

      m.sendEvents(name, nextName, fraction)
    end function

    private function sendEvents(name as string, nextName as string, fraction as float) as void
      if fraction < m.lastSentFraction
        return
      end if

      m.lastSentFraction = fraction

      m.fromEvent.name = name
      m.fromEvent.fraction = fraction

      m.toEvent.name = nextName
      m.toEvent.fraction = fraction

      if m.isSendingFromEvent
        m.previousFocusIndicatorConfig.cell.listEvent = m.fromEvent
      end if

      if m.isSendingToEvent
        m.focusIndicatorConfig.cell.listEvent = m.toEvent
      end if

      'FIXME - send cell events to delegates
      ' for each delegate in m.delegates
      '   if isSendingFromEvent
      '     delegate.listEvent = event
      '   end if
      '   delegate.listEvent = nextEvent
      ' end for
    end function

    private function configureEventTemplate(event as ml.ListEvent, config as ml.focusIndicatorConfig)
      event.direction = m.direction
      event.fraction = 0
      if config <> invalid
        event.index = config.index
        if config.index <> invalid
          event.index = config.index
        else
          event.index = -1
        end if
        if config.rowIndex <> invalid
          event.rowIndex = config.rowIndex
        else
          event.rowIndex = -1
        end if
      else
        event.index = -1
        event.rowIndex = -1
      end if
    end function

  end class
end namespace
