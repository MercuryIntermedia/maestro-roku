import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/ml/ItemViewManager.bs"

namespace ml
  class ViewPortEventNotifier extends mc.BaseClass
    'rendered component maps
    private viewManager as ml.ItemViewManager
    private container as mc.types.node
    private axes = 0
    public delegates = []

    public numberToLookAhead = 8
    public numberToLookBehind = 3

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    function new(viewManager as ml.ItemViewManager)
      super("ItemScroller")
      m.viewManager = viewManager
      m.container = viewManager.container
      m.axes = viewManager.axes

      'TODO get these values set from settings
      if m.viewManager.row <> invalid
        m.numberToLookAhead = 8
      else
        m.numberToLookAhead = 5
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onViewManagerUpdate()
      m.delegates = []

      if m.viewManager.delegate <> invalid
        m.delegates.push(m.viewManager.delegate)
      end if
    end function

    function notifyViewportEvents(componentInfo as ml.ComponentInfo, nextComponentInfo as ml.ComponentInfo, direction as integer, isMoving as boolean) as void
      if nextComponentInfo = invalid or m.viewManager.visibleComponents = invalid
        return
      end if
      index = m.viewManager.itemScroller.index
      rowIndexStart = index - m.numberToLookBehind
      rowIndexEnd = index + m.numberToLookAhead
      for i = rowIndexStart to rowIndexEnd
        comp = m.viewManager.visibleComponents[i]
        if comp <> invalid and comp.index <> invalid
          index = comp.index
          isInViewPort = rowIndexStart < index and index < rowIndexEnd

          ' wasInViewPort = comp.isInViewPort

          'Can change policy here..
          ' if isInViewPort and isInViewPort <> comp.isInViewPort
          if isInViewPort <> comp.isInViewPort
            comp.isInViewPort = isInViewPort
            if isInViewPort
              eventName = "didEnter"
            else
              eventName = "didExit"
            end if
            comp.listEvent = {
              name: eventName
              direction: direction
              index: index
            }

          end if
          ' ? " isInViewPort "; isInViewPort
          ' compStates[item.id] = isInViewP
        end if
      end for
      events = []
      for each delegate in m.delegates
        delegate.viewportEvents = events
      end for
    end function

    private inViewportComponentsById = {}
    private inViewportSubIndexes = {}

    function notifyListViewportEvents(componentInfo as ml.ComponentInfo, nextComponentInfo as ml.ComponentInfo, direction as integer, isMoving as boolean) as void
      if nextComponentInfo = invalid or m.viewManager.visibleComponents = invalid
        return
      end if
      newInViewportComponentsById = {}
      newInViewportSubIndexes = {}


      if direction = -1
        index = componentInfo.index
      else
        index = nextComponentInfo.index
      end if

      rowIndexStart = index - m.numberToLookBehind
      rowIndexEnd = index + m.numberToLookAhead

      lastContentIndex = -1
      for i = rowIndexStart to rowIndexEnd - 1
        compInfo = m.viewManager.itemScroller.componentInfos[i]
        if compInfo <> invalid
          comp = compInfo.component
          if compInfo.contentIndex <> lastContentIndex
            newInViewportComponentsById[comp.id] = comp
            m.inViewportComponentsById.delete(comp.id)
            if not comp.isInViewPort
              ' ? " LIST C"
              comp.isInViewPort = true
            end if
          end if
          comp.listEvent = {
            name: "didEnter"
            direction: direction
            index: compInfo.componentIndex
          }
          subIndexKey = compInfo.componentIndex.toStr()
          ' ? ">>> SUB INDEX KEY IS " ; subIndexKey
          newInViewportSubIndexes[subIndexKey] = comp
          m.inViewportSubIndexes.delete(subIndexKey)
        end if
      end for

      for each key in m.inViewportSubIndexes
        comp = m.inViewportSubIndexes[key]
        comp.listEvent = {
          name: "didExit"
          direction: 1
          index: key.toInt()
        }
      end for

      for each key in m.inViewportComponentsById
        comp = m.inViewportComponentsById[key]
        if comp.isInViewPort
          comp.isInViewPort = false
          comp.listEvent = {
            name: "didExit"
            direction: 1
            index: -1
          }
        end if
      end for

      m.inViewportComponentsById = newInViewportComponentsById
      m.inViewportSubIndexes = newInViewportSubIndexes
    end function
  end class


end namespace
