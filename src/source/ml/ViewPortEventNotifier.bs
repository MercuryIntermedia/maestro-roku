import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/ml/ItemViewManager.bs"

namespace ml
  class ViewPortEventNotifier extends mc.BaseClass
    'rendered component maps
    private RCMap = {}
    private lastRCMap = {}
    private nextRCMap = {}
    private viewManager as ml.ItemViewManager
    private container as mc.types.node
    private axes = 0
    public delegates = []

    public numberToLookAhead = 8
    public numberToLookBehind = 3

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    function new(viewManager as ml.ItemViewManager)
      super("ItemScroller")
      m.viewManager = viewManager
      m.container = viewManager.container
      m.axes = viewManager.axes

      if m.viewManager.row <> invalid
        m.numberToLookAhead = 8
      else
        m.numberToLookAhead = 3
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onViewManagerUpdate()
      m.delegates = []

      if m.viewManager.delegate <> invalid
        m.delegates.push(m.viewManager.delegate)
      end if
    end function


    function notifyViewportEvents(componentInfo as ml.ComponentInfo, nextComponentInfo as ml.ComponentInfo, direction as integer, isMoving as boolean) as void
      if nextComponentInfo = invalid or m.viewManager.visibleCOmponents = invalid
        return
      end if
      ' ? " NOTIFY VIEW PORT EVENTS!!! "
      compStates = {}
      index = m.viewManager.itemScroller.index
      sStart = index - m.numberToLookBehind
      sEnd = index + m.numberToLookAhead
      for i = sStart to sEnd
        comp = m.viewManager.visibleComponents[i]
        if comp <> invalid and comp.index <> invalid
          index = comp.index
          isInViewPort = sStart < index and index < sEnd

          ' wasInViewPort = comp.isInViewPort

          'Can change policy here..
          ' if isInViewPort and isInViewPort <> comp.isInViewPort
          if isInViewPort <> comp.isInViewPort
            comp.isInViewPort = isInViewPort
            if isInViewPort
              eventName = "didEnter"
            else
              eventName = "didExit"
            end if
            comp.listEvent = {
              name: eventName
              direction: direction
              index: index
            }

          end if
          ' ? " isInViewPort "; isInViewPort
          ' compStates[item.id] = isInViewP
        end if
      end for
      m.RCMap = compStates
      events = []
      m.lastRCMap = m.RCMap
      for each delegate in m.delegates
        delegate.viewportEvents = events
      end for
    end function


    ' function notifyViewportEvents(componentInfo as ml.ComponentInfo, nextComponentInfo as ml.ComponentInfo, direction as integer, isMoving as boolean) as void
    '   if nextComponentInfo = invalid
    '     return
    '   end if

    '   'maintain a collection of controls that are in bounds right now:
    '   m.RCMap = m.viewManager.getComponentsInViewPort(- m.container.translation[m.axes])

    '   if isMoving and nextComponentInfo.index <> componentInfo.index
    '     nextOffset = nextComponentInfo.getScrollOffset(direction)
    '     m.nextRCMap = m.viewManager.getComponentsInViewPort(nextOffset)
    '   else
    '     m.nextRCMap = {}
    '   end if

    '   'we assign events to each component AND send them to the owner, so it can choose what to do
    '   events = []

    '   '1. component was on screen and is going off
    '   'or component was not on screen and will come on.
    '   for each comp in m.viewManager.renderedComponents
    '     if comp <> invalid
    '       id = comp.id
    '       if m.nextRCMap[id] = true and comp.isInViewport <> true
    '         m.setCompViewPortStatus(direction, comp, "didEnter", "none", events)
    '       else if m.nextRCMap[id] = false and comp.isInViewport = true
    '         m.setCompViewPortStatus(direction, comp, "didExit", "didEnter", events)
    '       end if
    '     end if
    '   end for

    '   for each id in m.viewManager.renderersByContentId
    '     comp = m.viewManager.renderersByContentId[id]
    '     ' for each comp in m.viewManager.renderedComponents
    '     if comp <> invalid
    '       id = comp.id

    '       ' m.log.info(" id", id, " is in vp", comp.isInViewPort, "RCMap", m.RCMap[id], "vs", comp._vs)
    '       if m.RCMap[id] = true and comp.isInViewport <> true
    '         'ensure clients always get didEnter before didEnter
    '         m.setCompViewPortStatus(direction, comp, "didEnter", "none", events)
    '         m.setCompViewPortStatus(direction, comp, "didEnter", "didEnter", events)
    '         comp.isInViewport = true
    '         ' comp.visible = true
    '       else if m.RCMap[id] <> true and comp.isInViewPort = true

    '         'ensure clients always get didExit before didExit
    '         m.setCompViewPortStatus(direction, comp, "didExit", "didEnter", events)
    '         m.setCompViewPortStatus(direction, comp, "didExit", "didExit", events)
    '         comp.isInViewport = false
    '         ' comp.visible = false
    '       end if
    '     end if
    '   end for

    '   ' m.log.info("events")
    '   ' for each event in events
    '   '   m.log.info("event", event)
    '   ' end for
    '   m.lastRCMap = m.RCMap
    '   for each delegate in m.delegates
    '     delegate.viewportEvents = events
    '   end for
    ' end function

    function setCompViewPortStatus(direction as integer, comp as mc.types.node, eventName as string, validState as string, events as mc.types.array)
      if not comp.doesExist("_vs")
        comp.addFields({ _vs: "none" })
      end if

      if comp._vs = validState
        comp._vs = eventName
        event = { name: eventName, direction: direction, index: comp.index }
        comp.listEvent = event
        events.push(event)
      end if
    end function

  end class


end namespace
