import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/ml/ItemViewManager.bs"
import "pkg:/source/ml/ItemScroller.bs"

namespace ml
  class ViewPortEventNotifier extends mc.BaseClass
    'rendered component maps
    private viewManager as ml.ItemViewManager
    private container as mc.types.node
    private axes = 0
    public delegates = []

    public renderStrategy = "all"
    public numberToLookAhead = 4
    public numberToLookBehind = 4

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    function new(viewManager as ml.ItemViewManager)
      super("ViewPortEventNotifier")
      m.viewManager = viewManager
      m.container = viewManager.container
      m.axes = viewManager.axes
      m.onViewManagerUpdate()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onViewManagerUpdate()
      m.delegates = []

      if m.viewManager.delegate <> invalid
        m.delegates.push(m.viewManager.delegate)
      end if

      if m.viewManager.row = invalid
        settings = m.viewManager.listSettings
      else
        settings = m.viewManager.getItemSettings()
      end if
      if settings <> invalid
        m.renderStrategy = settings.renderStrategy
        if m.renderStrategy = "all"
          m.numberToLookAhead = 99999
          m.numberToLookBehind = 99999
        else
          m.numberToLookBehind = settings.numberItemsToRenderBefore
          m.numberToLookAhead = settings.numberItemsToRenderAfter
        end if
      else
        m.numberToLookAhead = 4
        m.numberToLookBehind = 4
        m.renderStrategy = "all"
      end if

      'HACK
      'HACK
      'HACK
      'HACK
      'HACK
      m.numberToLookAhead = 3
      m.numberToLookBehind = 2
    end function

    protected renderedIndexes = []

    function notifyViewportEvents(direction as integer, isRowInViewport as boolean, forceAll = false as boolean) as void
      ' ? " NVE A"
      'for non-lists
      if m.viewManager.visibleItems = invalid
        ' ? "VPN NO VISIBLE COMPONENTS"
        return
      end if

      oldRendereredCellInfosByIndex = {}
      oldRendereredCellInfosByIndex.append(m.viewManager.rendereredCellInfosByIndex)

      if not isRowInViewport
        ' ? " NVE C"
        ' ? " NOTIFYING ALL ARE REMOVED"
        indexes = m.viewManager.getRenderedIndexes()

        m.viewManager.notifyExitEvent(indexes)
      else
        ' ? " NVE D"
        enterIndexes = []
        index = m.viewManager.itemScroller.index
        startIndex = index - m.numberToLookBehind
        endIndex = index + m.numberToLookAhead
        ' ? " NVE E"
        startIndex = mc.clamp(startIndex, 0, m.viewManager.numberOfItems)
        endIndex = mc.clamp(endIndex, 0, m.viewManager.numberOfItems)
        if forceAll
          fromIndex = 0
          toIndex = m.viewManager.numberOfItems
        else
          fromIndex = startIndex
          toIndex = endIndex
        end if
        ' ? " NVE F "; startIndex ; " TO " ; endIndex " from " fromIndex " to " toIndex
        for index = fromIndex to toIndex - 1
          ' content = m.viewManager.visibleItems[i]
          isInViewPort = isRowInViewport and (startIndex <= index and index <= endIndex)
          ' ? " Is in viewport "; isInViewPort
          comp = m.viewManager.getRenderer(index, isInViewPort, forceAll)
          ' ? " comp " mc.dv(comp)
          if isInViewPort
            if comp <> invalid
              enterIndexes.push(index)
            end if
            oldRendereredCellInfosByIndex.delete(index.toStr())
          end if
        end for

        exitEventIndexes = []
        for each key in oldRendereredCellInfosByIndex
          cellInfo = oldRendereredCellInfosByIndex[key]
          exitEventIndexes.push(cellInfo.index)
        end for
        ' ? " NVE G"
        ' ? " >>>>>>>>>>>>>>>>>>>>> "
        ' ? "NEW"; formatJson(m.viewManager.rendereredCellInfosByIndex.keys())
        ' ? "OLD"; formatJson(oldRendereredCellInfosByIndex.keys())
        ' ? " >>>>>>>>>>>>>>>>>>>>>"
        m.viewManager.notifyExitEvent(exitEventIndexes)
        m.viewManager.notifyEnterEvent(enterIndexes)
      end if
    end function

    private inViewportComponentsById = {}
    private inViewportSubIndexes = {}

    function notifyListHiddenChange(isHidden as boolean) as void
      m.notifyListViewportEvents(m.viewManager.itemScroller.cellInfo, m.viewManager.itemScroller.nextCellInfo, m.viewManager.itemScroller.direction)
    end function

    function notifyListViewportEvents(CellInfo as ml.CellInfo, nextCellInfo as ml.CellInfo, direction as integer, forceAll = false as boolean) as void
      if nextCellInfo = invalid or m.viewManager.visibleComponents = invalid
        return
      end if
      newInViewportComponentsById = {}
      newInViewportSubIndexes = {}

      if not m.viewManager.owner.isHidden
        if direction = -1
          index = CellInfo.index
        else
          index = nextCellInfo.index
        end if

        numberOfItems = m.viewManager.numberOfItems
        startIndex = mc.clamp(index - m.numberToLookBehind, 0, numberOfItems)
        endIndex = mc.clamp(index + m.numberToLookAhead, 0, numberOfItems)

        if forceAll
          fromIndex = 0
          toIndex = numberOfItems
        else
          fromIndex = startIndex
          toIndex = endIndex
        end if

        ' ? " NVL F "; startIndex ; " TO " ; endIndex " from " fromIndex " to " toIndex
        lastContentIndex = -1
        for i = fromIndex to toIndex - 1
          ' ? " VPN " ; i
          compInfo = m.viewManager.cellInfos[i]
          comp = compInfo.component
          if compInfo.contentIndex <> lastContentIndex
            ' ? " ITS A NEW COMPONENT"
            newInViewportComponentsById[comp.id] = comp
            m.inViewportComponentsById.delete(comp.id)

            if not comp.isInViewPort
              comp.isInViewPort = true
            end if
            ' ? " DID ENTER "; i
            comp.listEvent = {
              name: "didEnter"
              direction: direction
              index: compInfo.componentIndex
              forceCellUpdate: forceAll
            }
            ' end if
            ' subIndexKey = compInfo.componentIndex.toStr()
            subIndexKey = compInfo.index.toStr()
            ' ? ">>> SUB INDEX KEY IS " ; subIndexKey " COMP INFO IDX " compInfo.index "CONT " compInfo.contentIndex "COMP " compInfo.componentIndex
            ' newInViewportSubIndexes[subIndexKey] = comp
            newInViewportSubIndexes[subIndexKey] = compInfo
            m.inViewportSubIndexes.delete(subIndexKey)
          end if
        end for

        for each key in m.inViewportSubIndexes
          compInfo = m.inViewportSubIndexes[key]
          ' ? " SUB INDEX DID EXIT "; key " " compInfo.componentIndex
          compInfo.component.listEvent = {
            name: "didExit"
            direction: 1
            index: compInfo.componentIndex
          }
        end for
      else
        ' ? "list is hidden; not rendering anything!"
        for each key in m.inViewportSubIndexes
          compInfo = m.inViewportSubIndexes[key]
          ' ? " SUB INDEX DID EXIT "; key " " compInfo.componentIndex
          compInfo.component.listEvent = {
            name: "didExit"
            direction: 1
            index: compInfo.componentIndex
          }
        end for
        m.inViewportSubIndexes = {}
      end if

      ' ? " VPN "; m.inViewportComponentsById
      ' ? " VPN NEW "; newInViewportComponentsById
      for each key in m.inViewportComponentsById
        comp = m.inViewportComponentsById[key]
        if comp.isInViewPort
          ' ? " DID EXIT "; key
          comp.isInViewPort = false
          comp.listEvent = {
            name: "didExit"
            direction: 1
            index: -1
          }
        end if
      end for

      m.inViewportComponentsById = newInViewportComponentsById
      m.inViewportSubIndexes = newInViewportSubIndexes
    end function
  end class


end namespace
