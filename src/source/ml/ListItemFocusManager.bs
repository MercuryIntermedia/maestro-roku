import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ComponentInfo.bs"
import "pkg:/source/ml/ListItemScroller.bs"

namespace ml
  class ListItemFocusManager extends mc.BaseClass

    public focusIndicatorManager as mc.types.node

    public viewManager = invalid
    public itemScroller = invalid
    public componentInfo as ml.ComponentInfo
    public nextComponentInfo as ml.ComponentInfo
    public direction = 0
    public didStart = false
    public didFinish = false
    public isNotifying = true

    private moveAnimation
    private delegates

    function new(viewManager as ml.ItemViewManager, ownerDelegate = invalid as object)
      super("ItemFocusManager")
      m.focusIndicatorManager = viewManager.owner.focusIndicatorManager

      m.viewManager = viewManager
      m.delegates = [viewManager.owner]

      if ownerDelegate <> invalid
        m.delegates.push(ownerDelegate)
      else
        m.log.error("There was no delegate passed to this focus manager - events wont be handled")
      end if
      owner = viewManager.owner
      if owner.delegate <> invalid
        m.delegates.push(owner.delegate)
      end if
    end function

    function setItemScroller(itemScroller as ml.ListItemScroller)
      m.itemScroller = itemScroller
      m.moveAnimation = itemScroller.moveAnimation
    end function

    function setComponentInfo(componentInfo as ml.componentInfo, nextComponentInfo as ml.componentInfo, direction as integer) as void
      ' ? "+++++++++++++++++++++++++++++++++++++++++++++++++++++++"
      ' ? "SFP I: "; index ; " NI "; nextIndex ; " D "; direction
      if m.componentInfo <> invalid and m.componentInfo.index = componentInfo.index and m.nextComponentInfo <> invalid and m.nextComponentInfo.index = nextComponentInfo.index and m.direction = direction
        return
      end if
      m.componentInfo = componentInfo
      m.nextComponentInfo = nextComponentInfo
      m.direction = direction
      m.didStart = false
      m.didFinish = false
      m.onFocusUpdate(0)
    end function

    function onFocusAnimationUpdate(fraction as float) as void
      ' ? "ANIM UPDATE "; m.name ; " F " ; fraction

      if m.didStart and not m.didFinish
        m.onFocusUpdate(fraction)
      end if
    end function

    function onFocusUpdate(fraction as float) as void
      if fraction = 1 or fraction = 0
        ' ? "+++ onFocusUpdate(" ; m.name ; ") didStart "; m.didStart ; " isNotifying " ; m.isNotifying ; fraction
        ' ? " OFU I "; m.index ; " NI "; m.nextIndex
      end if
      if not m.isNotifying
        ' ? "NOT NOTIFYING"
        return
      end if
      if not m.didStart
        name = "willLoseFocus"
        nextName = "willGainFocus"
        m.didStart = true
        m.setOwnerNextFocusIndex()
        ' ? " + sending WILL lose " ; m.index ; " / WILL gain" ; m.nextIndex
      else if fraction = 0
        return
      else if fraction = 1
        if m.didFinish or not m.didStart
          return
        end if
        ' ? " DID FINISH "; m.nextIndex
        m.didFinish = true
        name = "didLoseFocus"
        nextName = "didGainFocus"
        ' ? " + sending DID lose " ; m.index ; " / DID gain" ; m.nextIndex
        m.setOwnerIndexes()
      else
        name = "losingFocus"
        nextName = "gainingFocus"
      end if

      m.focusIndicatorManager.focusedRowPercent = fraction

      m.sendEvents(name, nextName, fraction)
    end function

    function sendEvents(name as string, nextName as string, fraction as float)
      event = {
        direction: m.direction
        fraction: fraction
        name: name
        index: m.componentInfo.component
      }
      nextEvent = {
        direction: m.direction
        fraction: fraction
        name: nextName
        index: m.nextComponentInfo.contentIndex
      }
      isSendingFromEvent = m.nextComponentInfo.contentIndex <> m.componentInfo.contentIndex
      event.rowIndex = -1
      nextEvent.rowIndex = -1

      'let components know, so they can react
      if isSendingFromEvent
        m.componentInfo.component.listEvent = event
      end if

      m.nextComponentInfo.component.listEvent = nextEvent

      for each delegate in m.delegates
        if isSendingFromEvent
          delegate.listEvent = event
        end if
        delegate.listEvent = nextEvent
      end for
    end function

    function setOwnerNextFocusIndex()
      if m.nextComponentInfo <> invalid
        index = [m.nextComponentInfo.contentIndex, m.nextComponentInfo.component.focusedCellIndex]
        m.focusIndicatorManager@.setNextFocusIndex(index, m.direction)
      end if
    end function

    function setOwnerIndexes()
      m.focusIndicatorManager.focusedRowIndex = m.nextComponentInfo.contentIndex
      if m.nextComponentInfo <> invalid
        m.focusIndicatorManager.focusedCellIndex = m.nextComponentInfo.component.focusedCellIndex
      end if
    end function

  end class
end namespace