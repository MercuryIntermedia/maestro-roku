import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"

#const use_debug_hacks = false

namespace ml

  class ItemScroller extends mc.BaseClass

    public rects = []
    public items = []
    public components = []
    public viewManager
    public focusManager ' this MUST be set before doing anything
    public moveAnimation
    public isMovingMultiple = false

    'rendered component maps
    public RCMap = {}
    public lastRCMap = {}
    public nextRCMap = {}
    public index = 0
    public subIndex = -1
    public maxSubIndex = -1
    public focusedItem as mc.types.node
    public indexPosition = 0
    public focusedIndex = 0
    public nextIndex = 0
    public nextPosition = 0
    public targetIndex = 0
    public scrollStartIndex = 0
    public container as mc.types.node
    public direction = 0
    public axes = 0 'x = 0, y =1
    public screenPos = 0
    public isFloatingFocus = false
    public isWrapped = false
    public delegates = []

    private animSpeed = 0
    private settings
    private activeOffset = 0
    private nextActiveOffset = 0
    private isScrollCancelled = false

    'flow focus state
    private flowFocusIndex = -1

    'used for debugging
    protected isList = false

    function new(viewManager as ml.ItemViewManager, axes as mc.types.array)
      super("ItemScroller")
      m.viewManager = viewManager
      viewManager.itemScroller = m
      m.container = m.viewManager.container
      m.axes = axes
      m.moveAnimation = new mv.animations.Move(m.container, 1, m.container.translation, m.container.translation)
      m.moveAnimation.observeFraction(m.onAnimationFractionChange, m)
    end function

    public function onViewManagerUpdate()
      m.components = m.viewManager.visibleComponents ' content items

      m.delegates = []

      if m.viewManager.delegate <> invalid
        m.delegates.push(m.viewManager.delegate)
      end if
      m.settings = m.getFocusSettings()
    end function

    function getFocusSettings()
      if m.viewManager.content <> invalid
        return m.viewManager.content.focusSettings
      else
        return ml.listMixin.createFocusSettings()
      end if
    end function

    public function reset(keepOldFocusIfPossible = false as boolean)
      if keepOldFocusIfPossible
        index = m.index
      else
        index = 0
      end if

      m.onViewManagerUpdate()
      if keepOldFocusIfPossible
        m.setFocusIndex(index, false, true)
        m.moveToIndex(index, false, false, 0)
        m.focusManager.onFocusAnimationUpdate(1)
      else
        m.setFocusIndex(0, false, true)
        m.moveToIndex(0, false, false, 0)
        m.focusManager.onFocusAnimationUpdate(1)
      end if
      if index = invalid or index = -1
        index = 0
      end if
      'TODO need to actually set the focus properly
      m.forceFocusOnIndex(index)
    end function

    public function cancelScrolling()
      'this will force the scrolling to stop repeating if we move to another row
      if m.viewManager.isScrolling
        m.finishAnimating()
        m.toggleScrolling(false)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ collection movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function moveToEnd(direction as integer, screenPos = invalid as integer, animated = true as boolean, fast = false as boolean) as boolean
      if (m.index >= m.viewManager.numberOfItems - 1 and direction = 1) or m.index = 0 and direction = -1
        m.log.info("already at end - ignoring")
        return false
      end if

      if direction = -1
        index = 0
      else
        index = m.viewManager.numberOfItems - 1
      end if
      ? "+++MVE TO END" ; m.__classname
      row = m.viewManager.visibleComponents[m.index]
      if row <> invalid and row.isMultiRow and row@.canMoveRowUpDown(direction)
        ? "Starting with a multi row move"
        subIndex = row@.getRowIndex() + direction
        m.moveToSubIndex(index, subIndex, animated, fast)
      else
        ? "Starting with a regular move"
        m.moveToIndex(index, animated, fast)
      end if
      return true
    end function

    function moveFromPress(offset as integer, forceSequential = true as boolean) as boolean
      'WIP this is the simple mechanism, for reference
      ' row = m.viewManager.visibleComponents[m.index]
      ' if row <> invalid and row.isMultiRow
      '   ? "INSIDE MULTI ROW"
      '   if offset > 0
      '     direction = 1
      '   else
      '     direction = -1
      '   end if

      '   if row@.canMoveRowUpDown(direction)
      '     ? "Doing a multi row move press"
      '     return row@.moveRowFromPress(direction)
      '   end if
      ' end if

      index = m.index + offset

      if offset > 0 and m.index = m.viewManager.numberOfItems - 1
        m.log.info("already at end")
        return false
      else if index < 0
        m.log.info("already at start")
        return false
      end if

      return m.move(offset, true, true, forceSequential)
    end function

    function move(offset as integer, animated = true as boolean, fast = false as boolean, forceSequential = true as boolean) as boolean

      subIndex = -1

      'first check if we are inside a grid
      row = m.viewManager.visibleComponents[m.index]

      if row <> invalid and row.isMultiRow
        ? "INSIDE MULTI ROW"
        if offset > 0
          direction = 1
        else
          direction = -1
        end if

        if row@.canMoveRowUpDown(direction)
          ? "Doing a multi row move here"
          subIndex = row@.getRowIndex() + direction
          return m.moveToSubIndex(m.index + offset, subIndex, animated, fast, direction, forceSequential)
        end if
      end if

      index = m.index + offset
      ? "+++MOVE TO " ; index

      if offset > 0
        ? "+++MOVE AAAA"
        if m.index = m.viewManager.numberOfItems - 1
          m.log.info("already at end")
          ? "+++MOVE BBBB"
          return false
        end if
        direction = 1
      else
        ? "+++MOVE CCCC"
        if index = -1
          m.log.info("already at start")
          ? "+++MOVE DDDD"
          return false
        end if
        ? "+++MOVE EEEE"
        direction = -1
      end if

      if m.direction = direction and abs(offset) = 1 and m.viewManager.isScrolling
        ? "+++MOVE FFFF"
        'TODO - we might want to detect this at the list, and have a cache of next move there
        m.log.info("was already scrolling - ignoring", m.viewManager.isScrolling)
        return false
      end if

      ? "+++MOVE GGGG"
      index = m.getValidTargetIndex(index, direction)

      m.log.info(`move I ${m.index} o ${offset}, i ${index}, animated ${animated}, fast ${fast}`)

      if index <> -1
        ? "+++MOVE HHHH"
        m.moveToIndex(index, animated, fast, direction, forceSequential)
      end if

      return true
    end function

    function getValidTargetIndex(index as integer, direction as integer)
      if index < 0
        index = 0
      end if

      if index >= m.viewManager.numberOfItems - 1
        index = m.viewManager.numberOfItems - 1
      end if

      matchedIndex = -1
      'TODO - check if the item is focusable..
      while true
        item = m.viewManager.visibleItems[index]
        if item = invalid
          exit while
        end if
        if item.isFocusEnabled = invalid or item.isFocusEnabled = true
          matchedIndex = index
          exit while
        end if
        index += direction
      end while

      return matchedIndex
    end function

    function moveToIndex(index as integer, animated = true as boolean, fast = false as boolean, direction = invalid as integer, forceSequential = true as boolean) as boolean

      m.log.info("moveToIndex I", m.index, "NI", index, animated)

      if direction = invalid
        direction = 0
        if index < m.index
          direction = -1
        else
          direction = 1
        end if
      end if
      ? "REGULAR MOVE TO INDEX: I"; " "; m.index; " "; "NI"; index ; m.__classname ; " DIR "; direction
      '////////////////////////////////////////////////////////////////////////
      ' 1. get the ideal screen position for the item
      '////////////////////////////////////////////////////////////////////////
      itemRect = m.viewManager.rects[index]
      if itemRect <> invalid and itemRect.screenPos <> invalid
        screenPos = itemRect.screenPos
        ' ? "MTI: USE RECT SCREEN POS "; screenPos
      else
        screenPos = m.viewManager.owner.focusScreenPosition[m.axes]
        if screenPos < 0
          screenPos = 0
        end if
        ' ? "MTI: USE CURRENT screen POS "; screenPos
      end if

      nextFlowPosition = invalid
      nextIndex = m.index + direction
      m.isMovingMultiple = abs(index - m.index) > 1

      m.screenPos = m.viewManager.getScreenPositionForItem(itemRect, m.direction, not m.isFloatingFocus, screenPos)

      '////////////////////////////////////////////////////////////////////////
      ' 2. ascertain if the next item is on screen, and can be flow animated to
      '////////////////////////////////////////////////////////////////////////
      if m.isFloatingFocus
        ' ? "FLOATING!! " ; forceSequential
        if forceSequential
          ' ? "A1 " ; nextIndex ; " " ; direction
          nextFlowPosition = m.viewManager.getFlowScreenPosition(nextIndex, direction)
        else
          ' ? "A2 " ; index ; " " ; direction
          nextFlowPosition = m.viewManager.getFlowScreenPosition(index, direction)
        end if
        ' ? "NFP: "; nextFlowPosition
      end if

      m.direction = direction
      targetTranslation = [0, 0]

      if nextFlowPosition = invalid
        '////////////////////////////////////////////////////////////////////////
        ' 2.b - no flow position - where does the view have to animate to?
        '////////////////////////////////////////////////////////////////////////
        ' ? "***NO FLOW POS"
        targetTranslation = m.viewManager.getTargetTranslation(index, direction, screenPos)

        if targetTranslation = invalid
          m.log.error("cannot move! translation invalid for index", index)
          return false
        end if
        isMoveRequired = targetTranslation[m.axes] <> m.container.translation[m.axes]
      else
        ' ? "***FLOW POS"
        isMoveRequired = false
      end if

      ? "SET TARGET INDEX MOVE TO INDEX"
      m.setTargetIndex(index)
      m.scrollStartIndex = m.index

      ' ? "CCC " ; isMoveRequired ; " SP " ; screenPos
      ' ? "DDD " ; nextFlowPosition
      m.log.info("moving", m.container.translation[m.axes], " > ", targetTranslation[m.axes], " pixels. animated? ", animated)
      ' m.viewManager.owner@.cancelFlowFocus()

      if animated
        '////////////////////////////////////////////////////////////////////////
        ' 3. do an animated move
        '////////////////////////////////////////////////////////////////////////

        if forceSequential
          m.setNextIndex(m.index + m.direction)
        else
          m.setNextIndex(index)
        end if

        if fast
          m.animSpeed = m.settings.fastAnimSpeed
        else
          m.animSpeed = m.settings.animSpeed
        end if
        if not isMoveRequired
          '////////////////////////////////////////////////////////////////////////
          ' 3.a it's a flow animation
          '////////////////////////////////////////////////////////////////////////
          m.log.info("already in place - no need to scroll ", m.index, " >", m.nextIndex)
          m.moveUsingFlowAnim(m.index, m.nextIndex, m.direction)
          return true
        end if

        '////////////////////////////////////////////////////////////////////////
        ' 3.b it's a regular container animation
        '////////////////////////////////////////////////////////////////////////

        ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex"
        m.toggleScrolling(true)
        ' ? ":0000"
        m.setFocusIndex(m.index, true)
        m.viewManager.updateRenderedComponents(m.direction, m.index)
        ' ? "speed"; m.animSpeed ; " target Trans "; targetTranslation ; " m.moveAnimation.fraction "; m.moveAnimation.interpolator.fraction
        m.moveAnimation.animateToWithSpeed(targetTranslation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' 4. non-animated move
        '////////////////////////////////////////////////////////////////////////

        'TODO - deal with case where the item @ index is MultiRow
        m.setNextIndex(index)
        if nextFlowPosition = invalid
          m.container.translation = targetTranslation
        end if
        'TODO -check if jump is bigger than a certain amount
        ' m.viewManager.updateRenderedComponents(m.direction, m.index)
        ' m.setNextIndex(index)
        m.viewManager.updateRenderedComponents(m.direction, index)
        ' m.setFocusIndex(index, false)
        m.forceFocusOnIndex(index)
      end if

      return true
    end function

    'variant of moveToIndex, which is used inside a multirow in a scrollable position
    function moveToSubIndex(index as integer, subIndex as integer, animated = true as boolean, fast = false as boolean, direction = invalid as integer, forceSequential = true as boolean) as boolean

      if direction = invalid
        direction = 0
        if index < m.index
          direction = -1
        else
          direction = 1
        end if
      end if

      'get row at current index
      row = m.viewManager.visibleComponents[m.index]

      '////////////////////////////////////////////////////////////////////////
      ' 1. get the ideal screen position for the item
      '////////////////////////////////////////////////////////////////////////

      ? "SUB INDEX MOVE TO INDEX: I"; " "; m.index; " "; "NI:"; index ; " " ; m.__classname
      'viewManager here must be the gridRow

      currentSubIndex = row@.getRowIndex()
      itemRect = row@.getRect(subIndex)
      ' itemRect = m.viewManager.rects[index]
      if itemRect <> invalid and itemRect.screenPos <> invalid
        screenPos = itemRect.screenPos
        ' ? "MTI: USE RECT SCREEN POS "; screenPos
      else
        screenPos = m.viewManager.owner.focusScreenPosition[m.axes]
        if screenPos < 0
          screenPos = 0
        end if
        ' ? "MTI: USE CURRENT screen POS "; screenPos
      end if

      nextFlowPosition = invalid
      nextIndex = currentSubIndex + direction
      m.isMovingMultiple = abs(subIndex - currentSubIndex) > 1 or abs(index - m.index) > 1

      m.screenPos = row@.getScreenPositionForItem(itemRect, m.direction, not m.isFloatingFocus, screenPos)
      ' m.screenPos = m.viewManager.getScreenPositionForItem(itemRect, m.direction, not m.isFloatingFocus, screenPos)

      '////////////////////////////////////////////////////////////////////////
      ' 2. ascertain if the next item is on screen, and can be flow animated to
      '////////////////////////////////////////////////////////////////////////
      ? "22222222222"
      'TODO - we should probably check if the row suppports floating focus or not
      if true or m.isFloatingFocus
        ' ? "FLOATING!! " ; forceSequential
        if forceSequential
          ' ? "A1 " ; nextIndex ; " " ; direction
          nextFlowPosition = row@.getFlowScreenPosition(nextIndex, direction)
        else
          ' ? "A2 " ; index ; " " ; direction
          nextFlowPosition = row@.getFlowScreenPosition(index, direction)
        end if
        ' ? "NFP: "; nextFlowPosition
      end if

      m.direction = direction
      targetTranslation = [0, 0]

      if nextFlowPosition = invalid
        '////////////////////////////////////////////////////////////////////////
        ' 2.b - no flow position - where does the view have to animate to?
        '////////////////////////////////////////////////////////////////////////
        ? "2.b - no flow pos"
        'TODO - this should be an offset returned rom the row
        targetTranslation = m.viewManager.getTargetTranslation(index, direction, screenPos)

        if targetTranslation = invalid
          m.log.error("cannot move! translation invalid for index", index)
          return false
        end if
        isMoveRequired = targetTranslation[m.axes] <> m.container.translation[m.axes]
      else
        ? "2.b has flow pos"
        isMoveRequired = false
      end if

      ' m.viewManager.owner@.cancelFlowFocus()

      ? "SET TARGET INDEX FROM SUBINDEX"
      m.setTargetIndex(index)
      m.scrollStartIndex = m.index

      ' ? "CCC " ; isMoveRequired ; " SP " ; screenPos
      ' ? "DDD " ; nextFlowPosition
      m.log.info("moving", m.container.translation[m.axes], " > ", targetTranslation[m.axes], " pixels. animated? ", animated)
      if animated
        '////////////////////////////////////////////////////////////////////////
        ' 3. do an animated move
        '////////////////////////////////////////////////////////////////////////

        'we dont' need to set the next index here, because that's for whole row level's not sub-rows
        'TODO - setNextIndex might become setNextSubIndex
        if forceSequential
          m.setNextIndex(m.index + m.direction)
        else
          m.setNextIndex(index)
        end if

        if fast
          m.animSpeed = m.settings.fastAnimSpeed
        else
          m.animSpeed = m.settings.animSpeed
        end if

        if not isMoveRequired
          '////////////////////////////////////////////////////////////////////////
          ' 3.a it's a flow animation
          '////////////////////////////////////////////////////////////////////////

          ? "3.a flow sub-index animation"
          m.log.info("already in place - no need to scroll ", m.index, ",", currentSubIndex, " >", m.nextIndex)
          if m.direction = -1
            return row@.moveRowUp()
          else
            return row@.moveRowDown()
          end if
        end if

        '////////////////////////////////////////////////////////////////////////
        ' 3.b it's a regular container animation
        '////////////////////////////////////////////////////////////////////////
        ? "3.b regular container anim"
        ? ">>>> START ANIM ; regular container anim - move to subindex"
        m.toggleScrolling(true)
        ' ? ":0000"
        'THIS SHOULD BE CALLED ON THE ROW
        row@.setFocusIndex(m.index, true)
        'THIS IS PROBABLY - set SUB FOCUS INDEX...
        m.viewManager.updateRenderedComponents(m.direction, m.index)
        ' ? "speed"; m.animSpeed ; " target Trans "; targetTranslation ; " m.moveAnimation.fraction "; m.moveAnimation.interpolator.fraction
        m.moveAnimation.animateToWithSpeed(targetTranslation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' 4. non-animated move
        '////////////////////////////////////////////////////////////////////////
        ? "4. non-animated "

        'TODO - deal with case of subIndex
        m.setNextIndex(index)
        if nextFlowPosition = invalid
          m.container.translation = targetTranslation
        end if
        'TODO -check if jump is bigger than a certain amount
        ' m.viewManager.updateRenderedComponents(m.direction, m.index)
        ' m.setNextIndex(index)
        m.viewManager.updateRenderedComponents(m.direction, index)
        ' m.setFocusIndex(index, false)
        m.forceFocusOnIndex(index)
      end if

      return true
    end function

    protected function moveUsingFlowAnim(index as integer, nextIndex as integer, direction as integer)
      m.toggleScrolling(true)
      m.focusManager.setFocusPosition(index, 0, nextIndex, 0, direction)
      m.flowFocusIndex = nextIndex
      fromItem = m.viewManager.getRenderer(index)
      fromSubIndex = fromItem.focusedCellIndex
      toItem = m.viewManager.getRenderer(nextIndex)

      'we want to ask the row - "what is your index, coming from this direction?"
      toSubIndex = toItem.focusedCellIndex
      m.viewManager.owner@.startFlowFocus([index, fromSubIndex], [nextIndex, toSubIndex], m.animSpeed, mc.getTop())
    end function

    function onFlowFocusFraction(fraction as float)
      ' ? "on FLow fraction"; fraction ; m.__classname
      ' m.log.info("onAnimationFractionChange", fraction, "multiple", m.isMovingMultiple, "targetIndex", m.targetIndex, "FF index", m.flowFocusIndex)

      if fraction = 1
        ? "FINISHED FLOW " ; m.__classname ; " multiple: " ; m.isMovingMultiple ; " TI " ; m.targetIndex
        m.focusManager.onFocusAnimationUpdate(1)
        m.setIndex(m.flowFocusIndex)
        if m.isMovingMultiple and m.targetIndex <> m.index
          m.log.info("was moving multiple, will keep moving")
          ? "moving multiple to "; m.targetIndex
          m.setFocusOnRenderer(false)
          if m.isScrollCancelled or m.targetIndex = -1
            m.log.info("but scrolling was cancelled or finished!")
            ? "stopping animating"
            m.stopAnimating()
          else
            m.continueScrolling()
          end if
        else
          m.log.info("finished focusing action with this flow")
          ? "RESET TARGET INDEX onFlowFocusFraction finished"
          m.setTargetIndex(-1)
          m.setFocusOnRenderer(true)
          m.toggleScrolling(false)
        end if
      else
        m.focusManager.onFocusAnimationUpdate(fraction)
      end if

    end function

    ' function finishAnimating() as void
    '   m.isScrollCancelled = true
    '   'ensure that we will stop
    '   ' m.setTargetIndex( m.nextIndex)
    ' end function


    function finishAnimating() as void
      m.finishMovingToIndex()
    end function

    function finishMovingToIndex(screenPos = invalid as integer) as boolean
      index = m.nextIndex
      itemRect = m.viewManager.rects[index]
      ? "isMovingMultiple false - finishMovingToIndex"
      m.isMovingMultiple = false

      if itemRect = invalid
        return false
      end if

      if screenPos = invalid and itemRect <> invalid
        screenPos = itemRect.screenPos
        ' screenPos = m.screenPos
      end if

      ' m.viewManager.owner@.cancelFlowFocus()

      targetTranslation = m.viewManager.getTargetTranslation(index, m.direction, screenPos)

      if targetTranslation = invalid
        m.log.error("cannot move! translation invalid for index", index)
        return false
      end if

      ' ? ">> AFC " ; fraction ; " pos " ; position ; " AO " ; m.activeOffset ; " i " ; index ; " t " ; m.targetIndex ; " MI "; m.index
      ' row = m.viewManager.visibleComponents[m.nextIndex - m.direction]
      row = m.viewManager.visibleComponents[m.index]
      ' ? ">>>>>>>>>>>>>>>>>>>"
      ' ? "FINISHED SI "; m.subIndex ; " I " ; m.index ; " i " ; index
      ' ? ">>>>>>>>>>>>>>>>>>>"
      if m.subIndex <> -1 and row.isMultiRow and row@.canMoveRowUpDown(m.direction)
        ? "finished in grid that can scroll in the current direction - let's finish up"
        m.setTargetIndex(index)
        m.focusedIndex = index
        m.toggleScrolling(false)
        return false
      end if

      m.screenPos = m.viewManager.getScreenPositionForItem(itemRect, m.direction, not m.isFloatingFocus, screenPos)
      ' ? "SET TARGET INDEX FROM FINISH MOVING TO INDEX"
      m.setTargetIndex(index)

      'TODO - take into account floating focus
      isMoveRequired = targetTranslation[m.axes] <> m.container.translation[m.axes]
      'can only be animated
      m.animSpeed = m.settings.animSpeed
      if not isMoveRequired
        if m.focusedIndex = index
          m.log.info("already in place")
          return false
        end if
        m.log.info("already in place - no need to scroll ", index, " >", m.nextIndex)
        m.moveUsingFlowAnim(index, m.nextIndex, m.direction)
        return true
      end if

      ' ? ">>>> START ANIM ; already scrolling - finish moving to index"
      'we are already scrolling
      m.moveAnimation.animateToWithSpeed(targetTranslation, m.animSpeed)
      m.moveAnimation.start()
      return true
    end function

    function setNextIndex(index as integer) as void
      if index >= m.viewManager.numberOfItems
        m.log.info("cannot set index to ", index, "beyond number of vis items")
        return
      end if

      if m.nextIndex = index
        return
      end if

      m.log.info("+++setNextIndex", index)
      if index < 0
        index = 0
      end if
      m.nextIndex = index
      #if use_debug_hacks
        mioc.setInstance("_nextIndex", m.nextIndex)
      #end if
      m.viewManager.updateScrolling(index)

      nextRect = m.viewManager.rects[m.nextIndex]
      screenPos = m.viewManager.getScreenPositionForItem(nextRect, m.direction, not m.isFloatingFocus, m.screenPos)
      ' ? " NEXT INDEX " ; index ; " SP " ; m.screenPos ; " nao " ; screenPos
      m.nextActiveOffset = screenPos
      nextTranslation = m.viewManager.getTargetTranslation(index, m.direction, screenPos)

      if nextTranslation <> invalid
        m.nextPosition = nextTranslation[m.axes]
      else
        ' ? "COULD NOT GET NEXT POSITION - USING INDEX POS"
        m.nextPosition = m.indexPosition
      end if
    end function

    function stopAnimating()
      ' ? "+++++++++++++++++++++"
      ' ? "STOP ANIMAGING"
      m.moveAnimation.stop(false)
      ' m.moveAnimation.pause()
      m.toggleScrolling(false)
    end function

    function toggleScrolling(active as boolean)
      m.setTargetIndex(-1)
      m.viewManager.setIsScrolling(active, m.isMovingMultiple, m.index)
      if not active
        m.isMovingMultiple = false
      end if
      m.isScrollCancelled = not active
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ animation callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onAnimationFractionChange(fraction as float) as void
      ' m.log.info("onAnimationFractionChange", fraction, "multiple", m.isMovingMultiple)

      if m.direction = -1 and m.subIndex = -1
        position = m.container.translation[m.axes] - m.nextActiveOffset
      else
        position = m.container.translation[m.axes] - m.activeOffset
      end if

      index = m.viewManager.getIndexAtPosition(position, m.direction)
      row = m.viewManager.visibleComponents[index]
      ' ? ">> AFC " ; fraction ; " pos " ; position ; " AO " ; m.activeOffset ; " i " ; index ; " t " ; m.targetIndex ; " MI "; m.index

      if row <> invalid and row.isMultiRow = true
        subIndex = row@.getSubIndexAtPosition(position, m.direction)
        if subIndex <> invalid and subIndex <> m.subIndex
          ? "SUB INDEX CHANGED " ; m.subIndex ; " -> "; subIndex
          m.subIndex = subIndex
        end if
      else
        m.subIndex = -1
      end if

      if fraction = 1
        m.focusManager.onFocusAnimationUpdate(1)

        if index <> m.index
          m.setFocusIndex(index, false, false)
        end if
        if m.isMovingMultiple and m.targetIndex <> m.index
          ? "continue scrolling - ON ANIM FRACTION CHANGE"
          m.continueScrolling()
        else
          ? "RESET TARGET INDEX onAnimationFractionChange 1"
          ' m.setTargetIndex(-1)
          m.toggleScrolling(false)
        end if
      else if m.isMovingMultiple
        ' ? " D " ; m.direction ; " m.I " ; m.index ; " I "; index ; " DIFF " ; abs(m.index - index)

        if (m.direction = -1 and (index >= m.index)) or (m.direction = 1 and (index < m.index))
          ' ? " skipping focus calc error"
          return
        end if

        if m.subIndex <> -1
          'TODO - get the position of the container for
        else
          actualPos = m.container.translation[m.axes]
          fraction = m.focusManager.onContainerPositionChange(actualPos)
          ' ? "++ start "; m.scrollStartIndex ; " I " ; m.index ; " posI " ; index
          'going backward requires us to increase the index, as we're always one off
          if m.direction = -1
            index += 1
          end if
          if index <> m.index and index <> m.targetIndex
            ' ? " CHANGE INDEX " ; index
            if m.scrollStartIndex <> m.index 'this stops a premature call to didFinishScrolling
              m.focusManager.onFocusAnimationUpdate(1)
            end if

            m.setFocusIndex(index, true)
          end if
        end if
      else
        m.focusManager.onFocusAnimationUpdate(fraction)
      end if

    end function

    function continueScrolling() as void
      ? "Continuing previous scrolling to index "; m.targetIndex ; " DIR " ; m.direction
      if m.targetIndex = -1
        ? "ILLEGAL - aborting"
        return
      end if
      ' m.move(m.direction)
      row = m.viewManager.visibleComponents[m.index]
      if row <> invalid and row.isMultiRow and row@.canMoveRowUpDown(m.direction)
        ? "continuing multi row move"
        subIndex = row@.getRowIndex() + m.direction
        m.moveToSubIndex(m.targetIndex, subIndex, true)
      else
        ? "continuing regular move"
        m.moveToIndex(m.targetIndex, true, true)
      end if
    end function

    ' /**
    '  * @member setFocusIndex
    '  * @memberof module:ItemScroller
    '  * @instance
    '  * @function
    '  * @description Responsible for all state updates, and hooks pertaning to focus position.
    '  *       NOTE : does NOT update position - you should be in position when calling this. for efficiency does not recalculate index: you should know the index when you call me!
    '  * @param {integer} index - the index you KNOW you are on when your move is finished (finished could mean from one index to nextindex, while animating; doesn't have to be targetIndex)
    '  * @param {boolean} isMoving - if true, then deltas are calculated for next position, and observers fired if their screen status will change
    '  */
    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean) as void
      'This MUST be called infrequently
      ' TODO - check if index is actually changed
      ' ? "~~~SFI "; index ; " moving "; isMoving ; " sp "; screenPos ; " d "; m.direction
      if index = -1
        m.setIndex(0)
        m.activeOffset = m.nextActiveOffset
        m.setNextIndex(0)
      else
        if index >= m.viewManager.numberOfItems - 1
          index = m.viewManager.numberOfItems - 1
        end if

        m.setIndex(index)
        m.activeOffset = m.nextActiveOffset
        m.setNextIndex(m.index + m.direction)
      end if

      m.focusedItem = m.viewManager.visibleItems[index]

      #if use_debug_hacks
        mioc.setInstance("_index", m.index)
        mioc.setInstance("_nextIndex", m.nextIndex)
      #end if

      'TODO -note - we need to know what screenPos WAS in a floating scenario!!
      m.indexPosition = m.viewManager.getTargetTranslation(m.index, m.direction, m.screenPos)[m.axes]

      m.viewManager.updateRenderedComponents(m.direction, m.index)

      m.notifyViewportEvents(true)

      if notifyFocusManager
        m.focusManager.setFocusPosition(m.index, m.indexPosition, m.nextIndex, m.nextPosition, m.direction)
      end if
      if isMoving
        m.setFocusOnRenderer(true, m.nextIndex)
      else
        m.setFocusOnRenderer(false)
      end if
    end function

    function forceFocusOnIndex(index as integer, notifyFocusManager = true as boolean) as void
      index = mc.clamp(index, 0, m.viewManager.numberOfItems)
      m.setIndex(index)
      m.activeOffset = m.nextActiveOffset
      m.setNextIndex(index)

      m.indexPosition = m.viewManager.getTargetTranslation(m.index, m.direction, m.screenPos)[m.axes]

      ' m.viewManager.updateRenderedComponents(m.direction, m.index)
      ' m.notifyViewportEvents(true)

      if notifyFocusManager
        m.focusManager.setFocusPosition(m.index, m.indexPosition, m.nextIndex, m.nextPosition, m.direction)
      end if
      m.focusManager.onFocusAnimationUpdate(1)

      'TODO - for cells, do we want to trigger focus events?
      if m.isList
        m.setFocusOnRenderer(false, m.index)
      end if
    end function

    function setFocusOnRenderer(isMoving as boolean, index = invalid as integer)
    end function

    function notifyViewportEvents(isMoving as boolean)
      'maintain a collection of controls that are in bounds right now:
      m.RCMap = m.viewManager.getComponentsInViewPort(- m.container.translation[m.axes])

      if isMoving and m.nextIndex <> m.index
        nextTranslation = m.viewManager.getTargetTranslation(m.nextIndex, m.direction, m.screenPos)
        m.nextRCMap = m.viewManager.getComponentsInViewPort(- nextTranslation[m.axes])
      else
        m.nextRCMap = {}
      end if

      'we assign events to each component AND send them to the owner, so it can choose what to do
      events = []

      '1. component was on screen and is going off
      'or component was not on screen and will come on.
      for each comp in m.viewManager.renderedComponents
        if comp <> invalid
          id = comp.id
          if m.nextRCMap[id] = true and comp.isInViewport <> true
            m.setCompViewPortStatus(comp, "willEnter", "none", events)
          else if m.nextRCMap[id] = false and comp.isInViewport = true
            m.setCompViewPortStatus(comp, "willExit", "didEnter", events)
          end if
        end if
      end for

      for each comp in m.viewManager.visibleComponents
        ' for each comp in m.viewManager.renderedComponents
        if comp <> invalid
          id = comp.id

          ' m.log.info(" id", id, " is in vp", comp.isInViewPort, "RCMap", m.RCMap[id], "vs", comp._vs)
          if m.RCMap[id] = true and comp.isInViewport <> true
            'ensure clients always get willEnter before didEnter
            m.setCompViewPortStatus(comp, "willEnter", "none", events)
            m.setCompViewPortStatus(comp, "didEnter", "willEnter", events)
            comp.isInViewport = true
            ' comp.visible = true
          else if m.RCMap[id] <> true and comp.isInViewPort = true

            'ensure clients always get willExit before didExit
            m.setCompViewPortStatus(comp, "willExit", "didEnter", events)
            m.setCompViewPortStatus(comp, "didExit", "willExit", events)
            comp.isInViewport = false
            ' comp.visible = false
          end if
        end if
      end for

      ' m.log.info("events")
      ' for each event in events
      '   m.log.info("event", event)
      ' end for
      m.lastRCMap = m.RCMap
      for each delegate in m.delegates
        delegate.viewportEvents = events
      end for
    end function

    function setCompViewPortStatus(comp as mc.types.node, eventName as string, validState as string, events as mc.types.array)
      if not comp.doesExist("_vs")
        comp.addFields({ _vs: "none" })
      end if

      if comp._vs = validState
        comp._vs = eventName
        event = { name: eventName, direction: m.direction, index: comp.index }
        comp.listEvent = event
        events.push(event)
      end if
    end function

    protected function setIndex(index as integer)
      m.index = index
    end function
    protected function setTargetIndex(index as integer)
      ? "setting targetIndex to "; index ; " "; m.__classname

      m.targetIndex = index
    end function
  end class
end namespace