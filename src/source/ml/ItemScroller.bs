import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/ComponentInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"

namespace ml
  class ItemScroller extends mc.BaseClass

    public focusIndicatorManager as mc.types.node
    public container as mc.types.node

    public viewManager
    public focusManager ' this MUST be set before doing anything
    public viewPortEventNotifier
    private settings

    public isMovingMultiple = false

    public isFinishingMove = false
    public isDoingFlowFocus = false

    'ComponentInfo tracking
    public componentInfos = []
    public numberOfComponents = 0

    public componentInfo as ml.ComponentInfo
    public nextComponentInfo as ml.ComponentInfo
    public nextFocusIndicatorConfig as ml.FocusIndicatorConfig
    public targetComponentInfo as ml.ComponentInfo

    public focusedItem as mc.types.node

    public index = 0
    public nextIndex = 0

    public focusedIndex = 0
    public nextPosition = 0
    public targetIndex = 0
    public scrollStartIndex = 0
    public direction = 0
    public axes = 0 'x = 0, y =1
    public screenPos = 0

    public isFloatingFocus = false

    public moveAnimation
    private animSpeed = 0

    private activeScrollLocation = 0
    private nextScrollLocation = 0

    private flowFocusInfo as ml.ComponentInfo

    function new(name as string, viewManager as ml.ItemViewManager, focusManager as ml.ItemFocusManager)
      super(name)
      m.viewManager = viewManager
      viewManager.itemScroller = m

      m.focusIndicatorManager = viewManager.owner.focusIndicatorManager
      m.container = m.viewManager.container

      m.axes = m.viewManager.axes
      m.viewPortEventNotifier = new ml.ViewPortEventNotifier(viewManager)
      m.moveAnimation = new mv.animations.Move(m.container, 1, m.container.translation, m.container.translation)
      m.moveAnimation.observeFraction(m.onAnimationFractionChange, m)

      focusManager.setItemScroller(m)
      m.focusManager = focusManager
    end function

    public function onViewManagerUpdate()
      if m.viewManager.settings <> invalid
        m.settings = m.viewManager.settings.focusSettings
      else
        m.settings = invalid
      end if
      m.viewPortEventNotifier.onViewManagerUpdate()
      m.getComponentInfos()
    end function

    public function reset(keepOldFocusIfPossible = false as boolean) as void

      if keepOldFocusIfPossible
        index = m.index
      else
        index = 0
      end if

      m.onViewManagerUpdate()

      'FIXME - fix recovering focus
      if keepOldFocusIfPossible
        if index >= m.numberOfComponents
          'move to next item
          index = m.numberOfComponents - 1
        end if
      end if

      notify = m.index <> index
      ' notify = true
      m.setFocusIndex(index, false, true)
      m.moveToIndex(index, false, true, 0)
      m.focusManager.onFocusAnimationUpdate(1)
      if index = invalid or index = -1
        index = 0
      end if

      'TODO need to actually set the focus properly
      m.forceFocusOnIndex(index, notify)
    end function

    public function cancelScrolling()
      ? ">>> CANCEL SCROLLING  " ; m.viewManager.isScrolling
      'Tidy up the scrolling in here
      if m.viewManager.isScrolling
        ? "FINISH ANIM"
        m.finishAnimating()
        m.toggleScrolling(false)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getComponentInfos()
      m.componentInfos = m.viewManager.cellInfos
      m.numberOfComponents = m.componentInfos.count()
    end function

    private function getComponentInfoForIndex(contentIndex as integer, cellIndex = -1 as integer) as ml.ComponentInfo
      contentInfo = m.getComponentInfoForContentIndex(contentIndex)
      if contentInfo <> invalid
        info = contentInfo.component@.getContentInfoForIndex(cellIndex)
        if info <> invalid
          return m.componentInfos[info.index + cellIndex.componentIndex]
        end if
      end if
      return invalid
    end function

    private function getComponentInfoForContentIndex(contentIndex as integer) as ml.ComponentInfo
      info = invalid
      ? "getComponentInfoForContentIndex" ; contentIndex
      for each info in m.componentInfos
        ? ">>>" ; info.contentIndex
        if info.contentIndex = contentIndex
          return info
        end if
      end for
      ? "no match"
      return invalid
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ MoveToIndex Convenience Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function canMoveInDirection(direction as integer) as boolean
      return m.canMoveToIndex(m.index + direction, direction)
    end function

    function canMoveToIndex(index as integer, direction as integer) as boolean
      ? "CMTI D "; direction; " MI " ; index ; " NC "; m.numberOfComponents
      return m.numberOfComponents > 0 and ((direction = -1 and index > -1) or (direction = 1 and index < m.numberOfComponents))
    end function

    function moveToContentIndex(index as integer, animated = true as boolean, fast = false as boolean, direction = invalid as integer, forceSequential = true as boolean) as boolean
      info = m.getComponentInfoForContentIndex(index)
      if info <> invalid
        ? " INFO INDEX IS "; info.index
        return m.moveToIndex(info.index, animated, fast, direction, forceSequential)
      else
        ? "+++ cannot move to content index - no info"
      end if
      return false
    end function

    function moveFromPress(offset as integer, forceSequential = true as boolean) as boolean
      return m.move(offset, true, true, forceSequential)
    end function

    function move(offset as integer, animated = true as boolean, fast = false as boolean, forceSequential = true as boolean) as boolean
      ? " MOVE I " ; m.index ; " O " ; offset
      index = m.index + offset

      if offset > 0
        direction = 1
      else
        direction = -1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("move in direction", direction, " cannot be performed")
        ? "+++ could not move"
        return false
      end if

      ' m.log.info(`move I ${m.index} o ${offset}, i ${index}, animated ${animated}, fast ${fast}`)

      if index <> -1
        ' ? "===B"
        return m.moveToIndex(index, animated, fast, direction, forceSequential)
      end if

      return false
    end function

    function moveToEnd(direction as integer, screenPos = invalid as integer, animated = true as boolean, fast = false as boolean) as boolean
      ? ">>>>>>>>>> MOVE TO END"

      if direction = -1
        index = 0
      else
        index = m.numberOfComponents - 1
      end if

      if not m.canMoveToIndex(index, direction)
        m.log.info("already at end - ignoring")
        ? ">>>Already at end "
        return false
      end if

      ? ">>>moveToEnd  " ; m.__classname ; " I " ; m.index; " D "; direction

      m.moveToIndex(index, animated, fast)
      return true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Movement Machinery
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' move to the Virtual Index
    function moveToIndex(index as integer, animated = true as boolean, fast = false as boolean, direction = invalid as integer, forceSequential = true as boolean, isContinuing = false as boolean) as boolean
      m.log.info("moveToIndex I", m.index, "NI", index, animated)
      ? "////// MTI " ; index ; " d " ; direction

      'FIXME - cancel/tidy up a move in progress

      m.focusIndicatorManager@.cancelFlowFocus()

      m.isFinishingMove = false

      if m.componentInfos.count() = 0
        return false
      end if

      if direction = invalid
        direction = 0
        if index < m.index
          direction = -1
        else
          direction = 1
        end if
      end if

      '////////////////////////////////////////////////////////////////////////
      ? "//// 1. get ComponentInfo"
      '////////////////////////////////////////////////////////////////////////

      m.isMovingMultiple = abs(index - m.index) > 1

      if forceSequential
        nextComponentInfo = m.componentInfos[mc.clamp(index + direction, 0, m.componentInfos.count())]
      else
        nextComponentInfo = m.componentInfos[index]
      end if

      targetComponentInfo = m.componentInfos[index]
      m.setTargetComponentInfo(targetComponentInfo)
      m.setNextComponentInfo(nextComponentInfo)

      ' ? "::::::::::::::::: screenPos" ; m.screenPos
      m.direction = direction


      '////////////////////////////////////////////////////////////////////////
      ? "//// 2. Ascertain offset"
      '////////////////////////////////////////////////////////////////////////

      isFlowPossible = nextComponentInfo.isFlowFocusPossible(m.container.translation[m.axes], m.viewManager.maxPos, direction)

      if isFlowPossible
        m.moveUsingFlowAnim(m.componentInfo, nextComponentInfo, m.direction)
        return true
      end if

      translation = m.container.translation
      translation[m.axes] = targetComponentInfo.getScrollOffset()

      m.scrollStartIndex = m.index

      ? "////// offset is "; translation[m.axes]

      if animated
        '////////////////////////////////////////////////////////////////////////
        ? "/////// 3. animated move"
        '////////////////////////////////////////////////////////////////////////

        if fast
          m.animSpeed = m.settings.fastAnimSpeed
        else
          m.animSpeed = m.settings.animSpeed
        end if

        if translation[m.axes] = m.container.translation[m.axes]
          '////////////////////////////////////////////////////////////////////////
          ? "//// 3.a no move required - do a flow anim "
          '////////////////////////////////////////////////////////////////////////
          m.log.info("already in place - no need to scroll ", m.index, " >", m.nextIndex)
          m.moveUsingFlowAnim(m.componentInfo, nextComponentInfo, m.direction)
          return true
        end if

        '////////////////////////////////////////////////////////////////////////
        ? "//// 3.b regular animation required "
        '////////////////////////////////////////////////////////////////////////

        ? ">>>> START ANIM ; REGULAR CONTAINER ANIM - moveToIndex "; formatJson(translation) ; " SPEED "; m.animSpeed ; " " ; m.__classname
        m.toggleScrolling(true)
        m.setFocusIndex(m.index, true)
        m.viewManager.updateRenderedComponents(m.direction, m.index)
        m.moveAnimation.animateToWithSpeed(translation, m.animSpeed)
        m.moveAnimation.start()
      else
        '////////////////////////////////////////////////////////////////////////
        ' 4. non-animated move
        '////////////////////////////////////////////////////////////////////////

        m.container.translation = translation
        'TODO -check if jump is bigger than a certain amount
        ' m.viewManager.updateRenderedComponents(m.direction, m.index)
        ' m.setNextIndex(index)
        m.viewManager.updateRenderedComponents(m.direction, index)
        ' m.setFocusIndex(index, false)
        m.forceFocusOnIndex(index)
      end if

      return true
    end function

    function getCurrentIndexFraction(position as float)
      ' ? "OCPC " ; offset
      distance = abs(m.nextScrollLocation - m.activeScrollLocation)
      currentPos = abs(m.activeScrollLocation - position)
      if distance <> 0
        fraction = currentPos / distance
      else
        fraction = 0
      end if
      ' ? ">>> F " ; fraction ; " ASL "  ; m.componentInfo.index ; ": " ; m.activeScrollLocation ; " NSL " ; m.nextComponentInfo.index ; ": "; m.nextScrollLocation ; " T " ; m.container.translation[m.axes] ; " p "; position
      return fraction
    end function


    function onAnimationFractionChange(fraction as float) as void
      if fraction = 1
        ? " FINISHED AT NEXT INDEX " ; m.nextIndex
        m.focusManager.onFocusAnimationUpdate(1)
        m.setFocusIndex(m.nextIndex, false, false)
        m.toggleScrolling(false)
      else if (m.isMovingMultiple) or m.isFinishingMove
        fraction = m.getCurrentIndexFraction(m.container.translation[m.axes])

        if fraction >= 1
          ? "CCCC "
          m.focusManager.onFocusAnimationUpdate(1)
          ? " SCROLLED TO NEXT INDEX " ; m.nextIndex ; " D " ; m.direction' + m.direction
          m.setFocusIndex(m.nextIndex, true)
        else
          ? "DDDDD " ; fraction ; " I "; m.index ; " ni "; m.nextIndex ; " NSL " ; m.nextScrollLocation ; "ASL" ; m.activeScrollLocation
          m.focusManager.onFocusAnimationUpdate(fraction)
        end if
      else
        ? "EEEE "
        'simple one keypress case
        m.focusManager.onFocusAnimationUpdate(fraction)
      end if

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Finishing Movement
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function finishAnimating() as void
      m.finishMovingToIndex()
    end function

    function finishMovingToIndex() as boolean
      ? "+++++++FINISH MOVING TO INDEX "

      m.isMovingMultiple = false

      if m.isDoingFlowFocus
        ? "++++++ flow focus will have tidied this up"
        m.isDoingFlowFocus = false
        m.toggleScrolling(false)
        return false
      end if

      componentInfo = m.nextComponentInfo
      if componentInfo = invalid
        ? "+++++++ NO Component Info"
        m.toggleScrolling(false)
        return false
      end if

      translation = m.container.translation
      translation[m.axes] = componentInfo.getScrollOffset()

      isMoveRequired = translation[m.axes] <> m.container.translation[m.axes]
      'can only be animated
      m.animSpeed = m.settings.animSpeed
      m.isFinishingMove = true

      if not isMoveRequired
        m.log.info("already in place - no need to scroll ", m.componentInfo.rowIndex, " >", m.nextIndex)
        ? "+++++++ IN PLACE"
        m.moveUsingFlowAnim(m.componentInfo, m.componentInfo, m.direction)
        return true
      end if

      ? "++++++++ START ANIM ; finish moving to index  " ; m.componentInfo.index
      'TODO ascertain if this is a sub move
      'we are already scrolling
      m.moveAnimation.animateToWithSpeed(translation, m.animSpeed)
      m.moveAnimation.start()
      return true
    end function

    function stopAnimating()
      '      ? "+++++++++++++++++++++"
      '      ? "STOP ANIMAGING"
      m.moveAnimation.stop(false)
      ' m.moveAnimation.pause()
      m.toggleScrolling(false)
    end function

    function toggleScrolling(active as boolean)
      m.viewManager.setIsScrolling(active, m.isMovingMultiple, m.index)
      ? " toggleScrolling " ; active ; " " ; m.__classname

      if not active
        m.setTargetComponentInfo(invalid)
        m.isMovingMultiple = false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Flow Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function moveUsingFlowAnim(fromInfo as ml.ComponentInfo, toInfo as ml.ComponentInfo, direction as integer)
      ? ")))))) moveUsingFlowAnim"

      m.toggleScrolling(true)
      m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(toInfo, m.direction, true)
      'ensure that the component is set
      m.focusManager.setComponentInfo(fromInfo, toInfo, m.nextFocusIndicatorConfig, direction, true)
      m.flowFocusInfo = toInfo
      m.focusIndicatorManager@.startFlowFocus(toInfo, m.animSpeed, mc.getTop())
    end function

    function onFlowFocusFraction(fraction as float)
      ? "on FLow fraction"; fraction ; m.__classname
      ' m.log.info("onFlowFocusFraction", fraction, "multiple", m.isMovingMultiple, "targetIndex", m.targetIndex, "FF index", m.flowFocusInfo)

      if fraction = 1
        ' ? "FINISHED FLOW " ; m.__classname ; " multiple: " ; m.isMovingMultiple ; " TI " ; m.targetIndex
        m.focusManager.onFocusAnimationUpdate(1)
        m.setComponentInfo(m.flowFocusInfo)
        m.log.info("finished focusing action with this flow")
        '      ? "RESET TARGET INDEX onFlowFocusFraction finished"
        m.setFocusOnRenderer(true)
        if m.targetComponentInfo.index = m.flowFocusInfo.index
          m.toggleScrolling(false)
        else
          m.continueScrollingAfterFlowFocus()
        end if
      else
        m.focusManager.onFocusAnimationUpdate(fraction)
      end if

    end function

    protected function continueScrollingAfterFlowFocus() as void
      ' ? "CONTINUE - " ; m.direction ; " " ; m.isDoingLongPress
      m.moveToIndex(m.targetComponentInfo.index, true, true, m.direction, true, true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ State Tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function setComponentInfo(info as ml.ComponentInfo)
      m.componentInfo = info
      if info <> invalid
        m.index = info.index
        m.activeScrollLocation = info.getScrollOffset()
      else
        m.index = -1
        m.activeScrollLocation = 0
      end if
    end function

    function setNextComponentInfo(info as ml.ComponentInfo) as void
      if info = invalid
        m.nextComponentInfo = invalid
        m.nextIndex = -1
        m.nextScrollLocation = 0
        m.nextFocusIndicatorConfig = invalid
        return
      end if

      if info.index <> m.nextIndex
        m.nextIndex = info.index
        m.nextScrollLocation = info.getScrollOffset()
        m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(info, m.direction, false)

        if m.nextComponentInfo = invalid or info.contentIndex <> m.nextComponentInfo.contentIndex
          m.viewManager.updateScrolling(info.contentIndex)
        else
          'we scrolled to a sub-row
          ? "setNextComponentInfo - not (yet) reporting subrow move on CI "; info.contentIndex ; " SI "; info.componentIndex
        end if
      end if

      m.nextComponentInfo = info
    end function

    function setTargetComponentInfo(info as ml.ComponentInfo) as void
      m.targetComponentInfo = info
      if info <> invalid
        ? " >>>>>>>>>>>>>>>> Target is " ; info.index
        m.targetIndex = info.index
      else
        ? " >>>>>>>>>>>>>>>> Target is invalid "
        m.targetIndex = -1
      end if
    end function

    ' /**
    '  * @member setFocusIndex
    '  * @memberof module:ItemScroller
    '  * @instance
    '  * @function
    '  * @description Responsible for all state updates, and hooks pertaning to focus position.
    '  *       NOTE : does NOT update position - you should be in position when calling this. for efficiency does not recalculate index: you should know the index when you call me!
    '  * @param {integer} index - the index you KNOW you are on when your move is finished (finished could mean from one index to nextindex, while animating; doesn't have to be targetIndex)
    '  * @param {boolean} isMoving - if true, then deltas are calculated for next position, and observers fired if their screen status will change
    '  */
    function setFocusIndex(index as integer, isMoving as boolean, notifyFocusManager = true as boolean) as void
      'This MUST be called infrequently
      ' TODO - check if index is actually changed
      '      ? "~~~SFI "; index ; " moving "; isMoving ; " d "; m.direction

      if m.componentInfos.count() = 0
        return
      end if

      if index = -1
        m.setComponentInfo(m.componentInfos[0])
        m.setNextComponentInfo(m.componentInfos[0])
        ' m.setNextIndex(0)
      else
        if index >= m.numberOfComponents - 1
          index = m.numberOfComponents - 1
        end if

        m.setComponentInfo(m.componentInfos[index])
        m.setNextComponentInfo(m.componentInfos[m.index + m.direction])
      end if

      m.focusedItem = m.viewManager.visibleItems[m.componentInfo.contentIndex]

      m.viewManager.updateRenderedComponents(m.direction, m.index)

      m.viewPortEventNotifier.notifyViewportEvents(m.index, m.nextIndex, m.direction, m.screenPos, true)

      if notifyFocusManager
        m.focusManager.setComponentInfo(m.componentInfo, m.nextComponentInfo, m.nextFocusIndicatorConfig, m.direction, false)
      end if

      if isMoving
        m.setFocusOnRenderer(true, m.nextIndex)
      else
        m.setFocusOnRenderer(false)
      end if
    end function

    function forceFocusOnIndex(index as integer, notifyFocusManager = true as boolean) as void
      index = mc.clamp(index, 0, m.numberOfComponents)
      m.setComponentInfo(m.componentInfos[index])
      m.setNextComponentInfo(m.componentInfos[index])

      ' m.viewManager.updateRenderedComponents(m.direction, m.index)
      ' m.notifyViewportEvents(true)

      if notifyFocusManager
        m.focusManager.setComponentInfo(m.componentInfo, m.nextComponentInfo, m.nextFocusIndicatorConfig, m.direction, false)
      end if
      m.focusManager.onFocusAnimationUpdate(1)

      'TODO - for cells, do we want to trigger focus events?
      m.setFocusOnRenderer(false, m.index)
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ System Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function setFocusOnRenderer(isMoving as boolean, index = invalid as integer) as void
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Managing Content Changes
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function processChanges(changes as mc.types.array) as void
      isIndexUpdateRequired = false
      if m.numberOfComponents = 0
        ? "THERE ARE NO MORE ITEMS!"
        return
      end if

      if m.index >= m.numberOfComponents
        index = m.numberOfComponents - 1
        ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if

      if not isIndexUpdateRequired
      isIndexUpdateRequired = mc.collections.contains(changes, function(c as mc.types.assocarray)
        return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
      end function)
    end if

    'FIXME - this needs revisiting

    'all changes result in downward movements
    ? "LIST PROCESS INDEX CHANGES", isIndexUpdateRequired, m.index, m.numberOfComponents
    if isIndexUpdateRequired
      ? " NOTIFYING FOCUS"
      ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
      wasNotifying = m.focusManager.isNotifying
      m.focusManager.isNotifying = true
      m.reset(true)
      m.focusManager.isNotifying = wasNotifying
    else
      ? " not notifying focus"
      m.reset(true)
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Focus Indicator
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public function getFocusIndicatorConfig(componentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean) as ml.FocusIndicatorConfig

    info = m.getCellComponentInfo(componentInfo)
    size = m.viewManager.getItemSize(info.contentIndex)

    if info = invalid or info.component = invalid
      ? "Cell item info - EMPTY FOCUS SETTINGS"
      return new ml.FocusIndicatorConfig([0, 0], [0, 0], m.index, -1, [0, 0], [0, 0], m.settings, true)
    end if

    translation = m.getFocusIndicatorTranslation(info, componentInfo, direction, isFloatingFocus)

    indicatorTranslation = [translation[0] + m.settings.feedbackOffsets[0], translation[1] + m.settings.feedbackOffsets[1]]

    indicatorSize = [size[0] + m.settings.feedbackOffsets[2] - m.settings.feedbackOffsets[0], size[1] + m.settings.feedbackOffsets[3] - m.settings.feedbackOffsets[1]]

    isHidden = mc.getPath(m.viewManager.content, "isHidden", false)

    return new ml.FocusIndicatorConfig(size, translation, componentInfo.contentIndex, info.contentIndex, indicatorTranslation, indicatorSize, m.settings, isHidden)
  end function


  protected function getCellComponentInfo(componentInfo as ml.ComponentInfo) as ml.ComponentInfo
    return invalid
  end function

  protected function getFocusIndicatorTranslation(info as ml.ComponentInfo, componentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean) as object
    if info = invalid
      return [0, 0]
    end if

    screenPos = info.getScreenPositionForDirection(direction)
    parentScreenPos = componentInfo.getScreenPositionForDirection(direction)
    contentOffset = m.viewManager.settings.contentOffset

    if m.axes = 0
      translation = [screenPos, contentOffset[1] + parentScreenPos]
    else
      translation = [contentOffset[0] + parentScreenPos, screenPos]
    end if

    if isFloatingFocus
      cell = m.viewManager.getRenderer(info.contentIndex)
      'bs:disable-next-line
      bounds = cell.sceneBoundingRect()
      translation = [bounds.x, bounds.y]
    end if

    if m.settings.horizAnimStyle = "fixed"
      translation[m.axes] = contentOffset[m.axes]
    end if

    return translation
  end function

end class
end namespace