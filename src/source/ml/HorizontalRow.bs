import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/RowItemScroller.bs"
import "pkg:/source/ml/RowItemViewManager.bs"
import "pkg:/source/ml/BaseRow.bs"
import "pkg:/source/ml/CellInfo.bs"

namespace ml
  @node("ml_HorizontalRow", "ml_BaseRow")
  class HorizontalRow extends ml.BaseRow

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and private state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager
    private itemScroller

    function new()
      super()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function createViews()
      super.createViews()
      m.createManagers()
    end function

    private function createManagers()
      m.log.info("createManagers")
      m.viewManager = new ml.RowItemViewManager(m.owner, m.top, m.contentGroup, m.global.componentPool, 0, m.width)
      m.itemScroller = new ml.RowItemScroller(m.viewManager, m.owner.focusIndicatorManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Overridden Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onContentChange(content as mc.types.node, keepOldFocusIfPossible = false as boolean)
      if m.owner._updatesEnabled
        m.log.info("onContentChange")
        m.configureHeader()
        if content = invalid
          m.log.info("row content is set to invalid. resetting")
          m.viewManager.reset()
        else
          ' ? "UPDATING CONTENT"
          m.viewManager.reset()
          m.viewManager.setContent(content)

          ' m.focusManager.isNotifying = keepOldFocusIfPossible = invalid or keepOldFocusIfPossible = true
          m.itemScroller.reset(keepOldFocusIfPossible)
          ' m.focusManager.isNotifying = true
        end if
        ' end if
        if m.viewManager.numberOfItems = 0 and content <> invalid and content.isHidden <> true
          ' ? "force update - no comps left!"
          m.owner@.forceUpdate()
        end if
      else
        m.log.info("Updates are disabled. onContentChange returning without updating")
      end if
    end function

    protected override function onContentItemsChange(changes as mc.types.array)
      ? "content items changed"
      if m.owner._updatesEnabled
        if changes <> invalid and changes.count() > 0
          m.log.info("This content has changed in some way")
          m.viewManager.onContentItemsChange(changes)
        else
          m.viewManager.updateChangedItems()
        end if
      else
        m.log.info("Updates are disabled. onContentItemsChange returning without updating")
      end if
    end function

    override function getRect(index as integer, useScreenCoords = false as boolean) as mc.types.assocarray
      rect = m.viewManager.getRect(index, useScreenCoords = true)
      rect.subRowIndex = 0
      return rect
    end function

    private function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    protected override function onRecycle(newContent as mc.types.node)
      m.cleanHeader()
      m.viewManager.owner = m.owner
      m.viewManager.setContent(invalid)
      m.itemScroller.reset()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Row API Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function moveToIndex(index as integer, animated as boolean, animSpeedIndex = 0 as integer)
      if m._content <> invalid and index <> -1
        ? " DO A MOVE TO INDEX "; index, animated
        m.itemScroller.moveToIndex(index, animated, animSpeedIndex)
      end if
    end function

    override function cancelMove(forceFocusUpdate as boolean)
      ? "HORIZROW cancelling move CANCEL CANCEL========================"
      if m._content <> invalid
        m.itemScroller.cancelScrolling(forceFocusUpdate)
      end if
    end function

    override function moveFromPress(direction as integer, isLongPress as boolean, isPage = false as boolean) as boolean
      if isLongPress
        return m.itemScroller.moveToEnd(direction)
      else
        return m.itemScroller.moveFromPress(direction, true, isPage)
      end if
    end function

    override function canMoveInDirection(direction as integer) as boolean
      ' ? ">>> canMoveInDirection row"
      ' ? "I " ; m.itemScroller.index
      ' ? "direction" ; direction
      return (m._content <> invalid and m._content.length > 0) and ((direction = -1 and m.itemScroller.index > 0) or (direction = 1 and m.itemScroller.index < m._content.length - 1))
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onDidEnter(subRowIndex as integer, direction as integer, forceAll = false as boolean)
      ? " onDidEnter "
      m.itemScroller.notifyViewportEvents(direction, forceAll = true)
    end function

    private function onDidExit(subRowIndex as integer, direction as integer)
      ? " onDidExit "
      m.viewManager.notifyExitEvent(m.viewManager.getRenderedIndexes())
    end function

    ' private function onScrollingChange(subRowIndex as integer, direction as integer)
    '   ? " onScrollingChange "
    ' end function

    private function onDidGainFocus(subRowIndex as integer, direction as integer)
      ? " HORIZ onDidGainFocus " m.index subRowIndex direction
    end function

    private function onDidLoseFocus(subRowIndex as integer, direction as integer)
      ? " HORIZ onDidLoseFocus " m.index subRowIndex direction
      m.cancelMove(true)
    end function

    private function onGainingFocus(subRowIndex as integer, direction as integer, fraction as float)
      ' ? " HORIZ onGainingFocus " m.index subRowIndex direction fraction
    end function

    private function onLosingFocus(subRowIndex as integer, direction as integer, fraction as float)
      ' ? " HORIZ onLosingFocus " m.index subRowIndex direction fraction
    end function

    private function callMethodOnFocusedCell(functionName as string, args as mc.types.array)
      cell = m.itemScroller.cellInfo.component
      if cell <> invalid

        ' TODO potentially filter events
        cell@._apply(functionName, args, false)
      end if
    end function

  end class
end namespace
