import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/RowItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace ml
  class RowItemScroller extends ml.ItemScroller

    function new(viewManager as ml.RowItemViewManager, focusManager as ml.ItemFocusManager)
      super("RowItemScroller", viewManager, focusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function getFocusSettings()
      return ml.listMixin.getFocusSettings(m.viewManager.owner.content, m.viewManager.content)
    end function

    function notifyExitEvent() as void
      ' ? " NOTIFY ROW EXIT"
      for i = m.focusedIndex to m.focusedIndex + 4 'TOTAL hack
        comp = m.viewManager.getRenderer(i)
        if comp <> invalid
          ' ? " notifying exit   on "; comp.id
          if comp.id <> "#_#phc"
            if comp.isInViewPort
              comp.isInViewPort = false
              comp.listEvent = {
                name: "didExit"
                direction: 1
                index: comp.index
              }
              m.viewManager.releaseCell(comp.index)
            end if
          end if
        end if
      end for
    end function

    function notifyEnterEvent() as void
      ' newInViewportComponentsById = {}
      for i = m.focusedIndex to m.focusedIndex + 4 'TOTAL hack
        comp = m.viewManager.getRenderer(i)
        ' ? " CHECKING INDEX "; i ; " get comp" ; comp
        if comp = invalid or comp.id = "#_#phc"
          comp = m.viewManager.getCell(i)
        end if
        if comp <> invalid
          ' ? " notifying enter on "; comp.id
          if not comp.isInViewPort
            comp.isInViewPort = true
            comp.listEvent = {
              name: "didEnter"
              direction: 1
              index: comp.index
            }
          end if
        end if
      end for
    end function

    protected override function getCellComponentInfo(componentInfo as ml.ComponentInfo, isFromListScroll = false as boolean) as ml.ComponentInfo
      if isFromListScroll
        return m.viewManager.cellInfos[m.index]
      else
        if componentInfo = invalid
          return invalid
        end if
        return m.viewManager.cellInfos[componentInfo.index]
      end if
    end function

    protected override function getFocusIndicatorTranslation(info as ml.ComponentInfo, componentInfo as ml.ComponentInfo, direction as integer, isFloatingFocus as boolean) as object
      if info = invalid
        return [0, 0]
      end if

      if m.viewManager.settings = invalid
        m.log.warn("viewManager has no settings")
        return [0, 0]
      end if

      screenPos = info.getScreenPosition(direction)

      contentOffset = m.viewManager.settings.contentOffset
      headerOffset = m.viewManager.settings.headerSettings.height

      ' ? "GFC " ; m.__classname ; " HO "; headerOffset ; formatJson(contentOffset); " SP " ;screenPos ; "iFF "; isFloatingFocus

      translation = [screenPos, 0]

      translation[1] += headerOffset

      translation[1] += m.viewManager.settings.screenPos

      if isFloatingFocus
        cell = m.viewManager.getRenderer(info.contentIndex)
        'bs:disable-next-line
        bounds = cell.sceneBoundingRect()
        translation = [bounds.x, bounds.y]
      end if

      if m.settings.horizAnimStyle = "fixed"
        translation[m.axes] = contentOffset[m.axes]
      end if

      return translation
    end function

  end class
end namespace
