import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/ComponentInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/ListItemFocusManager.bs"

namespace ml
  class ListItemScroller extends ml.ItemScroller

    function new(viewManager as ml.ItemViewManager, focusManager as ml.ListItemFocusManager)
      super("ListItemScroller", viewManager, focusManager)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function getComponentInfos()
      m.componentInfos = []
      virtualIndex = 0
      for i = 0 to m.viewManager.visibleItems.count() - 1
        item = m.viewManager.visibleItems[i]
        if item.isHidden = invalid or item.isHidden = false and item.isFocusEnabled = invalid or item.isFocusEnabled = true
          component = m.viewManager.visibleComponents[i]
          infos = component@.getRowInfos()

          contentIndex = component.index
          for subIndex = 0 to infos.count() - 1
            info = infos[subIndex]
            componentInfo = ml.ComponentInfoUtils.componentInfoFromAA(info)
            componentInfo.component = component
            componentInfo.contentIndex = contentIndex
            componentInfo.index = virtualIndex
            m.componentInfos.push(componentInfo)
            virtualIndex++
          end for
        end if
      end for
      m.numberOfComponents = m.componentInfos.count()
      ? " GOT ITEM INFOS"
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function setFocusOnRenderer(isMoving as boolean, index = invalid as integer) as void
      m.log.info("setFocusOnRenderer", isMoving, index)
      ' if isMoving
      '   return
      ' end if
      if index = invalid
        index = m.index
      end if
      componentInfo = m.componentInfos[index]

      if componentInfo <> invalid and (m.viewManager.owner.isChildFocused or m.viewManager.owner.isFocused)
        mv.setFocus(componentInfo.component)
      else
        m.log.warn("not setting focus on", index, "owner child focused?", m.viewManager.owner.isChildFocused, "owner focused?", m.viewManager.owner.isFocused)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Managing Content Changes
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function processChanges(changes as mc.types.array) as void
      isIndexUpdateRequired = false
      if m.numberOfComponents = 0
        ? "THERE ARE NO MORE ITEMS!"
        return
      end if

      if m.index >= m.numberOfComponents
        index = m.numberOfComponents - 1
        ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if

      if not isIndexUpdateRequired
      isIndexUpdateRequired = mc.collections.contains(changes, function(c as mc.types.assocarray)
        return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
      end function)
    end if

    'FIXME - this needs revisiting

    'all changes result in downward movements
    ? "LIST PROCESS INDEX CHANGES", isIndexUpdateRequired, m.index, m.numberOfComponents
    if isIndexUpdateRequired
      ? " NOTIFYING FOCUS"
      ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
      wasNotifying = m.focusManager.isNotifying
      m.focusManager.isNotifying = true
      m.reset(true)
      m.focusManager.isNotifying = wasNotifying
    else
      ? " not notifying focus"
      m.reset(true)
    end if
  end function

end class
end namespace