import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/BaseClass.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/ml/CellInfo.bs"
import "pkg:/source/ml/ViewPortEventNotifier.bs"
import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/source/ml/ItemFocusManager.bs"

namespace ml
  class ListItemScroller extends ml.ItemScroller

    function new(viewManager as ml.ItemViewManager, focusManager as ml.ItemFocusManager)
      super("ListItemScroller", viewManager, focusManager)
    end function

    'hack
    public override function onViewManagerUpdate()
      super.onViewManagerUpdate()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Component Info
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function setFocusManagerInfo(CellInfo as ml.CellInfo, nextCellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean) as void
      previousFocusIndicatorConfig = m.getFocusIndicatorConfig(CellInfo, m.direction, isFloatingFocus)

      if m.viewManager.isScrolling
        nextCellInfo.component@.chooseCellInfoForScrollingIntoRow(nextCellInfo)
      end if

      m.nextFocusIndicatorConfig = m.getFocusIndicatorConfig(nextCellInfo, m.direction, isFloatingFocus)
      nextFocusIndicatorConfig = m.nextFocusIndicatorConfig
      m.focusManager.setCellInfo(CellInfo, nextCellInfo, nextFocusIndicatorConfig, direction, isFloatingFocus, previousFocusIndicatorConfig)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function setFocusOnRenderer(isMoving as boolean) as void
      m.log.info("setFocusOnRenderer", isMoving)
      if isMoving
        return
      end if
      if m.cellInfo <> invalid and (m.viewManager.owner.isChildFocused or m.viewManager.owner.isFocused)
        ' ? " SETTING FOCUS ON " ; mc.dv(m.cellInfo.component)
        'bs:disable-next-line
        mv.setFocus(m.cellInfo.component)
      else
        m.log.warn("not setting focus on", m.cellInfo.index, "owner child focused?", m.viewManager.owner.isChildFocused, "owner focused?", m.viewManager.owner.isFocused)
      end if
    end function

    public override function getFocusIndicatorConfig(CellInfo as ml.CellInfo, direction as integer, isFloatingFocus as boolean, isFromListScroll = false as boolean) as ml.FocusIndicatorConfig
      ' ? "::::::::::::::::::::::: LIST GET FOCUS INDICATOR CONFIG" ; CellInfo.componentIndex ; " D " ; direction
      if CellInfo <> invalid and CellInfo <> invalid
        config = CellInfo.component@.getFocusIndicatorConfig(CellInfo, direction, isFloatingFocus, true)
      else
        return invalid
      end if
      return config
    end function

    protected override function setCellInfo(info as ml.CellInfo)
      isSubRowChanged = m.cellInfo = invalid or info.componentIndex <> m.cellInfo.componentIndex
      super.setCellInfo(info)
      if isSubRowChanged
        m.viewManager.owner.focusedSubRowIndex = info.componentIndex
      end if
      m.viewManager.owner.screenPos = m.screenPos
      m.focusIndicatorManager.activeScreenPos = m.screenPos
    end function

    protected override function setNextCellInfo(info as ml.CellInfo) as void
      ' ? ">>>>>>>>>>>>>>> SNCI "; m.isLastMoveFlowFocus
      super.setNextCellInfo(info)
      if not m.isLastMoveFlowFocus
        m.focusIndicatorManager.nextScreenPos = m.nextScreenPos
      end if
    end function

    protected override function updateSrollOffsetFraction(fraction as float) as void
      if m.isLastMoveFlowFocus
        ' ? "Ignoring scrolloffset fraction while doing floating focus"
        return
      end if
      fraction = mc.clamp(fraction, 0, 1)

      if fraction < m.lastScrollOffsetFraction
        ' ? "Fixing offset position, to prevent 'jumping' after cancelling a scroll"
        m.previousScreenPos = m.offsetContainer.translation[1]
      end if

      m.lastScrollOffsetFraction = fraction
      newTranslation = mc.interpolateArray([0, m.previousScreenPos], [0, m.nextScreenPos], fraction)
      ' ? " MNSP "; m.previousScreenPos ; " > " fraction ; " > " ; m.nextScreenPos ; " > " ; newTranslation[1]

      m.offsetContainer.translation = newTranslation
      m.viewManager.owner.screenOffset = newTranslation[1]
      if fraction >= 1
        ' ? "CHANGE CHANGE CHANGE"
        ' ? " FINISHED UPDATE PSP >> " ; m.offsetContainer.translation[1]
        m.previousScreenPos = m.offsetContainer.translation[1]
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Managing Content Changes
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function processChanges(changes as mc.types.array) as void
      isIndexUpdateRequired = false
      ' ? " NC "; m.viewManager.numberOfItems ; " I " ; m.index
      if m.viewManager.numberOfItems = 0
        ' ? "THERE ARE NO MORE ITEMS!"
        return
      end if

      if m.index >= m.viewManager.numberOfItems
        index = m.viewManager.numberOfItems - 1
        ' ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if

      if not isIndexUpdateRequired
        isIndexUpdateRequired = mc.collections.contains(changes, function(c as mc.types.assocarray)
          return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
        end function)
      end if

      'FIXME - this needs revisiting

      'all changes result in downward movements
      ' ? "LIST PROCESS INDEX CHANGES", isIndexUpdateRequired, m.index, m.viewManager.numberOfItems
      if isIndexUpdateRequired
        ' ? " NOTIFYING FOCUS"
        ' ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
        wasNotifying = m.focusManager.isNotifying
        m.focusManager.isNotifying = true
        m.reset(true)
        m.focusManager.isNotifying = wasNotifying
      else
        ' ? " not notifying focus"
        m.reset(true)
      end if
    end function

    protected override function notifyViewportEvents(direction as integer, forceAll = false as boolean)
      ? " NOTIFY LIST EVENTS"
      m.viewPortEventNotifier.notifyListViewportEvents(m.cellInfo, m.nextCellInfo, m.direction, forceAll)
    end function

  end class
end namespace
