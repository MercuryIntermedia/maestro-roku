import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"

namespace ml
  class ListItemScroller extends ml.ItemScroller
    function new(viewManager as ml.ListItemViewManager)
      super(viewManager, 1)
      m.isList = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function setFocusOnRenderer(isMoving as boolean, index = invalid as integer) as void
      m.log.info("setFocusOnRenderer", isMoving, index)
      row = invalid
      ' if isMoving
      '   return
      ' end if
      if index <> invalid
        row = m.viewManager.getRenderer(index)
      else
        row = m.viewManager.getRenderer(m.index)
      end if

      if row <> invalid and (m.viewManager.owner.isChildFocused or m.viewManager.owner.isFocused)
        mv.setFocus(row)
      else
        m.log.warn("not setting focus on", index, "owner child focused?", m.viewManager.owner.isChildFocused, "owner focused?", m.viewManager.owner.isFocused)
      end if
    end function

    protected override function setIndex(index as integer)
      super.setIndex(index)
      m.setListSubIndex(index)
    end function

    protected override function processChanges(changes as mc.types.array) as void
      isIndexUpdateRequired = false
      'override point for handling changes, if necessary
      if m.index >= m.viewManager.numberOfItems
        'try down first
        index = m.getValidTargetIndex(m.index, 1)
        if index = -1
          index = m.getValidTargetIndex(m.index, -1)
        end if
        if index = -1
          index = 0
        end if
        ? "index is changing " ; m.index ; " > " ; index
        m.index = index
        isIndexUpdateRequired = true
      end if
      if not isIndexUpdateRequired
      isIndexUpdateRequired = mc.collections.contains(changes, function(c as mc.types.assocarray)
        return c.index <> invalid and c.index <> m.index or (c.type = "sort" or c.type = "change" or c.type = "updated" or c.type = "isHidden" or c.type = "isFocusEnabled")
      end function)
    end if

    'all changes result in downward movements
    ' m.direction = 1
    ? "LIST PROCESS INDEX CHANGES", isIndexUpdateRequired, m.index, m.viewManager.numberOfItems
    if isIndexUpdateRequired
      ? " NOTIFYING FOCUS"
      ? ">>>>>>>>>> ITEM SCROLLER INDEX IS NOW" ; m.index
      wasNotifying = m.focusManager.isNotifying
      m.focusManager.isNotifying = true
      m.reset(true)
      m.focusManager.isNotifying = wasNotifying

    else
      ? " not notifying focus"
      m.reset(true)
    end if

  end function



  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ private impl
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function setListSubIndex(index as integer)
    row = m.viewManager.visibleComponents[index]
    if row <> invalid and row.isMultiRow
      m.subRowIndex = row@.getRowIndex()
      m.maxSubRowIndex = row@.getMaxSubRowIndex() - 1
    else
      m.subRowIndex = -1
      m.maxSubRowIndex = -1
    end if
  end function



end class
end namespace