import "pkg:/source/ml/ItemScroller.bs"
import "pkg:/components/view/mixin/FocusMixin.bs"
import "pkg:/source/ml/ListItemViewManager.bs"

namespace ml
  class ListItemScroller extends ml.ItemScroller
    function new(viewManager as ml.ListItemViewManager)
      super(viewManager, 1)
      m.isList = true
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    override function setFocusOnRenderer(isMoving as boolean, index = invalid as integer) as void
      row = invalid
      ' if isMoving
      '   return
      ' end if
      if index <> invalid
        row = m.viewManager.getRenderer(index)
      else
        row = m.viewManager.getRenderer(m.index)
      end if

      if row <> invalid and (m.viewManager.owner.isChildFocused or m.viewManager.owner.isFocused)
        mv.setFocus(row)
      end if
    end function

    override function moveFromPress(offset as integer) as boolean
      row = m.viewManager.visibleComponents[m.index]
      if row <> invalid and row.isMultiRow and row@.moveRowFromPress(offset)
        ? "Doing a multi row move here"
        return true
      else
        index = m.index + offset

        if offset > 0 and m.index = m.viewManager.numberOfItems - 1
          m.log.info("already at end")
          return false
        else if index < 0
          m.log.info("already at start")
          return false
        end if

        return m.move(offset, invalid, true, true)
      end if
    end function

    protected override function setFocusUsingFlowAnim(index as integer, nextIndex as integer, direction as integer)
      m.toggleScrolling(true)
      m.focusManager.setFocusPosition(index, 0, nextIndex, 0, direction)
      m.flowFocusIndex = nextIndex
      m.viewManager.owner@.startFlowFocus([m.viewManager.row.index, index], [m.viewManager.row.index, nextIndex], m.animSpeed, mc.getTop())
    end function

  end class
end namespace