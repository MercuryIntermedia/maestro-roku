import "pkg:/source/core/Utils.bs"
import "pkg:/source/view/ViewUtils.bs"

namespace ml
  @node("ml_BaseCell", "Group")
  class BaseCell

    public index as integer = -1

    @observer("onDebugMChange")
    public __debugM = false

    ' any item in a list will have this set whenever it gets recycled
    @observer("onInitialStateChange")
    public initialState as mc.types.AssocArray

    public isInViewPort = false

    public listEvent as mc.types.AssocArray
    public contentVersion as integer = -1

    private isViewCreated = false
    private isRecyclePending = true

    public content as mc.types.node
    protected list as mc.types.node
    protected row as mc.types.node
    protected size as mc.types.array
    protected isContentDisplayed = false

    private isCreatingViewsOnInitialize = true

    function new()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function recycle()
      if not m.isViewCreated
        m._createViews()
      end if
      if m.isRecyclePending
        m._onContentChange(m.content)
      end if
    end function

    public function forceUpdate()
      ? " force update on cell"
      m.isRecyclePending = true
      m.recycle()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    function onDebugMChange()
      mc.setOrAddNodeField(m.top, "__m", mc.private.getDebugMObject(m))
    end function

    private function _createViews()
      if m.content <> invalid 'and (not m.isCreatingViewsOnInitialize or m.isInViewPort)
        ' ? " CREATE VIEWS"
        m.createViews()
        m.isViewCreated = true
      end if
    end function

    private function _onContentChange(content as mc.types.node) as void
      ' ? " ON CONTENT CHANGE " m.top.index
      isChanged = false
      if content = invalid
        m.contentVersion = -1
        isChanged = true
      else if m.contentVersion = -1 or content.version <> invalid
        m.contentVersion = content.version
        isChanged = true
      end if

      if isChanged
        m.onContentChange(content)
        if m.top.isInViewPort
          ' ? " IN VIEW PORT SHOWING "; m.index
          m.onShowWithContent(content)
        end if
      end if
      m.isRecyclePending = false
    end function

    protected function onInitialStateChange(state as mc.types.assocarray)
      ' ? " ON INITIAL STATE CHANGE " m.top.index
      m.list = state.list
      m.row = state.row
      m.size = state.size
      m.content = state.content
      m.isContentDisplayed = false
      if state.content = invalid
        m.cleanup()
      else
        m.isRecyclePending = true
        m.recycle()
      end if
    end function

    protected function createViewsFromStyleJson(childrenJson as mc.types.array, targetNode = invalid as mc.types.node, assignViewsToM = true as boolean, mTarget = invalid as mc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      mv.createViewsFromStyleJson(childrenJson, targetNode, assignViewsToM, mTarget)
    end function

    protected function updateViewsWithStyleJson(json as dynamic, mTarget = invalid as mc.types.assocarray)
      if mTarget = invalid
        mTarget = m
      end if
      'FIXME - maestro-bsc needs to understand overloaded namespaces
      'bs:disable-next-line
      mv.updateViewsWithStyleJson(json, mTarget)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ abstract methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function createViews()
      'override me!
    end function

    protected function cleanup()
      'override me!
      ' ? "CLEANING UP " ; m.index
    end function

    protected function onContentChange(content as mc.types.node)
      'override me
    end function


    protected function onShowWithContent(content as mc.types.node)
      'override me
    end function

    protected function onHide()
      'override me
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Delegate function
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ List Delegate
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected function onDidExit(direction as integer)
      ' ? " ON EXIT CELL "; m.index
      if m.isContentDisplayed
        m.onHide()
        m.isContentDisplayed = false
      end if
    end function

    protected function onDidEnter(direction as integer)
      ' ? " ON ENTER CELL "; m.index
      if not m.isContentDisplayed
        ' if not m.isViewCreated
        '   ? " CREATING VIEW"
        '   m.createViews()
        '   m.isViewCreated = true
        ' end if
        if m.isViewCreated
          m.onShowWithContent(m.content)
          m.isContentDisplayed = true
        end if
      end if
    end function

  end class
end namespace
