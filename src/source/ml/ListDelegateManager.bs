namespace ml

  class ListDelegateManager
    private cellDelegateFunctionMap = {
      "willGainFocus": "onCellWillGainFocus"
      "willLoseFocus": "onCellWillLoseFocus"
      "didGainFocus": "onCellDidGainFocus"
      "didLoseFocus": "onCellDidLoseFocus"
      "gainingFocus": "onCellGainingFocus"
      "losingFocus": "onCellLosingFocus"
    }
    private componentFunctionMap = {
      "willGainFocus": "onWillGainFocus"
      "willLoseFocus": "onWillLoseFocus"
      "didGainFocus": "onDidGainFocus"
      "didLoseFocus": "onDidLoseFocus"
      "gainingFocus": "onGainingFocus"
      "losingFocus": "onLosingFocus"
    }

    private rowDelegateFunctionMap = {
      "willGainFocus": "onRowWillGainFocus"
      "willLoseFocus": "onRowWillLoseFocus"
      "didGainFocus": "onRowDidGainFocus"
      "didLoseFocus": "onRowDidLoseFocus"
      "gainingFocus": "onRowGainingFocus"
      "losingFocus": "onRowLosingFocus"
    }
    private list as mc.types.node

    function new(list as mc.types.node)
      m.list = list
    end function

    function callCellDelegateMethod(eventName as string, event as mc.types.assocarray) as void
      delegateFunctionName = m.cellDelegateFunctionMap[eventName]
      cellFunctionName = m.componentFunctionMap[eventName]
      if delegateFunctionName = invalid
        ? "CELL EVENT(skipped) " ; eventName ; " " ; event.direction ; " I " ; "" ; event.index ; " " ; event.fraction
        return
      end if
      ' ? "onListEventBridge OBSERVED " ; eventName

      if delegateFunctionName = "onCellGainingFocus" or delegateFunctionName = "onCellLosingFocus"
        event.cell@._apply(cellFunctionName, [event.direction, event.fraction])
        m.list@._apply(delegateFunctionName, [event.rowIndex, event.index, event.direction, event.fraction])

      else
        event.cell@._apply(cellFunctionName, [event.direction])
        m.list@._apply(delegateFunctionName, [event.rowIndex, event.index, event.direction, event.fraction])
      end if
    end function

    function callRowDelegateMethod(eventName as string, event as mc.types.assocarray) as void
      rowDelegateFunctionName = m.componentFunctionMap[eventName]
      rowFunctionName = m.componentFunctionMap[eventName]
      if rowDelegateFunctionName = invalid
        ? "ROW EVENT(skipped) " ; eventName ; " " ; event.direction ; " I " ; "" ; event.index ; " " ; event.fraction
        return
      end if

      ' ? "LE  " ; eventName ; " " ; event.direction ; " I " ; "" ; event.index ; " " ; event.fraction
      if rowDelegateFunctionName = "onRowGainingFocus" or rowDelegateFunctionName = "onRowLosingFocus"
        'TODO HERE WE NEED TO SEND SUBROW INDEX EVENTS!![[]]
        event.row@._apply(rowFunctionName, [event.subRowIndex, event.direction, event.fraction])
        m.list@._apply(rowDelegateFunctionName, [event.rowIndex, event.subRowIndex, event.direction, event.fraction])
      else
        event.row@._apply(rowFunctionName, [event.subRowIndex, event.direction])
        m.list@._apply(rowDelegateFunctionName, [event.rowIndex, event.subRowIndex, event.direction])
      end if

    end function
  end class

end namespace
