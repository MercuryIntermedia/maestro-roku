import "pkg:/source/ml/ItemViewManager.bs"

namespace ml
  class GridRowItemViewManager extends ml.ItemViewManager
    public row = invalid
    public cellsById = {}
    public numCols = 1
    public componentPool
    public componentBufferMode = "rendered"
    public lastRowIsRendered = "none"
    public isFlowSupported = false

    private rowOffsets = []

    function new(list as mc.types.node, row as mc.types.node, container as mc.types.node, componentPool as mc.types.node, minPos as integer, maxPos as integer)
      super("GridRowItemViewManager", list, container, 0, minPos, maxPos)
      m.componentPool = componentPool
      m.row = row

      m.lookAheadDistance = maxPos * 1.5
      m.lookBehindDistance = maxPos * 1.5
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ overridden
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public override function reset()
      m.log.info("releasing", m.cellsById.count(), "row children")
      for each id in m.cellsById
        m.componentPool@.releaseComponent(m.cellsById[id])
      end for
      m.cellsById = {}
      super.reset()
    end function

    override function createRenderers(content as mc.types.node) as boolean
      'renderers are created as needed
      m.cellsById = {}
      return true
    end function

    override function updateLayout() as void
      m.log.info("ROW updateLayout")
      m.rects = []
      m.visibleComponents = []
      m.visibleItems = []

      if m.content = invalid
        return
      end if

      i = 0
      xSpace = m.settings.space
      rowHeight = m.settings.rowHeight

      x = 0
      y = 0
      numItems = m.content.getChildCount()
      children = m.content.getChildren(-1, 0)
      m.numCols = m.settings.numColumns
      m.numCols = m.numCols < 1 ? 1 : m.numCols
      rowIndex = 0
      while i < numItems -1
        m.rowOffsets.push(y)
        for col = 0 to m.numCols - 1
          item = children[i]
          settings = ml.listMixin.getCellSettings(m.owner.content, m.content, item)
          m.rects.push({
            translation: [x, y],
            size: settings.size
            index: i
            gridRow: rowIndex
          })
          'TODO - for now, no vis options for rows children..
          m.visibleItems.push(item)

          x += settings.size[m.axes] + xSpace
          i++
        end for

        x = 0
        y += rowHeight
        rowIndex++
      end while

      m.numberOfItems = m.visibleItems.count()
    end function

    override function shouldUpdateRenderedIndexes(direction as integer, index as integer)
      return true
    end function

    override function applyRenderStateMap(renderStateMap as mc.types.assocarray)
      m.log.info("ROW applyRenderStateMap", m.row.index, m.row.isRendered)
      m.renderedComponents = []
      if m.row.isRendered
        for each id in renderStateMap
          m.applyrenderStateForCell(id, renderStateMap[id])
        end for
      else
        ' ? "ROW IS NOT !! RENDERED" ; m.row.index
        for each id in renderStateMap
          m.applyrenderStateForCell(id, "none")
        end for
      end if

      m.lastRowIsRendered = m.row.isRendered
    end function

    function applyrenderStateForCell(id as string, renderState as string)
      m.log.verbose("applyrenderStateForCell", id, renderState)
      index = id.toInt()
      ' isRendered = m.row.isRendered
      item = m.content.getChild(index)

      if item <> invalid
        if renderState = "rendered"
          cell = m.cellsById[id]
          if cell = invalid
            settings = ml.listMixin.getCellSettings(m.owner.content, m.content, item)
            ' ? "GETTING CELL " ; id
            cell = m.componentPool@.getComponent(settings.compName)

            if cell <> invalid
              cell.index = index
              cell.translation = m.rects[index].translation

              cell.initialState = {
                row: m.row
                list: m.owner
                size: m.rects[index].size
                content: item
              }

              cell.visible = true
              ' cell.visible = isRendered

              ' ? ">>>>>>>> " ; isRendered

              ' if isRendered
              cell.listEvent = { "name": "didEnter" }
              ' end if

              if m.lastScrollEvent <> invalid
                cell.listEvent = m.lastScrollEvent
              end if

              m.container.appendChild(cell)
              m.cellsById[id] = cell
            else
              ? ">>ERR no cell for " ; settings.compName
            end if
          end if
          if cell <> invalid
            m.renderedComponents.push(cell)
          end if
        else
          cell = m.cellsById[id]
          if cell <> invalid
            ' ? "RELEASING " ; id
            m.componentPool@.releaseComponent(cell)
            m.cellsById.delete(id)
          else
            'this is almost certainly due to trying to release a cell during setting content
            ' ? " COULD NOT FIND CELL TO RELEASE" ; id
          end if
        end if
      end if
    end function

    override function getRenderer(index as integer)
      return m.cellsById[str(index).trim()]
    end function

    override function setIsScrolling(isScrolling as boolean, isLong as boolean, startIndex as integer) as void
      if m.isScrolling = isScrolling
        return
      end if
      m.scrollingStartIndex = isScrolling ? startIndex: -1
      m.isScrolling = isScrolling

      ' ? "++++ setIsScrolling" ; isScrolling
      m.row.isScrolling = isScrolling

      m.owner.isScrolling = isScrolling

      event = {
        name: isScrolling ? "scrollStart" : "scrollStop"
        startIndex: m.scrollingStartIndex
        long: isLong
        startIndex: m.scrollingStartIndex
      }
      m.lastScrollEvent = isScrolling ? event : invalid


      for each id in m.cellsById
        comp = m.cellsById[id]
        comp.listEvent = event
      end for

      m.owner.listEvent = {
        name: event.name
        index: m.row.index
        long: isLong
        startIndex: startIndex
      }
      ' ? "++++ row - listEvent " ; formatJson(m.row.listEvent)
      ' ? "++++ owner - listEvent " ; formatJson(m.owner.listEvent)
    end function

    override function getFlowScreenPosition(index as integer, direction as integer, screenPos as integer)
      itemRect = m.rects[index]
      if itemRect <> invalid
        screenPos = m.getScreenPositionForItem(itemRect, direction, screenPos)
        return screenPos
      end if
      return invalid
    end function

    override function getComponentsInViewPort(startOffset as integer)
      compStates = {}

      ' sStart = m.screenRect.translation[m.axes] + startOffset
      ' sEnd = sStart + m.screenRect.size[m.axes]

      for each comp in m.renderedComponents
        if comp.index <> invalid
          cRect = m.rects[comp.index]
          if cRect <> invalid
            compStates[comp.id] = true
            'TODO - minimize what is in view port
            '   cStart = cRect.translation[m.axes]
            '   cEnd = cStart + cRect.size[m.axes]
            '   if (cStart >= sStart and cStart <= sEnd) or (cEnd >= sStart and cEnd <= sEnd)
            '     compStates[comp.id] = true
            '   else
            '     compStates[comp.id] = false
            '   end if
          end if
        else
          ? "comp index not set!"
        end if
        ' m.log.info(compStates[comp.id], "sStart", sStart, "sEnd", sENd, "cStart", cStart, "cEnd", cENd)
      end for

      return compStates
    end function

    override function getRenderedIndexes(direction as integer, index as integer)
      return {
        startIndex: 0
        endIndex: m.content = invalid ? 0 : m.visibleItems.count() - 1
      }
      'TBD
      ' indexPos = abs(m.getTargetTranslation(index, direction)[m.axes])

      ' if direction < 0
      '   beforePos = indexPos - m.lookAheadDistance
      '   afterPos = indexPos + m.lookBehindDistance
      ' else
      '   afterPos = indexPos + m.lookAheadDistance
      '   beforePos = indexPos - m.lookBehindDistance
      ' end if

      ' if beforePos < 0
      '   beforePos = 0
      ' end if

      ' if afterPos < 0
      '   afterPos = 0
      ' end if

      ' ' 'bs:disable-next-line
      ' ' if m.row <> invalid
      ' '   ? "++ROW "; m.lookAheadDistance ; "  " ; m.lookBehindDistance
      ' ' end if
      ' return {
      '   startIndex: m.getIndexAtPosition(beforePos, direction)
      '   endIndex: m.getIndexAtPosition(afterPos, direction)
      ' }
    end function

    'the grid itself never scrolls - it will tell it's parent to scroll to the desired row
    override function getTargetTranslation(index as integer, direction as integer, screenPos = invalid as boolean)
      return [0, 0]
    end function

    override function getOffsetForScreenPosition(itemRect as object, screenPos as integer)
      return 0
    end function

    override function getScreenRect(index as integer, screenPos = invalid as integer, direction = 0 as integer)
      rect = super.getScreenRect(index, screenPos, direction)
      ' ? ">>>>>>>>>>>>>>>>>>>>>>>>>>>"
      ' ? " GOT ROW RECT " ; formatJson(rect)
      ' ? ">>>>>>>>>>>>>>>>>>>>>>>>>>>"
      ' if rect <> invalid
      '   rect.translation[1] += m.settings.screenPos
      ' end if

      return rect
    end function

  end class
end namespace