import "pkg:/source/ml/ItemViewManager.bs"
import "pkg:/source/ml/ListMixin.bs"
#const use_debug_hacks = false

namespace ml
  class ListItemViewManager extends ml.ItemViewManager

    private componentPool as mc.types.node
    private batchTimer as mc.types.node
    private isBatchCreationInProgress = false

    public override function reset()
      m.log.info ("resetting list view manager")

      if m.isBatchCreationInProgress
        m.cancelBatching()
      end if

      if m.components.count() > 0
        m.log.info("releasing", m.components.count(), "list children")
        for each component in m.components
          component.content = invalid
        end for
        m.componentPool@.releaseComponents(m.components)
      end if

      super.reset()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ async row creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private creationIndex = -1
    'sometimes we want to create all rows up front, for important screens
    'using async renderer creation allows us to do this without clogging up the devices's render thread
    private batchSize = 3
    private batchDelay = 3

    function new(list as mc.types.node, container as mc.types.node, minPos as integer, maxPos as integer, componentPool as mc.types.node)
      super("ListItemViewManager", list, container, 1, minPos, maxPos)
      m.delegate = list.rowEvents
      m.componentPool = componentPool
      m.lookAheadDistance = maxPos * 5
      m.lookBehindDistance = maxPos * 2
    end function

    override function getRenderer(index as integer)
      return m.components[index]
    end function

    private function cancelBatching()
      m.isBatchCreationInProgress = false
      m.cancelWaitTimer(m.batchTimer)
    end function

    override function createRenderers(content as mc.types.node) as boolean

      if content <> invalid
        m.creationIndex = -1
        settings = content.listSettings
        isReady = true
        if settings.rowCreationStrategy = "async"
          m.batchSize = settings.rowCreationBatchSize
          m.batchDelay = settings.rowCreationBatchDelay
          m.owner.state = "rendering"
          isReady = false
        else
          m.batchSize = m.content.getchildCount()
        end if
        m.createRendererBatch()
        return isReady
      end if
      m.batchTimer = m.waitAFrame(m.createRendererBatch, 0.15)
      return false
    end function

    protected override function onRenderersCreated()
      super.onRenderersCreated()
      m.itemScroller.reset()
      ' m.owner@.applyFocusSettings()
      m.owner.state = "rendered"
      ' if m.owner.nextFocusIndex = invalid
      '   nextFocus = [0, 0]
      ' else
      '   'TODO - verify this is a safe index
      '   nextFocus = m.owner.nextFocusIndex
      ' end if
      ' 'TODO need to actually set the focus properly
      ' m.itemScroller.forceFocusOnIndex(nextFocus[0])
      ' m.owner.nextFocusIndex = nextFocus
      ' m.owner.focusedRowIndex = nextFocus[0]
    end function

    override function createRendererBatch() as void
      if m.content <> invalid
        index = 0
        for i = 0 to m.batchSize
          m.creationIndex++
          index = m.creationIndex
          if m.creationIndex >= m.content.getchildCount()
            ' ? "FINISHED RENDERING LIST ROWS"
            m.onRenderersCreated()
            return
          end if
          rowContent = m.content.getChild(index)
          settings = ml.listMixin.getRowSettings(m.content, rowContent)
          rect = m.getRect(index)

          comp = m.createRow(rowContent, index, settings, rect.height)
          if comp <> invalid
            comp.index = index
            comp.renderState = "none"
            m.components.push(comp)
          else
            m.log.error("could not create row for index ")
          end if
          index++
        end for
        if m.creationIndex < m.content.getchildCount()
          m.waitAFrame(m.createRendererBatch, 0.15)
        end if
      end if
    end function

    function createRow(rowContent as mc.types.node, index as integer, settings as mc.types.node, height as integer)
      compName = settings.componentName <> invalid ? settings.componentName : "ml_HorizontalRow"
      'TODO - measure height to ascertain how many
      isRendered = index < 4
      row = m.componentPool@.getComponent(compName, 1)
      row.id = index.toStr()
      state = {
        renderState: isRendered ? "rendered" : m.componentBufferMode
        isRendered: isRendered
        owner: m.owner
        index: index
        width: m.owner.width
        height: height
        'TODO - measure the heights.
        isInViewport: isRendered
      }
      m.container.appendChild(row)
      row.setFields(state)

      if row.isInitialized
        ? "RECYCLE EXISTING ROW"
        row@.recycle(rowContent)
        row.content = rowContent
      else
        ? "CREATE NEW ROW "
        row.content = rowContent
        row@._initialize(invalid)
      end if

      return row
    end function

    override function updateLayout()
      y = 0
      w = m.owner.width

      for each comp in m.components
        settings = ml.listMixin.getRowSettings(m.content, comp.content)
        comp.visible = comp.content.isHidden <> true
        comp.height = m.calculateRowHeight(settings)
        screenPos = settings.screenPos

        if comp.visible
          translation = [0, y]
          yOffset = 0
          contentOffset = settings.contentOffset
          if contentOffset <> invalid
            translation[0] += contentOffset[0]
            yOffset = contentOffset[1]
            translation[1] += yOffset
          end if

          comp.translation = translation
          'TODO better handle the whole visibility

          height = comp.height + settings.space + yOffset
          if settings.peekNextPixels <> 0
            screenPos = 1080 - (height + settings.peekNextPixels)
            settings.screenPos = screenPos
          end if

          y += height
          m.rects.push({
            translation: comp.translation
            size: [w, comp.height]
            index: comp.index
            screenPos: screenPos
          })
          m.visibleComponents.push(comp)
          m.visibleItems.push(comp.content)

          #if use_debug_hacks
            m.hackInfoIntoHeader(comp)
          #end if
        else
          m.hiddenComponents.push(comp)
        end if

      end for

    end function

    private function hackInfoIntoHeader(comp as mc.types.node)
      if comp.subType() = "ml_HorizontalRow"

        header = comp.getChild(2).getChild(0)
        if header <> invalid
          label = header.getChild(1)
          label.text = `I ${comp.index} POS ${comp.translation[1]} SP ${comp.content.settings.screenPos}`
        end if
      end if
    end function

    override function applyRenderStateMap(renderStateMap as mc.types.assocarray)
      for each id in renderStateMap
        comp = m.components[id.toInt()]

        if comp <> invalid and comp.renderState <> renderStateMap[id]
          comp.renderState = renderStateMap[id]
          if comp.renderState = "rendered"
            m.renderedComponents.push(comp)
          end if
          comp.isRendered = comp.renderState = "rendered"
        else
          ' ? "ERROR could not find visible comp for "; id
        end if
      end for

    end function

    override function getFocusSettings()
      return m.content.focusSettings
    end function

    ' @params{ml_RowSettings} settings for the current row
    private function calculateRowHeight(settings as mc.types.node) as integer
      height = 300
      if settings = invalid
        return height
      end if

      if settings.height <> -1
        height = settings.height
      else if settings.cellSettings <> invalid
        height = settings.cellSettings.size[1]
      end if

      if settings.headerSettings.position <> "none"
        height += settings.headerSettings.height
      end if
      return height
    end function

  end class
end namespace