import "pkg:/source/ml/ItemViewManager.bs"
import "pkg:/source/ml/ListMixin.bs"
#const use_debug_hacks = false

namespace ml
  class ListItemViewManager extends ml.ItemViewManager

    private componentPool as mc.types.node
    private batchTimer as mc.types.node
    private rowsByContentID = {}
    private previousRowsByContentId = {}
    private isUpdating = false
    private previousFocusedRow as mc.types.node
    private previousFocusedIndex = 0

    public override function reset()
      m.log.info ("resetting viewManager. numItems: ", m.numberOfItems)

      if m.isRendering
        m.cancelBatching()
      end if

      if m.components.count() > 0
        m.log.info("releasing", m.components.count(), "list children")
        for each component in m.components
          component.content = invalid
        end for
        m.componentPool@.releaseComponents(m.components)
      end if
      m.rowsByContentID = {}

      super.reset()
    end function

    public override function onContentUpdated()
      m.log.info("updating row renderers due to contents change")
      m.isUpdating = true
      ' if m.owner.nextFocusIndex <> invalid
      m.previousFocusedRow = m.itemScroller.focusedItem
'      ? " CONTENT UPDATED"
      ' ? ">>>>> WAS FOCUSED" ; m.previousFocusedRow.title
      m.previousFocusedIndex = m.itemScroller.index
      ' end if
      m.createRenderers(m.content)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ async row creation
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private creationIndex = -1
    'sometimes we want to create all rows up front, for important screens
    'using async renderer creation allows us to do this without clogging up the devices's render thread
    private batchSize = 3
    private batchDelay = 3

    function new(list as mc.types.node, container as mc.types.node, minPos as integer, maxPos as integer, componentPool as mc.types.node)
      super("ListItemViewManager", list, container, 1, minPos, maxPos)
      m.delegate = list.rowEvents
      m.componentPool = componentPool
      m.lookAheadDistance = maxPos * 5
      m.lookBehindDistance = maxPos * 2
    end function

    override function getRenderer(index as integer)
      return m.components[index]
    end function

    private function cancelBatching()
      m.isRendering = false
      m.isUpdating = false
      'ensure that we catch any components if we were half way through a batch, so we can remove them
      allComponents = {}
      m.components = []
      allComponents.append(m.previousRowsByContentId)
      allComponents.append(m.rowsByContentID)
      for each id in allComponents
        m.components.push(allComponents[id])
      end for
      m.cancelWaitTimer(m.batchTimer)
    end function

    override function createRenderers(content as mc.types.node) as boolean

      ' ? "CREATE RENDERERS"
      m.visibleComponents = []
      m.visibleItems = []
      m.updateRects()
      if content <> invalid
        m.creationIndex = -1
        m.previousRowsByContentId = m.rowsByContentID
        m.rowsByContentID = {}
        m.components = []
        settings = content.listSettings
        if settings.rowCreationStrategy = "async" and not m.isUpdating
          m.batchSize = settings.rowCreationBatchSize
          m.batchDelay = settings.rowCreationBatchDelay
          m.owner.state = "rendering"
          isReady = false
          m.batchTimer = m.waitAFrame(m.createRendererBatch, 0.15)
        else
          ' ? "USING SYNC MODE"
          m.batchSize = m.content.getchildCount()
          isReady = true
        end if
        m.createRendererBatch()
        return isReady
      end if
      return false
    end function

    protected override function onRenderersCreated()
      super.onRenderersCreated()
      removedRows = []
      for each id in m.previousRowsByContentId
        row = m.previousRowsByContentId[id]
        row.content = invalid
        removedRows.push(row)
      end for
      m.previousRowsByContentId = {}
      m.log.info("releasing", removedRows.count(), "rows")
      m.componentPool@.releaseComponents(removedRows)

      if not m.isUpdating
        m.itemScroller.reset()
        m.owner.state = "rendered"
      else
        m.log.info("was updating, so not updating scroll position")
        'TODO - update the scrolling position if it was on a removed row
        m.isUpdating = false
      end if

      m.restorePreviousFocus()
    end function

    private function restorePreviousFocus()
      ' ? "RESTORE FOCUS ";
      ' ? "PREVOIUS ROW"; m.previousFocusedRow
      ' ? "PREVOIUS INDEX"; m.previousFocusedIndex

      focusIndex = [0, 0]

      if m.previousFocusedRow <> invalid
        row = m.rowsByContentID[m.previousFocusedRow.id]
        if row = invalid
          index = m.previousFocusedIndex < m.numberOfItems ? m.previousFocusedIndex : m.numberOfItems - 1
          row = m.visibleComponents[index]
        end if

        if row <> invalid
          focusIndex[0] = row.index
          focusIndex[1] = row.focusedCellIndex
        end if
      end if
      m.previousFocusedIndex = 0
      m.previousFocusedRow = invalid
      ' 'TODO need to actually set the focus properly
      m.itemScroller.moveToIndex(focusIndex[0], false)
      m.itemScroller.forceFocusOnIndex(focusIndex[0])
      m.owner.nextFocusIndex = focusIndex
      m.owner.focusedRowIndex = focusIndex[0]
    end function

    override function createRendererBatch() as void
      if m.content <> invalid
        index = 0
        ' ? ">>>>>>>>>>>>>>"
        ' ? ">>>>>>>>>>>>>>"
        ' ? ">>>>>>>>>>>>>>"
        ' ? formatJson(m.rects)
        ' ? ">>>>>>>>>>>>>>"
        ' ? ">>>>>>>>>>>>>>"
        ' ? ">>>>>>>>>>>>>>"
        for i = 0 to m.batchSize
          m.log.info(">>> BEGIN CREATE ROW", i)
          m.creationIndex++
          index = m.creationIndex
          if m.creationIndex >= m.content.getchildCount()
            ' ? "FINISHED RENDERING LIST ROWS"
            m.onRenderersCreated()
            return
          end if
          rowContent = m.content.getChild(index)
          settings = ml.listMixin.getRowSettings(m.content, rowContent)
          rect = m.rects[index]

          comp = m.previousRowsByContentId[rowContent.id]
          if comp <> invalid
            m.log.info("using comp for the same row")
            comp.index = index
            comp.translation = rect.translation
            m.previousRowsByContentId.delete(rowContent.id)
            'TODO do I need to set renderState
          else
            m.log.info("creating row for this item")
            comp = m.createRow(rowContent, index, settings, rect)
          end if


          if comp <> invalid
            m.components.push(comp)
            m.rowsByContentID[rowContent.id] = comp
          else
            m.log.error("could not create row for index ")
          end if
          if rect.visible
            m.visibleComponents.push(comp)
          else
            m.hiddenComponents.push(comp)
          end if
          index++
          m.log.info(">>> END CREATE ROW", i)
        end for
        if m.creationIndex < m.content.getchildCount()
          m.waitAFrame(m.createRendererBatch, 0.15)
        end if
      end if
    end function

    function createRow(rowContent as mc.types.node, index as integer, settings as mc.types.node, rect as mc.types.assocarray)
      compName = settings.componentName <> invalid ? settings.componentName : "ml_HorizontalRow"
      'TODO - measure height to ascertain how many
      isRendered = index < 4
      row = m.componentPool@.getComponent(compName, 1)
      m.rowsByContentID[rowContent.id] = row

      row.setFields(rect)

      state = {
        renderState: isRendered ? "rendered" : m.componentBufferMode
        isRendered: isRendered
        owner: m.owner
        width: m.owner.width
        isInViewport: isRendered
      }
      row.setFields(state)
      m.container.appendChild(row)

      if row.isInitialized
        ' ? "RECYCLE EXISTING ROW"
        row@.recycle(rowContent)
        row.content = rowContent
      else
        ' ? "CREATE NEW ROW "
        row.content = rowContent
        row@._initialize(invalid)
      end if

      return row
    end function

    override function updateLayout()
      'TODO - might need this for updating layouts without changing content
      ' for i = 0 to m.rects.count() - 1
      '   rect = m.rects[i]
      '   comp = m.visibleComponents[i]
      '   comp.translation = rect.translation
      ' end for
    end function

    override function updateRects() as void
      y = 0
      w = m.owner.width
      m.rects = []

      if m.content = invalid
        return
      end if

      for i = 0 to m.content.getchildCount() - 1
        item = m.content.getChild(i)
        settings = ml.listMixin.getRowSettings(m.content, item)
        visible = item.isHidden <> true
        if settings.subType() = "ml_GridRowSettings"
          height = m.calculateGridRowHeight(item, settings)
        else
          height = m.calculateRowHeight(settings)
        end if
        screenPos = settings.screenPos

        if visible
          m.visibleItems.push(item)
          translation = [0, y]
          yOffset = 0
          contentOffset = settings.contentOffset
          if contentOffset <> invalid
            translation[0] += contentOffset[0]
            yOffset = contentOffset[1]
            translation[1] += yOffset
          end if

          height += settings.space + yOffset
          if settings.peekNextPixels <> 0
            screenPos = 1080 - (height + settings.peekNextPixels)
            settings.screenPos = screenPos
          end if

          y += height
          m.rects.push({
            translation: translation
            size: [w, height]
            index: i
            screenPos: screenPos
            visible: visible
          })

          #if use_debug_hacks
            m.hackInfoIntoHeader(comp)
          #end if
        end if

      end for

      m.numberOfItems = m.visibleItems.count()
    end function


    private function hackInfoIntoHeader(comp as mc.types.node)
      if comp.subType() = "ml_HorizontalRow"

        header = comp.getChild(2).getChild(0)
        if header <> invalid
          label = header.getChild(1)
          label.text = `I ${comp.index} POS ${comp.translation[1]} SP ${comp.content.settings.screenPos}`
        end if
      end if
    end function

    override function applyRenderStateMap(renderStateMap as mc.types.assocarray)
'    ? " APPLYING STATE MAP " ; formatJson(renderStateMap)
      for each id in renderStateMap
        comp = m.components[id.toInt()]

        if comp <> invalid and comp.renderState <> renderStateMap[id]
          comp.renderState = renderStateMap[id]
          if comp.renderState = "rendered"
            m.renderedComponents.push(comp)
          end if
          comp.isRendered = comp.renderState = "rendered"
    '      ? " set comp.isRendered "; comp.isRendered
        else
    '      ? "ERROR could not find visible comp for "; id
        end if
      end for

    end function

    override function getFocusSettings()
      return m.content.focusSettings
    end function

    ' @params{ml_RowSettings} settings for the current row
    private function calculateRowHeight(settings as mc.types.node) as integer
      height = 300
      if settings = invalid
        return height
      end if

      if settings.height <> -1
        height = settings.height
      else if settings.cellSettings <> invalid
        height = settings.cellSettings.size[1]
      end if

      if settings.headerSettings.position <> "none"
        height += settings.headerSettings.height
      end if
      return height
    end function

    private function calculateGridRowHeight(row as mc.types.node, settings as mc.types.node) as integer
      numItems = row.getChildCount()
      numCols = settings.numColumns
      numCols = numCols < 1 ? 1 : numCols
      numRows = numItems / numCols
      rowHeight = settings.rowHeight
      height = numRows * rowHeight

      if settings.headerSettings.position <> "none"
        height += settings.headerSettings.height
      end if
      return height
    end function
  end class
end namespace