import "pkg:/source/ml/ListItemScroller.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseView.bs"
import "pkg:/source/view/Animation.bs"
#const use_debug_hacks = false

namespace ml
  @node("ml_List", "mv_BaseView")
  class List extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ content
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("onContentChange")
    public content as mc.types.Node
    private _content

    public state = "none"

    public width = 1920
    public height = 1080
    public isHidden = false

    @alwaysnotify
    @observer("onJumpToRowIndexChange")
    public jumpToRowIndex = -1

    @alwaysnotify
    @observer("onJumpToRowItemIndexChange")
    public jumpToRowItemIndex = -1

    @alwaysnotify
    @observer("onAnimateToRowIndexChange")
    public animateToRowIndex = -1

    @alwaysnotify
    @observer("onAnimateToItemIndexChange")
    public animateToItemIndex = -1

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public isScrolling = false

    @alwaysnotify
    @observer("onFocusedRowIndexChange")
    public focusedRowIndex = 0

    @alwaysnotify
    @observer("onFocusedCellIndexChange")
    public focusedCellIndex = 0

    @observer("onFocusedRowPercentChange")
    public focusedRowPercent = 0.0

    public focusedCellPercent = 0.0

    @alwaysnotify
    @observer("onNextFocusIndexChange")
    public nextFocusIndex as mc.types.Array

    @alwaysnotify
    public itemSelected as mc.types.array

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ internal event tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public cellEvents as mc.types.Node
    public rowEvents as mc.types.Node

    @alwaysnotify
    public listEvent as mc.types.Assocarray
    public _focusedRenderer as mc.types.Node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and internal state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager as ml.ListItemViewManager
    private focusManager as ml.ItemFocusManager
    private itemScroller as ml.ListItemScroller
    private sourceFocusRect as object
    private targetFocusRect as object
    private isInitialized = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private contentGroup
    private rowsGroup
    private focusPoint

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ focusIndicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusIndicator
    private isIndicatorHidden = true
    private flowFocusDelegate
    private focusPointAnim
    private dummyFocusView
    private dummyFocusAnim
    private activeFocusSettings
    private rowHasIndicator = true
    private isFocusSettingsChangePending = false

    function new()
      super("mv_List")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.createAnims()
      m.initManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    private function createViews()
      'TODO - might still end up needing this... depends on how floating focus lands
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.rowsGroup = m.createSGNode("Group", m.contentGroup, "rowsGroup")
      m.focusIndicator = m.createSGNode("mv_Poster", m.top, "focusIndicator", {
        blendColor: "#ffffff"
        uri: "pkg:/images/input-focusrect.9.png"
        visible: false
      })
      m.focusPoint = m.createSGNode("mv_Rectangle", m.top, "focusPoint", {
        color: "#ff0000"
        size: [20, 20]
        visible: false
      })
      m.dummyFocusView = m.createSGNode("mv_Rectangle", m.top, "focusPoint", {
        color: "#00ff00"
        size: [20, 20]
        visible: false
      })
    end function

    private function createAnims()
      m.focusPointAnim = new mv.animations.Move(m.focusPoint, 0.2, [0, 0], [0, 0])
      m.focusPointAnim.observeFraction(m.onFlowFocusFractionChange, m)
      m.dummyFocusAnim = new mv.animations.Size(m.dummyFocusView, 0.5, [0, 0], [0, 0])
      ' m.dummyFocusAnim.observeFraction(m.updateFocusIndicatorForFraction, m)
    end function

    private function initManagers()
      m.cellEvents = m.createEventsBroker("cells")
      m.rowEvents = m.createEventsBroker("rows")
      m.rowsGroup = m.top.findNode("rowsGroup")

      m.viewManager = new ml.ListItemViewManager(m.top, m.rowsGroup, 0, m.height)

      #if use_debug_hacks
        mioc.setInstance("listContainer", m.rowsGroup)
      #end if
      m.itemScroller = new ml.ListItemScroller(m.viewManager)
      m.focusManager = new ml.ItemFocusManager(m.viewManager, m.itemScroller, m.rowEvents)
      m.focusManager.name = "LIST FM"
      m.focusIndicator = m.top.findNode("focusIndicator")
      m.content = invalid
    end function

    private function createEventsBroker(id as string)
      node = createObject("roSGNode", "Node")
      node.id = id
      node.addFields({ "listEvent": {}, "viewportEvents": [] })
      return node
    end function

    private function resetState()
      m.log.info("resetState")
      if m.content <> invalid
        m.applyListSettings(m.content.listSettings)
        m.viewManager.setContent(m.content)
        m.top.clippingrect = [0, 0, m.width, m.height]
      end if
    end function

    private function applyListSettings(settings as mc.types.node)
      if settings <> invalid
        m.viewManager.lookAheadDistance = settings.lookAheadDistance = -1 ? 2147483647 : settings.lookAheadDistance
        m.viewManager.lookBehindDistance = settings.lookBehindDistance = -1 ? 2147483647 : settings.lookBehindDistance
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized and (m._content = invalid or not m._content.isSameNode(m.content))
        m._content = m.content
        m.resetState()
      end if
    end function

    private function onAnimateToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1
        m.itemScroller.moveToIndex(index)
      end if
    end function

    private function onJumpToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1
        m.moveToRow(index, false)
      end if
    end function

    private function onJumpToRowItemIndexChange(index as integer)
      if m.content <> invalid and m.focusedRowIndex <> invalid and m.focusedRowIndex <> -1 and index <> -1
        m.moveToItem([m.focusedRowIndex, index], false)
      end if
    end function

    private function onAnimateToItemIndexChange(index as integer)
      if m.content <> invalid and m.focusedRowIndex <> invalid and m.focusedRowIndex <> -1 and index <> -1
        m.moveToItem([m.focusedRowIndex, index], true)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function forceUpdate()
      m.viewManager.forceUpdateLayout()
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      m.itemScroller.move(0)
    end function

    public function getRowRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public function getCellRenderer(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)

      if row <> invalid
        return row@.getRenderer(cellIndex)
      end if

      return invalid
    end function

    public function getCellScreenRect(rowIndex as integer, cellIndex as integer, rowScreenPos = invalid as integer, cellScreenPos = invalid as integer)
      rowScreenRect = m.viewManager.getScreenRect(rowIndex, rowScreenPos)

      row = m.getRowRenderer(rowIndex)
      if row <> invalid
        rect = row@.getScreenRect(cellIndex, cellScreenPos)
        if rect <> invalid
          ' rect.translation[1] += rowScreenRect.screenPos
        else
          return rowScreenRect
        end if
        return rect
      end if

      return invalid
    end function

    public function getRowScreenRect(rowIndex as integer, screenPos = invalid as integer, direction = 0 as integer)
      return m.viewManager.getScreenRect(rowIndex, screenPos, direction)
    end function

    public function moveToRow(index as integer, animated as boolean)
      if m.content <> invalid
        m.itemScroller.moveToIndex(index, invalid, false)
      end if
    end function

    public function moveToRowItem(index as integer, animated as boolean) as void
      if index = -1
        if m._content <> invalid and index <> -1
          row = m.getRowRenderer(index)
          if row <> invalid
            row@.jumpToItem(index, invalid, animated)
          end if
        end if
      end if
    end function

    public function moveToItem(indices as mc.types.array, animated as boolean)
      if m.content <> invalid
        m.itemScroller.moveToIndex(indices[0], invalid, animated)
        row = m.getRowRenderer(indices[0])
        if row <> invalid
          'if animated we will need to set the focus first, I guess?
          row@.jumpToItem(indices[1], animated)
          m.focusedCellIndex = indices[1]
        end if
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ focus management
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onNextFocusIndexChange(index as mc.types.array) as void
      ' ? "ON NEXT CHANGE" ; index
      m.preprareFocusSettings(index)
    end function

    private function onFocusedRowIndexChange(index as integer)
      ' ? "ON ROW INDEX CHANGE" ; index
      row = m.getRowRenderer(index)
      if row <> invalid
        m.preprareFocusSettings([index, row.focusedCellIndex])
        m.applyFocusSettings(true)
      end if
    end function

    private function onFocusedCellIndexChange(index as integer)
      m.preprareFocusSettings([m.focusedRowIndex, index])
    end function

    private function onFocusedRowPercentChange(value as float)
      ' ? "ROW % " ; value
      if m.isFocusSettingsChangePending and value > 0.75
        m.applyFocusSettings(true)
      end if
    end function

    private function applyFocusSettings(isInPosition as boolean) as void
      focusSettings = m.activeFocusSettings
      if m.targetFocusRect = invalid
        return
      end if

      m.targetFocusRect.indicatorTranslation = [m.targetFocusRect.translation[0] + focusSettings.feedbackOffsets[0], m.targetFocusRect.translation[1] + focusSettings.feedbackOffsets[1]]
      m.targetFocusRect.indicatorSize = [m.targetFocusRect.size[0] + focusSettings.feedbackOffsets[2] - focusSettings.feedbackOffsets[0], m.targetFocusRect.size[1] + focusSettings.feedbackOffsets[3] - focusSettings.feedbackOffsets[1]]

      m.focusIndicator.blendColor = focusSettings.feedbackColor
      m.focusIndicator.uri = focusSettings.feedbackUri

      if isInPosition
        'note - we don't show again until we are in position
        m.focusIndicator.visible = not m.isIndicatorHidden
        m.moveFocusIndicatorToFocusPosition(false)
      else
        m.moveFocusIndicatorToFocusPosition()
      end if
      m.isFocusSettingsChangePending = false
    end function

    private function preprareFocusSettings(index as mc.types.array) as void
      if m.viewManager.isRendering
        return
      end if
      settings = ml.listMixin.getRowSettings(m.content, m.content.getChild(index[0]))
      m.sourceFocusRect = m.targetFocusRect
      m.targetFocusRect = m.getCellScreenRect(index[0], index[1])

      focusSettings = ml.listMixin.getFocusSettings(m.content, m.content.getChild(index[0]))
      m.activeFocusSettings = focusSettings
      if focusSettings.feedbackStyle = "none"
        m.rowHasIndicator = false
        m.focusIndicator.visible = false
      else
        m.rowHasIndicator = true
      end if

      if focusSettings.animStyle = "fixed"
        m.targetFocusRect.translation[0] = settings.contentOffset[0]
      end if
      m.isFocusSettingsChangePending = true
    end function

    private function moveFocusIndicatorToFocusPosition(animated = true as boolean) as void
      if m.targetFocusRect = invalid
        m.log.error("no target focus rect!")
        return
      end if
      if animated
        m.dummyFocusAnim.start()
        m.focusIndicator.translation = m.targetFocusRect.indicatorTranslation
        m.focusIndicator.size = m.targetFocusRect.indicatorSize
      else
        m.focusIndicator.translation = m.targetFocusRect.indicatorTranslation
        m.focusIndicator.size = m.targetFocusRect.indicatorSize
      end if
    end function

    private function updateFocusIndicatorForFraction(fraction as float) as void
      if m.sourceFocusRect = invalid or m.targetFocusRect = invalid
        ? "NO FOCUS RECTS! Ensure m.targetFocusRect and m.sourcefocusR3ct was set!"
        return
      end if

      pointTranslation = m.interpolate(m.sourceFocusRect.translation, m.targetFocusRect.translation, fraction)
      m.focusPoint.translation = pointTranslation
      'this is old code for interpolating the focus indicator.. not using it right now - looks better with instant changing
      'perhaps leave it as a setting in future?


      ' translation = m.interpolate(m.sourceFocusRect.indicatorTranslation, m.targetFocusRect.indicatorTranslation, fraction)
      ' size = m.interpolate(m.sourceFocusRect.indicatorSize, m.targetFocusRect.indicatorSize, fraction)
      ' m.focusIndicator.translation = translation
      ' m.focusIndicator.visible = m.rowHasIndicator and not m.isIndicatorHidden
      ' m.focusIndicator.width = size[0]
      ' m.focusIndicator.height = size[1]
      ' ? "onFocusedRowPercentChange " ; fraction ; " " ; translation[1]; " " ; m.targetFocusRect.translation[1]
    end function

    private function interpolate(a as mc.types.array, b as mc.types.array, fraction as float) as mc.types.array
      if a <> invalid and b <> invalid
        return [a[0] + (b[0] - a[0]) * fraction, a[1] + (b[1] - a[1]) * fraction]
      else
        return [0, 0]
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ flow focus support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function startFlowFocus(scrollingComponent as mc.types.node, source as mc.types.node, target as mc.types.node, speed as float) as void
      if source = invalid or target = invalid
        m.log.error("error in flow focus animation1")
        m.flowFocusDelegate@.onFlowFocusFraction(1)
        return
      end if
      'TODO - finish animation if existing delegate
      m.flowFocusDelegate = scrollingComponent
      m.focusPointAnim.setFromToValue(source.translation, target.translation)
      m.focusPointAnim.animateTo(target.translation, speed / 10)
      m.focusPointAnim.start()
    end function

    public function cancelFlowFocus()
      m.focusPointAnim.pause()
      m.flowFocusDelegate = invalid
    end function

    private function onFlowFocusFractionChange(fraction as float)
      if m.flowFocusDelegate <> invalid
        m.flowFocusDelegate@.onFlowFocusFraction(fraction)
      end if
    end function

    public function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    private currentDirection = 0

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressUp() as boolean
      m.log.verbose("onKeyPressUp")
      if m.itemScroller.index > -1
        ' return m.itemScroller.move(-1)
        return m.itemScroller.moveFromPress(-1)
      else
        return false
      end if
    end function

    private function onKeyPressOk() as boolean
      m.log.verbose("onKeyPressOk")
      m.itemSelected = [m.focusedRowIndex, m.focusedCellIndex]
      m.listEvent = {
        name: "itemSelected"
        index: m.focusedRowIndex
        cellIndex: m.focusedCellIndex
      }

      return true
    end function

    private function onKeyPressDown() as boolean
      m.log.verbose("onKeyPressDown")
      if m.itemScroller.index < m.viewManager.numberOfItems - 1
        return m.itemScroller.moveFromPress(1)
      else
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key as string) as float
      m.log.verbose("getLongPressIntervalForKey", key)
      if (key = "up" and m.itemScroller.index > 0) or (key = "down" and m.itemScroller.index < m.viewManager.numberOfItems - 1)
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.info(">>>>onLongPressStart", key)

      if (key = "up" and m.itemScroller.index > 0) or (key = "down" and m.itemScroller.index < m.viewManager.numberOfItems - 1)
        if key = "up"
          m.log.verbose("long press started on key", key, "going to animate to start of list")
          return m.itemScroller.moveToEnd(-1)
        else
          m.log.verbose("long press started on key", key, "going to animate to end of list")
          return m.itemScroller.moveToEnd(1)
        end if
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      if key = "up" or key = "down"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.finishAnimating()
        return true
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ lifecycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      m.isIndicatorHidden = false
      if isSelfFocused
        m.focusIndicator.visible = m.rowHasIndicator
        row = m.getRowRenderer(m.focusedRowIndex)
        if row <> invalid
          mv.setFocus(row)
        end if
      end if
    end function

    protected override function onLostFocus()
      super.onLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.isIndicatorHidden = true
        m.focusIndicator.visible = false
      end if
    end function

    protected override function onChildLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.isIndicatorHidden = true
        m.focusIndicator.visible = false
      end if
    end function

    protected function onChildGainedFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.isIndicatorHidden = true
        m.focusIndicator.visible = false
      end if
    end function
  end class
end namespace