import "pkg:/source/ml/ListItemScroller.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseView.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/FocusIndicatorConfig.bs"

namespace ml
  @node("ml_List", "mv_BaseView")
  class List extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ content
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'must gbe of type ListContent
    @observer("onContentChange")
    public content as mc.types.node
    private _content

    @alwaysnotify
    public state = "none"

    public width = 1920
    public height = 1080

    @alwaysnotify
    @observer("onIsHiddenChange")
    public isHidden = false

    @alwaysnotify
    @observer("onJumpToRowIndexChange")
    public jumpToRowIndex = -1

    @alwaysnotify
    @observer("onJumpToSubRowIndexChange")
    public jumpToSubRowIndex = -1

    @alwaysnotify
    @observer("onJumpToRowItemIndexChange")
    public jumpToRowItemIndex = -1

    @alwaysnotify
    @observer("onAnimateToRowIndexChange")
    public animateToRowIndex = -1

    @alwaysnotify
    @observer("onAnimateToItemIndexChange")
    public animateToItemIndex = -1

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Debug Flags
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @observer("onUpdateNow")
    public _updateNow = false
    public _forceReloadListWhenPressingOption = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public isScrolling = false
    public screenOffset = 0

    public scrollDirection = 0

    public focusedRowIndex = 0
    public focusedSubRowIndex = 0

    public focusedCellIndex = 0

    public focusedfraction = 0.0

    @alwaysnotify
    public itemSelected as mc.types.array

    public _updatesEnabled = true

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Shared managers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public focusIndicatorManager as mc.types.node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ internal event tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public nextFocusIndex as mc.types.array

    public cellEvents as mc.types.node
    public rowEvents as mc.types.node
    public screenPos = 0
    public nextScreenPos = 0

    @alwaysnotify
    public listEvent as mc.types.Assocarray

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and internal state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager as ml.ListItemViewManager
    private itemScroller as ml.ListItemScroller
    private sourceFocusRect as object
    private targetFocusRect as object
    private isInitialized = false
    private isDoingFlowFocus = false

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private contentGroup as mc.types.node
    private rowsGroup as mc.types.node
    private keyDirections = {
      "left": -1
      "right": 1
      "up": -1
      "down": 1
    }

    function new()
      super("ml_List")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.initManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Private Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function createViews()
      'TODO - might still end up needing this... depends on how floating focus lands
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.rowsGroup = m.createSGNode("Group", m.contentGroup, "rowsGroup")
      m.focusIndicatorManager = m.createSGNode("ml_FocusIndicatorManager", m.top, "focusIndicator", {
        list: m.top
      })

    end function

    private function initManagers()
      m.cellEvents = m.createEventsBroker("cells")
      m.rowEvents = m.createEventsBroker("rows")
      m.rowsGroup = m.top.findNode("rowsGroup")

      m.viewManager = new ml.ListItemViewManager(m.top, m.rowsGroup, 0, m.height, m.global.componentPool)

      m.itemScroller = new ml.ListItemScroller(m.viewManager, m.focusIndicatorManager)
      m.itemScroller.offsetContainer = m.contentGroup
      m.content = invalid
    end function

    private function createEventsBroker(id as string)
      node = createObject("roSGNode", "Node")
      node.id = id
      node.addFields({ "listEvent": {}, "viewportEvents": [] })
      return node
    end function

    private wasFocused = false

    private function resetState()
      m.log.info("resetState")

      m.wasFocused = m.top.isFocused or m.top.isChildFocused
      m.top.visible = false
      if m._content <> invalid
        m.log.info("new content is present")
        m.applyListSettings(m._content.listSettings)
        m.viewManager.setContent(m._content)
        m.top.clippingrect = [0, 0, m.width, m.height]
      else
        m.log.info("content is being set to invalid - resetting view manager")
        m.viewManager.reset()
      end if
      ' m.focusIndicatorManager.isHidden = not m.top.isFocused and not m.top.isChildFocused
      if m.top.state = "rendered"
        m.onListRenderState("rendered")
      else
        m.observeNodeField(m.top, "state", m.onListRenderState, "value", true)
      end if

    end function

    private function onListRenderState(state as string)
      m.log.info("onListRenderState", state)
      if state = "rendered"
        'FIXME: WHAT IS THIS?!
        if m.top.isFocused or m.top.isChildFocused
          m.top.focusIndicatorManager.isHidden = false
        end if
        m.moveToItem([m.focusedRowIndex, m.focusedCellIndex], false)
        m.top.visible = true
      end if
    end function

    private function applyListSettings(settings as mc.types.node)
      if settings <> invalid
        m.viewManager.lookAheadDistance = settings.lookAheadDistance = -1 ? 2147483647 : settings.lookAheadDistance
        m.viewManager.lookBehindDistance = settings.lookBehindDistance = -1 ? 2147483647 : settings.lookBehindDistance
      end if
    end function

    private function updateListContent()
      if m._content <> invalid and m._content.length > 0
        rows = m._content@.getChildren(-1, 0)
        for each row in rows
          if row.changes <> invalid and row.changes.count() > 0
            row@.notifyUpdate()
          end if
        end for
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onContentChange() as void
      m.log.info("onContentChange")

      if m.content = invalid
        ? " SETTING INVALID - RESETTING"
        m.content = ml.listMixin.createListContent()
        m.content.id = "invalidContent"
        m.cleanup()
        return
      end if

      if m.isInitialized
        if m._content <> invalid and not m._content.isSameNode(m.content)
          m.unobserveNodeField(m._content, "changes", m.onContentItemsChange)
        end if
        if m._content = invalid or not m._content.isSameNode(m.content)
          m._content = m.content
          if m._content <> invalid
            m.observeNodeField(m._content, "changes", m.onContentItemsChange)
          end if
          m.resetState()
        else
          ' m.log.info("current content has changed in some untracked way!")
          'TODO check case where the content items mc_Array changes entirely
        end if
      end if
    end function

    private function cleanup()
      ? " CLEANING UP LIST"
      m.viewManager.reset()
      m.focusIndicatorManager@.setNextFocusIndicatorConfig(invalid)
    end function

    private function onContentItemsChange(changes as mc.types.array)
      if m._updatesEnabled
        ? " WHY CHANGE "; formatJson(changes)
        m.log.info("The content items have changed")
        m.focusIndicatorManager@.cancelFlowFocus()
        m.viewManager.onContentItemsChange(changes)
        m.focusIndicatorManager@.cancelFlowFocus()
        m.viewManager.isScrolling = false
        m.itemScroller.isDoingFlowFocus = false
        ' ? " LIST CHANGES "
        ' m.viewManager.forceUpdateLayout()

        'TODO - need to ensure that the current focus and scroll position is valid after an update!
        ' m.itemScroller.move(0)
        ' m.viewManager.onContentItemsChange(changes)
      end if
    end function

    private function onAnimateToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.moveToContentIndex(index)
      end if
    end function

    private preHiddenContent as mc.types.node

    private function onIsHiddenChange()
      m.itemScroller.notifyViewportEvents(m.itemScroller.direction)
    end function

    private function onJumpToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        'hack here
        m.focusedRowIndex = index
        m.moveToRow(index, false)
      end if
    end function

    private function onJumpToSubRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        'hack here
        m.focusedRowIndex = index
        m.moveToSubRowIndex(index, false, index, true)
      end if
    end function

    private function onAnimateToSubRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.moveToIndex(index, true, false)
        ' m.itemScroller.forceFocusOnIndex(m.focusedRowIndex, true)
      end if
    end function

    private function onJumpToRowItemIndexChange(index as integer)
      if m.content <> invalid and index <> -1
        m.moveToRowItem(m.focusedRowIndex, index, false)
      end if
    end function

    private function onAnimateToItemIndexChange(index as integer)
      if m.content <> invalid and index <> -1
        m.moveToRowItem(m.focusedRowIndex, index, true)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Public Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onUpdateNow()
      m.log.info("force updating list")
      m.forceUpdate(true)
    end function

    public function forceUpdate(fullUpdate = false as boolean) as void
      ' cellInfo = m.itemScroller.getCellInfoForContentIndex(m.focusedRowIndex)
      if m.top.state = "rendering"
        ? "cannot forceUpdate list while rendering is taking place"
        return
      end if

      ? m.focusedRowIndex ; " " m.focusedCellIndex
      ? " NC " ; m.viewManager.numberOfItems ; " I " ; m.itemScroller.index
      m.viewManager.forceUpdateLayout(fullUpdate = true)
      m.viewManager.recalculateCellInfos(true)
      'Note - this will result in a double call; but that's what it's gonna take to be sure things are okay
      m.itemScroller.notifyViewportEvents(m.itemScroller.direction, true)

      ' ? " NC " ; m.viewManager.numberOfItems ; " I " ; m.itemScroller.index
      if m.viewManager.numberOfItems > 0
        ? "LIST HAS COMPONENTS " m.focusedRowIndex " " m.focusedCellIndex
        ' m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)
        m.moveToRowItem(0, 0, true)
        m.moveToItem([m.focusedRowIndex, m.focusedCellIndex], false)
        'correct the focus if the item has changed.

        ' if m.itemScroller.index >= m.viewManager.numberOfItems
        '   index = mc.clamp(m.itemScroller.index, 0, m.viewManager.numberOfItems - 1)
        '   if index >= 0
        '    ' ? "CORRECTING INDEX"; index
        '     m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)
        '   end if
        ' else
        '   ? "MOVING TO ROW "; m.itemScroller.index
        ' m.moveToRow(m.itemScroller.index, false)
        '   ' m.focusIndicatorManager@.setFocusComplete()
        ' end if
      else
        ? "LIST HAS NO COMPONENTS "
        'TODO - hide focus
      end if

      ? "FORCE UPDATE " ; m.focusedRowIndex ; " CELL " ; m.focusedCellIndex
      ' m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)
      ' m.moveToRowItem(0, 0, true)
    end function

    public function getRow(index as integer) as dynamic
      return m.content@.getChild(index)
    end function

    public function getItem(rowIndex as integer, index as integer) as dynamic
      rowItem = m.content@.getChild(rowIndex)
      if rowItem <> invalid
        return rowItem@.getChild(index)
      end if
      return invalid
    end function

    public function moveToRow(index as integer, animated as boolean)
      if m.content <> invalid
        m.itemScroller.moveToContentIndex(index, animated = true, false)
        ' m.itemScroller.forceFocusOnIndex(index, true)
      end if
    end function

    public function moveToRowItem(rowIndex as integer, index as integer, animated as boolean) as void
      if m._content <> invalid and rowIndex <> -1 and index <> -1
        row = m.getRowRenderer(rowIndex)
        if row <> invalid and row.subType() = "ml_GridRow"
          rowInfo = m.viewManager.getCellInfoForContentIndex(rowIndex)
          if rowInfo <> invalid
            ' ? " ROW INFO FOR INDEX " ; rowInfo
            rect = row@.getRect(index)
            ' ? " RECT INFO FOR INDEX " ; rect
            m.moveToSubRowIndex(rowInfo.index + rect.subRowIndex, animated = true, false, true)
          end if
          row@.jumpToItem(index, animated = true)
        end if
      end if
    end function

    public function moveToItem(indices as mc.types.array, animated = false as boolean)
      if m.content <> invalid
        m.moveToRow(indices[0], animated = true)
        row = m.getRowRenderer(indices[0])
        if row <> invalid
          m.moveToRowItem(indices[0], indices[1], animated = true)
          ' m.focusIndicatorManager.focusedCellIndex = indices[1]
          ' m.focusIndicatorManager@.setNextIndex(indices, 0)
        end if
      end if
    end function

    public function moveToSubRowIndex(index as integer, animated as boolean, setFocusIndex as boolean, useGridHack as boolean)
      if m.content <> invalid and index <> -1 'and index <> m.focusedRowIndex
        m.itemScroller.disableNonAnimatedFocusUpdates = useGridHack
        m.itemScroller.moveToIndex(index, animated = true)
        m.itemScroller.disableNonAnimatedFocusUpdates = false
        ' ? " MOVING TO SUB ROW INDEX " ; index
        compInfo = m.viewManager.cellInfos[index]
        if setFocusIndex and compInfo <> invalid
          compInfo.component.focusedCellIndex = index
          m.focusedCellIndex = compInfo.component.focusedCellIndex
        end if
        ' m.itemScroller.forceFocusOnIndex(m.focusedRowIndex, true)
        ' ? "DONE"
      end if
    end function

    public function setUpdatesEnabled(enabled as boolean)
      m._updatesEnabled = enabled
      if enabled
        m.updateListContent()
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Renderer Helpers
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function getRowRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public function getCellRenderer(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)

      if row <> invalid
        return row@.getRenderer(cellIndex)
      end if

      return invalid
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Internal api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function _onContentItemChange(changes as mc.types.array)
      ' ? "______________________________ _onContentItemChange" ; m.__classname
      ' ? "GOT CHANGES" ; formatJson(mc.collections.map(changes, function(c as mc.types.assocarray)
      '   return c.type
      ' end function))
      m.viewManager.forceUpdateLayout()
      m.viewManager.recalculateCellInfos(true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      m.itemScroller.processChanges(changes)
      '// cspell:disable-next-line
      ' ? "OCIC: INDEX " ; m.itemScroller.index ; "RI"; m.focusedRowIndex
      ' m.moveToRow(m.itemScroller.index, false)
      ' ? " contents changed - moving to row " ; m.focusedRowIndex ; " " ; m.focusedCellIndex
      ' m.moveToRowItem(m.focusedRowIndex, m.focusedCellIndex, false)

      if m.top.isChildFocused or m.top.isFocused
        m.focusIndicatorManager@.setFocusedOnRow(true)
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus indicator callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Movement Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function canMoveFromKeyPress(key as string) as boolean
      ? "LIST canMoveFromKeyPress: " key
      direction = m.keyDirections[key]

      if key = "up" or key = "down"
        return m.itemScroller.canMoveInDirection(direction)
      else if key = "left" or key = "right"
        row = m.getFocusedRow()
        if row <> invalid
          ? " ASKING ROW"
          return row@.canMoveInDirection(direction)
        end if
      end if
      return false
    end function

    private function getFocusedRow()
      return m.itemScroller.cellInfo.component
    end function

    private function onRowKeyPress(key as string) as boolean
      m.log.info("key", key)
      m.itemScroller.isDoingLongPress = false

      if m.isAlreadyScrolling(false)
        return true
      end if

      if m.canMoveFromKeyPress(key)
        ? " can move"
        direction = m.keyDirections[key]
        m.isDoingFlowFocus = false
        return m.getFocusedRow()@.moveFromPress(direction, false)
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressLeft() as boolean
      return m.onRowKeyPress("left")
    end function

    private function onKeyPressRight() as boolean
      return m.onRowKeyPress("right")
    end function

    private function canScroll(key as string) as boolean
      if key = "up" or key = "down"
        if m.isAlreadyScrolling(key = "up" or key = "down")
          return false
        end if
      else
        direction = m.keyDirections[key]
        return m.getFocusedRow()@.canMoveInDirection(direction)
      end if
      return true
    end function

    private function isAlreadyScrolling(isUpDown as boolean) as boolean
      ' ? "VIEW MANAGER IS SCROLLING", m.viewManager.isScrolling ; " Doing FF " ; m.isDoingFlowFocus
      return m.viewManager.isScrolling or (isUpDown and m.isDoingFlowFocus)
    end function

    private function onKeyPressOptions() as boolean
      m.log.info("updating list")

      if m._forceReloadListWhenPressingOption
        m.forceUpdate(true)
        return true
      end if

      return false
    end function

    private function onKeyPressUp() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressUp")

      'FIXME - add ability to change of direction, mid-animation
      ' isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus
      ' if isScrolling
      '   m.log.info("was already scrolling - ignoring")
      '   ? " CANNOT SCROLL is already scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
      '   'TODO - improve this
      '   ' if m.focusIndicatorManager.isDoingFlowFocus
      '   '   return true
      '   ' end if
      '   m.itemScroller.move(1, false, true, true)

      '   return true
      ' end if

      if m.itemScroller.canMoveInDirection(-1)
        result = m.itemScroller.moveFromPress(-1, false)
        return result
      else
        return false
      end if
    end function

    private function onKeyPressOk() as boolean
      if not m.top.visible
        return false
      end if
      'FIXME - add ability to change of direction, mid-animation
      isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus or m.isScrolling
      if isScrolling
        m.log.info("Cannot select while scrolling")
        ' ? " CANNOT select while view is scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
        'TODO - improve this
        return true
      end if

      m.log.verbose("onKeyPressOk")
      m.itemSelected = [m.focusedRowIndex, m.focusedCellIndex]
      m.listEvent = {
        name: "itemSelected"
        index: m.focusedRowIndex
        cellIndex: m.focusedCellIndex
      }

      return true
    end function

    private function onKeyPressDown() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressDown")

      'FIXME - add ability to change of direction, mid-animation
      ' isScrolling = m.viewManager.isScrolling or m.focusIndicatorManager.isDoingFlowFocus
      ' ' if m.itemScroller.direction = 1 and isScrolling
      ' if isScrolling
      '   ' if false and isScrolling
      '   ? " CANNOT SCROLL is already scrolling "; m.viewManager.isScrolling ; " FF " ; m.focusIndicatorManager.isDoingFlowFocus
      '   m.log.info("was already scrolling - ignoring")
      '   if m.focusIndicatorManager.isDoingFlowFocus
      '     return true
      '   end if
      ' end if

      if m.itemScroller.canMoveInDirection(1)
        ' if false and isScrolling
        '   m.itemScroller.cancelScrollingDuringPress()
        ' end if

        return not m.itemScroller.moveFromPress(1, false)
      else
        ? " SKIPPING DOWN"
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key as string) as float
      if not m.top.visible
        return 0
      end if
      m.log.verbose("getLongPressIntervalForKey", key)

      if m.canMoveFromKeyPress(key)
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.info(">>>>onLongPressStart", key)

      if m.canMoveFromKeyPress(key)
        direction = m.keyDirections[key]
        if key = "up" or key = "down"
          if m.itemScroller.canMoveInDirection(direction)
            m.log.verbose("long press started on key", key, "going to animate to start of list")
            return m.itemScroller.moveToEnd(direction)
          else
            m.log.verbose("long press started on key", key, "going to animate to end of list")
            return m.itemScroller.moveToEnd(1)
          end if
        else if key = "left" or key = "right"
          return m.getFocusedRow()@.moveFromPress(direction, true)
        end if
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      ' ? " ON LONG PRESS FINISH - LIST "; key
      if key = "up" or key = "down"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.cancelScrolling()
        return true
      else if key = "left" or key = "right"
        m.getFocusedRow()@.cancelMove()
        return true
      end if

      return false
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Lifecycle Methods
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      m.focusIndicatorManager.isHidden = false
      if isSelfFocused
        m.focusIndicatorManager@.setFocusedOnRow(true)
      end if
    end function

    protected override function onLostFocus()
      super.onLostFocus()
      ' ? " LIST LOST FOCUS"
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.focusIndicatorManager.isHidden = true
        m.focusIndicatorManager@.setFocusedOnRow(false)
      end if
    end function

    protected override function onChildLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.focusIndicatorManager.isHidden = true
        m.focusIndicatorManager@.setFocusedOnRow(false)
      end if
    end function

    protected function onChildGainedFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.focusIndicatorManager.isHidden = true
        m.focusIndicatorManager@.setFocusedOnRow(false)
      end if
    end function
  end class
end namespace
