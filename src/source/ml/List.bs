import "pkg:/source/ml/ListItemScroller.bs"
import "pkg:/source/ml/ListItemViewManager.bs"
import "pkg:/source/ml/ItemFocusManager.bs"
import "pkg:/source/core/Tasks.bs"
import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseView.bs"
import "pkg:/source/view/Animation.bs"
import "pkg:/source/ml/FocusRect.bs"

#const use_debug_hacks = false

namespace ml
  @node("ml_List", "mv_BaseView")
  class List extends mv.BaseView

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ content
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    'must gbe of type ListContent
    @observer("onContentChange")
    public content as mc.types.Node
    private _content

    public state = "none"

    public width = 1920
    public height = 1080
    public isHidden = false

    @alwaysnotify
    @observer("onJumpToRowIndexChange")
    public jumpToRowIndex = -1

    @alwaysnotify
    @observer("onJumpToRowItemIndexChange")
    public jumpToRowItemIndex = -1

    @alwaysnotify
    @observer("onAnimateToRowIndexChange")
    public animateToRowIndex = -1

    @alwaysnotify
    @observer("onAnimateToItemIndexChange")
    public animateToItemIndex = -1

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    public isScrolling = false

    @alwaysnotify
    @observer("onFocusedRowIndexChange")
    public focusedRowIndex = 0

    @alwaysnotify
    @observer("onFocusedCellIndexChange")
    public focusedCellIndex = 0

    @observer("onFocusedRowPercentChange")
    public focusedRowPercent = 0.0

    @observer("onFocusedCellPercentChange")
    public focusedCellPercent = 0.0

    @alwaysnotify
    @observer("onNextFocusIndexChange")
    public nextFocusIndex as mc.types.Array

    @alwaysnotify
    public itemSelected as mc.types.array

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ internal event tracking
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public cellEvents as mc.types.Node
    public rowEvents as mc.types.Node
    public focusScreenPosition = [0, 0]

    @alwaysnotify
    public listEvent as mc.types.Assocarray
    public _focusedRenderer as mc.types.Node

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ managers and internal state
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private viewManager as ml.ListItemViewManager
    private focusManager as ml.ItemFocusManager
    private itemScroller as ml.ListItemScroller
    private sourceFocusRect as object
    private targetFocusRect as object
    private isInitialized = false
    private activeMultiRow as mc.types.node
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ views
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private contentGroup
    private rowsGroup
    private focusPoint

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ focusIndicator
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private focusIndicator
    private isIndicatorHidden = true
    private isIndicatorOnTop = true
    private flowFocusDelegate
    private isDoingFlowFocus = false
    private focusPointAnim
    private dummyFocusView
    private dummyFocusAnim
    private activeFocusSettings
    private previousFocusSettings
    private rowHasIndicator = true
    private isFocusSettingsChangePending = false
    private minFocusChangeFraction = 0.5
    function new()
      super("ml_List")
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ initialization
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    protected override function initialize()
      super.initialize()
      m.createViews()
      m.createAnims()
      m.initManagers()
      m.isInitialized = true
      m.onContentChange()
    end function

    private function createViews()
      'TODO - might still end up needing this... depends on how floating focus lands
      m.contentGroup = m.createSGNode("Group", m.top, "contentGroup")
      m.rowsGroup = m.createSGNode("Group", m.contentGroup, "rowsGroup")
      m.focusIndicator = m.createSGNode("mv_Poster", m.top, "focusIndicator", {
        blendColor: "#ffffff"
        uri: "pkg:/images/input-focusrect.9.png"
        visible: false
      })
      m.focusPoint = m.createSGNode("mv_Rectangle", m.top, "focusPoint", {
        color: "#ff0000"
        size: [20, 20]
        visible: false
      })
      m.dummyFocusView = m.createSGNode("mv_Rectangle", m.top, "focusPoint", {
        color: "#00ff00"
        size: [20, 20]
        visible: false
      })
    end function

    private function createAnims()
      m.focusPointAnim = new mv.animations.Move(m.focusPoint, 0.2, [0, 0], [0, 0])
      m.focusPointAnim.observeFraction(m.onFlowFocusFractionChange, m)
      m.dummyFocusAnim = new mv.animations.Size(m.dummyFocusView, 0.5, [0, 0], [0, 0])
      ' m.dummyFocusAnim.observeFraction(m.updateFocusIndicatorForFraction, m)
    end function

    private function initManagers()
      m.cellEvents = m.createEventsBroker("cells")
      m.rowEvents = m.createEventsBroker("rows")
      m.rowsGroup = m.top.findNode("rowsGroup")

      m.viewManager = new ml.ListItemViewManager(m.top, m.rowsGroup, 0, m.height, m.global.componentPool)

      #if use_debug_hacks
        mioc.setInstance("listContainer", m.rowsGroup)
      #end if
      m.itemScroller = new ml.ListItemScroller(m.viewManager)
      m.focusManager = new ml.ItemFocusManager(m.viewManager, m.itemScroller, m.rowEvents)
      m.focusManager.name = "LIST FM"
      m.focusIndicator = m.top.findNode("focusIndicator")
      m.content = invalid
    end function

    private function createEventsBroker(id as string)
      node = createObject("roSGNode", "Node")
      node.id = id
      node.addFields({ "listEvent": {}, "viewportEvents": [] })
      return node
    end function

    private function resetState()
      m.log.info("resetState")

      if m._content <> invalid
        m.log.info("new content is present")
        m.applyListSettings(m._content.listSettings)
        m.viewManager.setContent(m._content)
        m.top.clippingrect = [0, 0, m.width, m.height]
      else
        m.log.info("content is being set to invalid - resetting view manager")
        m.viewManager.reset()
      end if
    end function

    private function applyListSettings(settings as mc.types.node)
      if settings <> invalid
        m.viewManager.lookAheadDistance = settings.lookAheadDistance = -1 ? 2147483647 : settings.lookAheadDistance
        m.viewManager.lookBehindDistance = settings.lookBehindDistance = -1 ? 2147483647 : settings.lookBehindDistance
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onContentChange()
      m.log.info("onContentChange")
      if m.isInitialized
        if m._content <> invalid and not m._content.isSameNode(m.content)
          m.unobserveNodeField(m._content, "changes", m.onContentItemsChange)
        end if
        if m._content = invalid or not m._content.isSameNode(m.content)
          m._content = m.content
          if m._content <> invalid
            m.observeNodeField(m._content, "changes", m.onContentItemsChange)
          end if
          m.resetState()
        else
          ' m.log.info("current content has changed in some untracked way!")
          'TODO check case where the content items mc_Array changes entirely
        end if
      end if
    end function

    private function onContentItemsChange(changes as mc.types.array)
      m.log.info("The content items have changed")
      m.viewManager.onContentItemsChange(changes)
      ' m.viewManager.forceUpdateLayout()
      ' m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      ' m.itemScroller.move(0)
      ' m.viewManager.onContentItemsChange(changes)
    end function

    private function onAnimateToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 and index <> m.focusedRowIndex
        m.itemScroller.moveToIndex(index)
      end if
    end function

    private function onJumpToRowIndexChange(index as integer)
      if m.content <> invalid and index <> -1 and index <> m.focusedRowIndex
        m.moveToRow(index, false)
      end if
    end function

    private function onJumpToRowItemIndexChange(index as integer)
      m.moveToRowItem(m.focusedRowIndex, index, false)
    end function

    private function onAnimateToItemIndexChange(index as integer)
      m.moveToRowItem(m.focusedRowIndex, index, true)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ public api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function forceUpdate()
      m.viewManager.forceUpdateLayout()
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      m.itemScroller.move(0)
    end function

    public function getRow(index as integer) as dynamic
      return m.content.getChild(index)
    end function

    public function getItem(rowIndex as integer, index as integer) as dynamic
      rowItem = m.content.getChild(rowIndex)
      if rowItem <> invalid
        return rowItem.getChild(index)
      end if
      return invalid
    end function

    public function getRowRenderer(index as integer)
      return m.viewManager.getRenderer(index)
    end function

    public function getCellRenderer(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)

      if row <> invalid
        return row@.getRenderer(cellIndex)
      end if

      return invalid
    end function

    public function getCellScreenRect(rowIndex as integer, cellIndex as integer, direction = 1 as integer, rowScreenPos = invalid as integer, cellScreenPos = invalid as integer)

      rowScreenRect = m.getRowScreenRect(rowIndex, rowScreenPos, direction)

      row = m.getRowRenderer(rowIndex)
      if row <> invalid
        rect = row@.getScreenRect(cellIndex, cellScreenPos, direction)
        if rect = invalid
          ' ? " NO SCREEN RECT FOR "; cellIndex
          return rowScreenRect
        end if
        return rect
      else
        ' ? "NO ROW FOR index "; rowIndex
      end if

      return invalid
    end function

    'when we know we are doing a floating rect, we can just get the cell position
    public function getOnScreenCellRect(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)
      size = row@.getItemSize(cellIndex)
      return m.convertBoundToScreenRect(cellIndex, m.getCellRenderer(rowIndex, cellIndex), size)
    end function

    public function isCellOnScreen(rowIndex as integer, cellIndex as integer)
      row = m.getRowRenderer(rowIndex)
      if row <> invalid
        size = row@.getItemSize(cellIndex)
        rect = m.convertBoundToScreenRect(cellIndex, m.getCellRenderer(rowIndex, cellIndex), size)
        return rect <> invalid and rect.translation[1] > 0 and rect.translation[1] + size[1] < m.height
      else
        return false
      end if

    end function


    'when we know we are doing a floating rect, we can just get the cell position
    public function getOnScreenRowRect(rowIndex as integer)
      rowSettings = ml.listMixin.getRowSettings(m.content, rowIndex)
      return m.convertBoundToScreenRect(rowIndex, m.getRowRenderer(rowIndex), [m.width, rowSettings.height])
    end function

    private function convertBoundToScreenRect(index as integer, cell as mc.types.node, size as mc.types.array)
      if cell <> invalid and size <> invalid
        'bs:disable-next-line
        bounds = cell.sceneBoundingRect()
        return {
          size: size
          translation: [bounds.x, bounds.y]
          index: index
          screenPos: 0
        }
      else
        return invalid
      end if
    end function

    public function getRowScreenRect(rowIndex as integer, screenPos = invalid as integer, direction = 0 as integer)
      return m.viewManager.getScreenRect(rowIndex, screenPos, direction)
    end function

    public function moveToRow(index as integer, animated as boolean)
      if m.content <> invalid
        validIndex = m.itemScroller.getValidTargetIndex(index, m.itemScroller.direction)
        m.itemScroller.moveToIndex(validIndex, animated, false)
      end if
    end function

    public function moveToRowItem(rowIndex as integer, index as integer, animated as boolean) as void
      if m._content <> invalid and rowIndex <> -1 and index <> -1
        row = m.getRowRenderer(rowIndex)
        if row <> invalid
          row@.jumpToItem(index, animated)
        end if
      end if
    end function

    public function moveToItem(indices as mc.types.array, animated as boolean)
      if m.content <> invalid
        m.moveToRow(indices[0], animated)
        row = m.getRowRenderer(indices[0])
        if row <> invalid
          'if animated we will need to set the focus first, I guess?
          row@.jumpToItem(indices[1], animated)
          m.focusedCellIndex = indices[1]
        end if
      end if
    end function

    public function onFlowFocusFraction(fraction as float)
      m.itemScroller.onFlowFocusFraction(fraction)
    end function

    public function moveToSubRowIndex(index as integer, subIndex as integer, direction as integer, animated = true as boolean, fast = false as boolean) as boolean
      row = m.viewManager.visibleComponents[index]
      if row <> invalid and row.isMultiRow
        subRowIndex = row@.getRowForIndex(subIndex)
        ' ? "SUB INDEX "; subIndex ; " results in row " ; subRowIndex
        return m.itemScroller.moveToSubRowAtSpecificIndex(index, subRowIndex, subIndex, direction, animated, fast)
      else
        return false
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Internal api
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function _onContentItemChange(changes as mc.types.array)
      ' ? "GOT CHANGES" ; formatJson(mc.collections.map(changes, function(c as mc.types.assocarray)
      '   return c.type
      ' end function))
      m.viewManager.forceUpdateLayout()
      m.viewManager.updateRenderedComponents(m.itemScroller.direction, m.itemScroller.index, true)

      'TODO - need to ensure that the current focus and scroll position is valid after an update!
      m.itemScroller.processChanges(changes)
      ' ? "OCIC: INDEX " ; m.itemScroller.index ; "RI"; m.focusedRowIndex
      m.moveToRow(m.itemScroller.index, false)

      if m.top.isChildFocused or m.top.isFocused
        m.focusOnCurrentRow()
      end if
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ focus index callbacks
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onNextFocusIndexChange(index as mc.types.array) as void
      ' ? "ON NEXT CHANGE" ; index
      m.preprareFocusSettings([m.focusedRowIndex, m.focusedCellIndex], index)
    end function

    private function onFocusedRowIndexChange(index as integer)
      ' ? "ON ROW INDEX CHANGE" ; index ; m.focusedRowIndex
      row = m.getRowRenderer(index)
      if row <> invalid
        if row.isMultiRow
          m.activeMultiRow = row
        else
          m.activeMultiRow = invalid
        end if
        m.preprareFocusSettings([index, row.focusedCellIndex], [index, row.focusedCellIndex])
        m.applyFocusSettings(m.activeFocusSettings, true)
        m.moveFocusIndicatorToTargetPosition(1)
      else
        m.activeMultiRow = invalid
      end if
    end function

    private function onFocusedCellIndexChange(index as integer)
      m.preprareFocusSettings([m.focusedRowIndex, index], [m.focusedRowIndex, index])
    end function

    private function onFocusedCellPercentChange(fraction as float) as void
      ' ? "onFocusedCellPercentChange" ; fraction ; formatJson (m.nextFocusIndex) ; " "; m.isDoingFlowFocus
      if not m.isDoingFlowFocus and m.activeMultiRow <> invalid
        ' ? " applying pending focus settings to active multi row"
        m.applyFocusSettings(m.activeFocusSettings, true)
        m.moveFocusIndicatorToTargetPosition(fraction)
      end if
    end function

    private function onFocusedRowPercentChange(fraction as float) as void
      ' ? "ON ROW PERCENT CHANGE" ; fraction " " ; m.focusedRowIndex ; " "; m.isDoingFlowFocus
      if m.isDoingFlowFocus
        'flow focus callbacks will handle this
        return
      end if

      if fraction = 1
        m.applyFocusSettings(m.activeFocusSettings, true)
      else if m.isFocusSettingsChangePending and fraction > m.minFocusChangeFraction
        m.applyFocusSettings(m.activeFocusSettings, false)
      end if


      m.moveFocusIndicatorToTargetPosition(fraction)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Focus settings Managements
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function getFocusRect(index as mc.types.array, isFloating = false as boolean)
      isHidden = mc.getPath(m.content.getChild(index[0]), "content.isHidden", false)

      focusSettings = ml.listMixin.getFocusSettings(m.content, m.content.getChild(index[0]))
      if isFloating or m.isCellOnScreen(index[0], index[1])
        screenRect = m.getOnScreenCellRect(index[0], index[1])
      else
        screenRect = m.getCellScreenRect(index[0], index[1], m.itemScroller.direction, invalid, invalid)
      end if
      if screenRect = invalid
        return invalid
      end if

      if focusSettings.horizAnimStyle = "fixed"
        rowSettings = ml.listMixin.getRowSettings(m.content, m.content.getChild(index[0]))
        screenRect.translation[0] = rowSettings.contentOffset[0]
      end if

      indicatorTranslation = [screenRect.translation[0] + focusSettings.feedbackOffsets[0], screenRect.translation[1] + focusSettings.feedbackOffsets[1]]
      indicatorSize = [screenRect.size[0] + focusSettings.feedbackOffsets[2] - focusSettings.feedbackOffsets[0], screenRect.size[1] + focusSettings.feedbackOffsets[3] - focusSettings.feedbackOffsets[1]]

      focusRect = new ml.FocusRect(screenRect.size, screenRect.translation, screenRect.index, screenRect.screenPos, indicatorTranslation, indicatorSize, focusSettings, isHidden)
      return focusRect
    end function


    private function preprareFocusSettings(sourceIndex as mc.types.array, targetIndex as mc.types.array) as void
      if m.viewManager.isRendering or m.content = invalid
        return
      end if
      m.sourceFocusRect = m.getFocusRect(sourceIndex)
      m.targetFocusRect = m.getFocusRect(targetIndex)

      if m.targetFocusRect = invalid
        m.focusIndicator.visible = false
        return
      end if

      m.setActiveFocusSettings(m.targetFocusRect.settings)
      if m.activeFocusSettings = invalid or m.activeFocusSettings.feedbackStyle = "none" or m.targetFocusRect.isHidden
        m.rowHasIndicator = false
        m.focusIndicator.visible = false
      else if m.previousFocusSettings <> invalid and (m.previousFocusSettings.feedbackStyle = "none" or (m.previousFocusSettings.feedbackStyle <> "none" and m.previousFocusSettings.feedbackStyle <> m.activeFocusSettings.feedbackStyle))
        m.focusIndicator.visible = false
      else
        m.rowHasIndicator = true
      end if

      m.isFocusSettingsChangePending = true
    end function

    private function setActiveFocusSettings(newSettings as mc.types.node)
      m.previousFocusSettings = m.activeFocusSettings
      m.activeFocusSettings = newSettings
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ Moving/Applying focus settings
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    ' applies changes that affect the focus indicators appearance, like color, image, vis
    ' @params {node} focusSettings - settings to use when applying
    private function applyFocusSettings(focusSettings as mc.types.node, isFinal as boolean) as void
      if focusSettings = invalid or m.sourceFocusRect = invalid or m.targetFocusRect = invalid
        ' ? " CANNOT APPLY "; focusSettings ; " SFR "; m.sourceFocusRect ; " TFR" ; m.targetFocusRect
        return
      end if
      'note - we don't show the focus indicator till we're in place, if the last row was hidden
      if focusSettings.feedbackStyle = "none" or (not isFinal and (m.previousFocusSettings <> invalid and m.previousFocusSettings.feedbackStyle = "none"))
        m.rowHasIndicator = false
        m.focusIndicator.visible = false
      else
        m.rowHasIndicator = true
        ' ? "APPLY FOCUS SETTINGS VIS"
        if not m.focusIndicator.visible and not m.isIndicatorHidden
          m.sourceFocusRect.indicatorTranslation = m.targetFocusRect.indicatorTranslation
          m.sourceFocusRect.indicatorSize = m.targetFocusRect.indicatorSize
          m.focusIndicator.visible = not m.isIndicatorHidden
        end if

        if m.isIndicatorOnTop and focusSettings.feedbackStyle = "underneath"
          m.top.insertChild(m.focusIndicator, 0)
          m.isIndicatorOnTop = false
        else if not m.isIndicatorHidden and focusSettings.feedbackStyle = "onTop"
          m.top.appendChild(m.focusIndicator)
          m.isIndicatorOnTop = true
        end if
      end if

      m.focusIndicator.blendColor = focusSettings.feedbackColor
      m.focusIndicator.uri = focusSettings.feedbackUri

      m.isFocusSettingsChangePending = false
    end function

    private function moveFocusIndicatorToTargetPosition(fraction as float) as void
      if m.sourceFocusRect = invalid or m.targetFocusRect = invalid
        ' ? "NO FOCUS RECTS! Ensure m.targetFocusRect and m.sourcefocusR3ct was set!"
        return
      end if

      if fraction = 1
        m.focusIndicator.translation = m.targetFocusRect.indicatorTranslation
        m.focusIndicator.size = m.targetFocusRect.indicatorSize
        ' ? "ACTIVE FOCUS POS IS NOW "; formatJson(m.targetFocusRect.indicatorTranslation)

      else
        translation = mc.interpolateArray(m.sourceFocusRect.indicatorTranslation, m.targetFocusRect.indicatorTranslation, fraction)
        size = mc.interpolateArray(m.sourceFocusRect.indicatorSize, m.targetFocusRect.indicatorSize, fraction)
        m.focusIndicator.translation = translation
        m.focusIndicator.size = size
      end if
      ' ? "moveFocusIndicatorToTargetPosition " ; fraction ; " " ; m.targetFocusRect.indicatorTranslation[1]
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ flow focus support
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    public function startFlowFocus(sourceIndex as mc.types.array, targetIndex as mc.types.array, speed as float, delegate as mc.types.node) as void
      m.log.info("starting flow focus from ", sourceIndex[0], sourceIndex[1], "to", targetIndex[0], targetIndex[1])
      ? "START FLOW FOCUS"
      ' if source = invalid or target = invalid
      '   m.log.error("error in flow focus animation")
      '   m.flowFocusDelegate@.onFlowFocusFraction(1)
      '   return
      ' end if
      ' m.preprareFocusSettings([targetIndex[0], targetIndex[1]])

      if sourceIndex[0] = targetIndex[0] and sourceIndex[1] = targetIndex[1]
        ' ? "SAME SKIP"
        return
      end if

      ' ? "START FLOW" ; sourceIndex[0]; sourceIndex[1]; " - "; targetIndex[0]; targetIndex[1]
      m.isDoingFlowFocus = true
      m.itemScroller.isDoingFlowFocus = true
      m.sourceFocusRect = m.getFocusRect(sourceIndex, true)
      m.targetFocusRect = m.getFocusRect(targetIndex, true)
      if m.sourceFocusRect = invalid
        'must have removed this item
        m.sourceFocusRect = m.targetFocusRect
      end if

      if m.targetFocusRect = invalid
        ? "COULD NOT ASCERTAIN RECTS"
        return
      end if

      m.setActiveFocusSettings(m.targetFocusRect.settings)
      m.focusScreenPosition = m.targetFocusRect.indicatorTranslation

      'TODO - finish animation if existing delegate
      'HACK! TODO - ge the correct offset for the list's location
      m.sourceFocusRect.indicatorTranslation[1] = m.sourceFocusRect.indicatorTranslation[1] - m.top.translation[1]
      m.targetFocusRect.indicatorTranslation[1] = m.targetFocusRect.indicatorTranslation[1] - m.top.translation[1]
      m.sourceFocusRect.indicatorTranslation[0] = m.sourceFocusRect.indicatorTranslation[0] - m.top.translation[0]
      m.targetFocusRect.indicatorTranslation[0] = m.targetFocusRect.indicatorTranslation[0] - m.top.translation[0]

      m.flowFocusDelegate = delegate
      ? ">>>> ANIMATE FLOW FOCUS"
      m.focusPointAnim.setFromToValue(m.sourceFocusRect.indicatorTranslation, m.targetFocusRect.indicatorTranslation)
      m.focusPointAnim.animateTo(m.targetFocusRect.indicatorTranslation, speed)
      m.focusPointAnim.start()
    end function


    private function preprareFlowFocusSettings(sourceIndex as mc.types.array, targetIndex as mc.types.array) as void
      if m.viewManager.isRendering or m.content = invalid
        return
      end if
      m.targetFocusRect = m.getFocusRect(targetIndex, true)
      m.sourceFocusRect = m.getFocusRect(sourceIndex, true)

      if m.targetFocusRect = invalid
        m.focusIndicator.visible = false
        return
      end if

      m.setActiveFocusSettings(m.targetFocusRect.settings)

      m.isFocusSettingsChangePending = true
    end function

    public function cancelFlowFocus()
      m.flowFocusDelegate = invalid
      m.isDoingFlowFocus = false
      m.focusPointAnim.pause()
      m.focusPoint.translation = [0, 0]
      m.itemScroller.isDoingFlowFocus = false
    end function

    private function onFlowFocusFractionChange(fraction as float)
      ? "+>+>+>+>+ OFFFC" ; fraction

      if m.flowFocusDelegate <> invalid
        ? "+>+>+>+> AA"
        m.moveFocusIndicatorToTargetPosition(fraction)
        if m.isFocusSettingsChangePending and fraction > m.minFocusChangeFraction
          ? "+>+>+>+> BBB"
          m.applyFocusSettings(m.activeFocusSettings, false)
        end if

        m.flowFocusDelegate@.onFlowFocusFraction(fraction)

        if fraction = 1
          ? "+>+>+>+> CCC"
          m.applyFocusSettings(m.activeFocusSettings, true)
          m.isDoingFlowFocus = false
          m.itemScroller.isDoingFlowFocus = false

          'If we were in a sub-row-index, situation, then we want to keep on moving
          if not m.top.isSameNode(m.flowFocusDelegate)
            ? "FLOW FINISHED I " ; m.itemScroller.__classname ; " > " ; m.itemScroller.index; " > "; m.itemScroller.targetIndex; " " m.itemScroller.subIndex ; " IMM? " ; m.itemScroller.isMovingMultiple; m.itemScroller.isMoveToEnd
            if m.itemScroller.targetIndex <> -1 and (m.itemScroller.isMovingMultiple or m.itemScroller.isMoveToEnd)
              m.itemScroller.continueScrolling()
            end if
          end if
        end if
      else
        m.moveFocusIndicatorToTargetPosition(fraction)
        ? "+>+>+>+> DDD"
        if fraction = 1
          ? "+>+>+>+> DDD"
          ? "FLOW FINISHED I " ; m.itemScroller.__classname ; " > " ; m.itemScroller.index; " > "; m.itemScroller.targetIndex; " " m.itemScroller.subIndex ; " IMM? " ; m.itemScroller.isMovingMultiple; m.itemScroller.isMoveToEnd
          m.applyFocusSettings(m.activeFocusSettings, true)
          m.isDoingFlowFocus = false
          m.itemScroller.isDoingFlowFocus = false
          if m.itemScroller.targetIndex <> -1 and (m.itemScroller.isMovingMultiple or m.itemScroller.isMoveToEnd)
            m.itemScroller.continueScrolling()
          end if
        end if
      end if
    end function


    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ KeyPress
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    private function onKeyPressUp() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressUp")
      if m.itemScroller.direction = -1 and (m.viewManager.isScrolling or m.isDoingFlowFocus)
        m.log.info("was already scrolling - ignoring")
        ' ? " CANNOT SCROLL isSCrolling "; m.viewManager.isScrolling ; " FF " ; m.isDoingFlowFocus
        return false
      end if

      if m.itemScroller.canMove(-1)
        result = m.itemScroller.moveFromPress(-1)
        ' ? " GOING UP" ; result
        return result
      else
        ' ? " CANNOT GO UP"
        return false
      end if
    end function

    private function onKeyPressOk() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressOk")
      m.itemSelected = [m.focusedRowIndex, m.focusedCellIndex]
      m.listEvent = {
        name: "itemSelected"
        index: m.focusedRowIndex
        cellIndex: m.focusedCellIndex
      }

      return true
    end function

    private function onKeyPressDown() as boolean
      if not m.top.visible
        return false
      end if
      m.log.verbose("onKeyPressDown")
      if m.itemScroller.direction = 1 and (m.viewManager.isScrolling or m.isDoingFlowFocus)
        m.log.info("was already scrolling - ignoring")
        return false
      end if

      if m.itemScroller.canMove(1)
        return not m.itemScroller.moveFromPress(1)
      else
        return false
      end if
    end function

    private function getLongPressIntervalForKey(key as string) as float
      if not m.top.visible
        return 0
      end if
      m.log.verbose("getLongPressIntervalForKey", key)
      if (key = "up" and m.itemScroller.canMove(-1)) or (key = "down" and m.itemScroller.canMove(1))
        return 0.2
      else
        return 0
      end if
    end function

    private function onLongPressStart(key as string) as boolean
      m.log.info(">>>>onLongPressStart", key)

      if (key = "up" and m.itemScroller.canMove(-1)) or (key = "down" and m.itemScroller.canMove(1))
        if key = "up"
          m.log.verbose("long press started on key", key, "going to animate to start of list")
          return m.itemScroller.moveToEnd(-1)
        else
          m.log.verbose("long press started on key", key, "going to animate to end of list")
          return m.itemScroller.moveToEnd(1)
        end if
      end if

      return false
    end function

    private function onLongPressFinish(key as string) as boolean
      ? " ON LONG PRESS FINISH "; key
      if key = "up" or key = "down"
        m.log.verbose("long press finished on key", key, "going to animate to final scroll position")
        m.itemScroller.finishAnimating()
        return true
      end if

      return false
    end function

    private function focusOnCurrentRow()
      m.focusIndicator.visible = m.rowHasIndicator and m.activeFocusSettings <> invalid and m.activeFocusSettings.feedbackStyle <> "none"
      '      ? " ON GAINED FOCUS "
      row = m.getRowRenderer(m.focusedRowIndex)
      if row <> invalid
        '  ? " SETTING FOCUS ONTO ROW "
        mv.setFocus(row)
      end if

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    '++ lifecycle
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    protected override function onGainedFocus(isSelfFocused as boolean)
      super.onGainedFocus(isSelfFocused)
      m.isIndicatorHidden = false
      if isSelfFocused
        m.focusOnCurrentRow()
      end if
    end function

    protected override function onLostFocus()
      super.onLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.isIndicatorHidden = true
        m.focusIndicator.visible = false
      end if
    end function

    protected override function onChildLostFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.isIndicatorHidden = true
        m.focusIndicator.visible = false
      end if
    end function

    protected function onChildGainedFocus()
      'bs:disable-next-line
      if not m.top.isChildFocused
        m.isIndicatorHidden = true
        m.focusIndicator.visible = false
      end if
    end function
  end class
end namespace