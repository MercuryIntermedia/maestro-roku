namespace tests
  @suite("Utils Tests")
  class UtilsTests extends tests.BaseTestSuite

    protected override function setup()
      super.setup()
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("getPath")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("gets values that are present")
    @params("v", 1)
    @params("b.v", 2)
    @params("b.c.v", 3)
    function _(path, expected)
      a = {
        v: 1
        b: {
          v: 2
          c: {
            v: 3
          }

        }
      }
      m.assertEqual(mc.getPath(a, path), expected)

    end function

    @it("gets default values")
    @params("v2")
    @params("b.v2")
    @params("b.c.v2")
    function _(path)
      a = {
        v: 1
        b: {
          v: 2
          c: {
            v: 3
          }

        }
      }
      m.assertEqual(mc.getPath(a, path, "default"), "default")

    end function

    @it("gets indexed value for arrays")
    @params("arr.0", "a")
    @params("arr.1", "b")
    @params("arr.2", "c")
    function _(path, expected)
      a = {
        arr: ["a", "b", "c"]
      }
      m.assertEqual(mc.getPath(a, path), expected)

    end function

    @it("disables indexing")
    @params("arr.100", "a")
    @params("arr.200", "b")
    @params("arr.300", "c")
    function _(path, expected)
      a = {
        arr: {
          "100": "a"
          "200": "b"
          "300": "c"
        }
      }
      m.assertEqual(mc.getPath(a, path, invalid, false), expected)

    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("setPath")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("sets values for paths that are present")
    @params("v", 1)
    @params("b.v", 2)
    @params("b.c.v", 3)
    function _(path, value)
      a = {
        b: {
          c: {
          }
        }
      }
      mc.setPath(a, path, value)
      m.assertEqual(mc.getPath(a, path), value)
    end function

    @it("does not crash or set value when using bad values")
    @params("b.a")
    @params("b.c.0")
    @params("b.c.1")
    @params("b.c.2")
    @params("b.c.legal.la")
    @params("b.c.legal.4")
    function _(path)
      a = {
        b: [
          {
          }
        ]
        c: {
          "0": "zero"
          "1": "zero"
          "2": "zero"
          "legal" : [
            "la"
          ]
        }
      }
      mc.setPath(a, path, "v")
      m.assertInvalid(mc.getPath(a, path))
    end function

    @it("sets values with no dotted path")
    @params("v", 1)
    @params("v2", 2)
    @params("v3", 3)
    function _(path, value)
      a = {
        b: {
          c: {
          }
        }
      }
      mc.setPath(a, path, value)
      m.assertEqual(mc.getPath(a, path), value)
    end function

    @it("sets values when not invalid")
    @params("v", 1)
    @params("v2", 2)
    @params("v3", 3)
    function _(path, value)
      a = invalid
      mc.setPath(a, path, value)
      m.assertTrue(true, "should not have crashed")
    end function

    @it("does not insert missing parts if disabled")
    @params("notthere.v", 1)
    @params("b.noththere.v", 2)
    @params("b.c.notthere.v", 3)
    @params("b.arr.2.v", 4)
    function _(path, value)
      a = {
        b: {
          c: {
          }
          arr: [
            "a",
            "b"
          ]
        }
      }
      mc.setPath(a, path, value, false)
      m.assertInvalid(mc.getPath(a, path))
    end function

    @it("inserts aas for missing parts of the chain")
    @params("notthere.v", 1)
    @params("b.noththere.v", 2)
    @params("b.c.notthere.v", 3)
    @params("b.arr.2.v", 4)
    function _(path, value)
      a = {
        b: {
          c: {
          }
          arr: [
            "a",
            "b"
          ]
        }
      }
      mc.setPath(a, path, value)
      m.assertEqual(mc.getPath(a, path), value)
    end function

    @it("sets values on arrays, too")
    @params("b.0", "changed")
    @params("b.1", "changed")
    @params("b.2", "changed")
    @params("b.3.v", "changed")
    @params("b.3.d", "changed")
    @params("b.3.d.0", "changed")
    @params("b.3.d.1", "changed")
    @params("b.3.d.2", "changed")
    function _(path, value)
      a = {
        b: [
          "a",
          "b",
          "c",
          {
            d: [
              "da"
              "db"
              "dc"
            ],
            v: "v"
          }
        ]
      }
      mc.setPath(a, path, value)
      m.assertEqual(mc.getPath(a, path), value)
    end function

    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    @describe("createSGNode")
    '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

    @it("creates node and sets properties on it")
    function _()
      node = mc.createSGNode("ContentNode", invalid, "myId", {
        title: "t"
      })
      m.assertSubType(node, "ContentNode")
      m.assertEqual(node.id, "myId")
      m.assertEqual(node.title, "t")

    end function

    @it("creates node and sets multiple sets of properties on it")
    function _()
      node = mc.createSGNode("ContentNode", invalid, "myId",
      [
        {
          title: "t"
        },
        {
          description: "d"
        }
      ])
      m.assertSubType(node, "ContentNode")
      m.assertEqual(node.id, "myId")
      m.assertEqual(node.title, "t")
      m.assertEqual(node.description, "d")

    end function

    @it("overlays multi sets of fields")
    function _()
      node = mc.createSGNode("ContentNode", invalid, "myId",
      [
        {
          title: "t"
          description: "d"
        },
        {
          title: "t2"
        }
      ])
      m.assertSubType(node, "ContentNode")
      m.assertEqual(node.id, "myId")
      m.assertEqual(node.title, "t2")
      m.assertEqual(node.description, "d")

    end function
  end class
end namespace