import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/ml/ListDelegateMixin.bs"
import "pkg:/source/view/controls/Styles.bs"
import "pkg:/source/core/Utils.bs"

@node("ButtonScreen", "mv_BaseScreen")
class ButtonScreen extends mv.BaseScreen

  private controlsGroup as mc.types.node
  private button1 as mc.types.node
  private button2 as mc.types.node
  private button3 as mc.types.node
  private button4 as mc.types.node
  private button5 as mc.types.node

  function new()
    super("ButtonScreen")
  end function

  protected override function initialize()
    super.initialize()
    redButtonStyle = mv.styles.getDefaultButtonStyle()
    m.setStyleColor(redButtonStyle, "#aa0000", "#ff0000", "#aa0000", "#000000", "#ffffff", "#aaaaaa")

    blueButtonStyle = mv.styles.getDefaultButtonStyle()
    m.setStyleColor(blueButtonStyle, "#0000aa", "#0000ff", "#0000aa", "#000000", "#ffffff", "#0000aa")

    m.controlsGroup = m.createSGNode("mv_ControlsGroup", m.top, "controlsGroup", {
      translation: [200, 200]
      layoutMode: "vert"
      keyDirection: "vert"
      itemSpacings: [10]
    })

    m.button1 = m.createSGNode("mv_Button", m.controlsGroup, "button1", {
      text: "simple"
      style: redButtonStyle
    })

    m.styleManager@.addStyle("buttons", mc.createPath("blue", blueButtonStyle))

    iconStyle = {
      "blendColor": "#ffffff"
      "size": [48, 48]
      "translation": [5, 0]
      uri: "pkg:/images/small-star-$$RES$$.png"
    }

    m.button2 = m.createSGNode("mv_Button", m.controlsGroup, "button1", {
      text: "with icon"
      iconStyle: iconStyle
    })

    m.button3 = m.createSGNode("mv_Button", m.controlsGroup, "button3", {
      text: "autosize text right"
      style: redButtonStyle
      autoSize: true
      horizAlign: "right"
    })
    m.button3.iconStyle = iconStyle

    m.button4 = m.createSGNode("mv_Button", m.controlsGroup, "button4", {
      text: "autosize text that grows left"
      horizAlign: "left"
      autoSize: true
      iconStyle: iconStyle
    })
    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: ""
      size: [50, 50]
      autoSize: true
      horizAlign: "center"
      styleKey: "buttons.blue"
      iconStyle: iconStyle
    })
    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: "autosize really really really really really long text"
      autoSize: true
      horizAlign: "left"
      iconStyle: iconStyle
    })
    m.button5 = m.createSGNode("mv_Button", m.controlsGroup, "button5", {
      text: "short"
      autoSize: true
      size: [50, 50]
      horizAlign: "left"
      iconStyle: iconStyle
    })
    m.controlsGroup@.updateChildren()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function setStyleColor(buttonStyle as mc.types.assocarray, bgn as string, bgf as string, bgs as string, ln as string, lf as string, ls as string)
    mc.setPath(buttonStyle, "normal.backgroundPoster.blendColor", bgn)
    mc.setPath(buttonStyle, "focused.backgroundPoster.blendColor", bgf)
    mc.setPath(buttonStyle, "selected.backgroundPoster.blendColor", bgs)
    mc.setPath(buttonStyle, "normal.label.color", ln)
    mc.setPath(buttonStyle, "focused.label.color", lf)
    mc.setPath(buttonStyle, "selected.label.color", ls)
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onKeyPressBack() as boolean
    if m.top.isRoot <> true
      m.pop()
    end if
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)

    if isSelfFocused
      m.setFocus(m.controlsGroup)
    end if
  end function

end class
