import "pkg:/source/ml/ListMixin.bs"
import "pkg:/source/view/BaseScreen.bs"
import "pkg:/source/ml/ListDelegateMixin.bs"
import "pkg:/source/core/DebugTimer.bs"

@node("FocusOnGridItemScreen", "mv_BaseScreen")
class FocusOnGridItemScreen extends mv.BaseScreen

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Views
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private list as mc.types.node

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Fields
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  public componentPool as mc.types.node
  private contentId = 0
  private rowSettings
  private focusSettings
  private cellSettings
  private loadingIndicator
  private scrollSpeed = 2
  private numberOfRows = 20
  private defaultCellType = "ml_SimpleCell"

  private firstItem = invalid
  private dataIndex = 0
  private selectedRow as mc.types.node
  private selectedRowIndex as integer
  private selectedItemIndex as integer
  private selectedItem as mc.types.node

  private rows = []

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  function new()
    super("FocusOnGridItemScreen")
  end function

  protected override function initialize()
    super.initialize()
    bundle = m.styleManager@.loadBundle("pkg:/source/debug-screens/list/FocusOnGridItemScreen.json")
    m.createViewsFromStyleJson(bundle.views)
    ml.delegateMixin.setListDelegate(m.list)
    m.resetData()
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Callbacks
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Data - Initialization
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function resetData()
    m.cellSettings = ml.listMixin.createCellSettings("SimpleCell", [307, 100], 30)
    m.makeListData()
    m.reload()
  end function

  private function makeListData()
    m.list.content = invalid

    timer = new mc.utils.DebugTimer("list")

    m.rowSettings = ml.listMixin.createRowSettings(m.cellSettings, invalid, 30)

    m.focusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed, "fixed", [-50, -50, 50, 50])
    listSettings = ml.listMixin.createListSettings(-1, -1)
    listSettings.rowCreationStrategy = "async"
    listSettings.rowCreationBatchSize = 5
    listSettings.rowCreationBatchDelay = 0.3

    content = ml.listMixin.createListContent(m.focusSettings, m.rowSettings, listSettings)
    content@.appendChild(m.createHeaderOnlyData())
    m.liveRow = m.createRow("live", 20)
    m.upcomingRow = m.createRow("upcoming", 20)
    content@.appendChild(m.liveRow)
    content@.appendChild(m.upcomingRow)
    timer.log("makeData")
    m.setFocus(m.loadingIndicator)

    m.list.content = content

    timer.log("set content")
    if m.list.state = "rendered"
      m.onListRenderState("rendered")
      m.loadingIndicator.isActive = false
    else
      m.observeNodeField(m.list, "state", m.onListRenderState, "value", true)
    end if
  end function

  private liveRow as mc.types.node
  private upcomingRow as mc.types.node

  private function onListRenderState(state as string)
    m.log.info("onListRenderState", state)
    if state = "rendered"
      m.setFocus(m.list)
      m.list@.moveToItem([0, 0], false)
      m.loadingIndicator.isActive = false
    end if
  end function

  private function createHeaderOnlyData()
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()
    row.settings = ml.listMixin.createCustomRowSettings("ComplexRowEfficient", 300)
    return row
  end function


  private function createRow(title as string, numItems as integer)
    numCols = 4
    row = createObject("roSGNode", "ml_RowContent")
    row.id = rnd(2147483647).toStr()

    m.log.info("is using grids")
    gridFocusSettings = ml.listMixin.createFocusSettings(m.scrollSpeed, "floating", [0, 0, 0, 0])
    row.settings = ml.listMixin.createGridRowSettings(m.cellSettings, gridFocusSettings, 30, invalid, 70, numCols, 100, 5, 50)
    row.firstRowScreenPos = 70
    row.otherRowScreenPos = 70

    row.settings.contentOffset = [100, 30]
    row.title = title
    row@.appendChildren(m.makeItems(m.defaultCellType, numItems, ""))
    return row
  end function

  private function addItems(cellType as string, number as integer)
    row = m.list.content@.getChild(m.list.focusedRowIndex)
    row@.appendChildren(m.makeItems(cellType, number))
  end function

  private function makeItems(cellType as string, number as integer, prefix = "Item" as string)
    items = []
    for i = 0 to number - 1
      items.push(m.makeItem(cellType, `${prefix} ${m.contentId} [${i}]`))
    end for
    return items
  end function

  private function makeItem(cellType as string, title as string) as mc.types.node
    id = str(m.contentId).trim()
    child = m.createSGNode("Item", invalid, id, {
      json: {
        title: title
        description: "some really long " + id + "text in here " + id
        posterUrl: "https://picsum.photos/id/" + str(m.contentId mod 1000).trim() + "/340/340"
      }
    })
    m.contentId++
    return child
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Private Methods
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function reload() as void
    ' m.removeNonHeaderRows(false)
    ' m.rows = [
    '   m.createRow("live", 20)
    '   m.createRow("upcoming", 20)
    '   m.createRow("complete", 20)
    ' ]


    ' m.list.content@.insertChildren(m.rows, 1)
    m.list.content@.notifyUpdate()
  end function


  private function removeNonHeaderRows(update = true as boolean)
    ? " AAA"
    header = m.list.content@.getChild(0)
    ? " BBB"
    m.list.content@.setNotificationsEnabled(false)
    ? " CCC"
    m.list.content@.clear()
    ? " DDD"
    m.list.content@.appendChild(header)
    ? " EE"

    if update
      ? " FFF"
      m.list.content@.notifyUpdate()
    end if
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ List Delegate
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function onItemSelected(rowIndex as integer, itemIndex as integer)
    m.selectedRowIndex = rowIndex
    m.selectedRow = m.rows[rowIndex]
    m.selectedItem = m.selectedRow.getChild(itemIndex)
    m.selectedItemIndex = itemIndex
    m.log.info("selected item ", mc.dv(m.selectedItem), "from row", mc.dv(m.selectedRow))

  end function

  private function onRowDidGainFocus(rowIndex as integer, direction as integer)
    if direction = -1
    end if
  end function

  private function onRowDidLoseFocus(rowIndex as integer, direction as integer)
    if direction = 1
    end if
  end function

  private function onRowWillLoseFocus(rowIndex as integer, direction as integer)
  end function

  private function onRowGainingFocus(rowIndex as integer, direction as integer, fraction as float)
    if direction = -1
    end if
  end function

  private function onRowLosingFocus(rowIndex as integer, direction as integer, fraction as float)
    if direction = 1
    end if
  end function

  private function onRowData(rowIndex as integer, data as dynamic)
    if data.action = "add"
      ? " add row"
      m.liveRow@.appendChildren(m.makeItems(m.defaultCellType, 1, ""))
    else
      ? " remove row"
      m.liveRow@.removeChildIndex(0)
    end if

  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Key Presses
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  private function isCapturingAnyKeyPress(key as string, press as boolean) as boolean
    return key <> "back"
  end function

  private isRemoved = false
  private function onKeyPressPlay() as boolean
    ' m.list.jumpToIndex = m.list.focusedRowIndex
    if m.isRemoved
      ? " IS ADDING AGAIN"
      m.isRemoved = false
      m.list.content@.insertChild(m.liveRow, 1)
      ' m.list.content@.appendChild(m.liveRow)
    else
      ? " IS REMOVING"
      m.list.content@.removeChild(m.liveRow)
      m.isRemoved = true
    end if
    m.list@.moveToRowItem(1, 4)
    return true
  end function

  private function onKeyPressFastForward() as boolean
    newFocus = m.list.jumpToRowItemIndex + 1
    m.log.info("moving item focus +1 to:", newFocus)
    m.list.jumpToRowItemIndex = newFocus
    return true
  end function

  private function onKeyPressRewind() as boolean
    m.log.info("moving item focus -1 to:")
    newFocus = m.list.jumpToRowItemIndex - 1
    m.list.jumpToRowItemIndex = newFocus
    return true
  end function

  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
  '++ Lifecycle
  '+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

  protected override function onShow()
    super.onShow()
    m.list.isHidden = false
    m.setFocus(m.list)
  end function

  protected override function onHide()
    super.onHide()
    m.list.isHidden = true
  end function

  protected override function onGainedFocus(isSelfFocused as boolean)
    super.onGainedFocus(isSelfFocused)
    m.log.info("onGainedFocus", isSelfFocused)

    if isSelfFocused
      m.setFocus(m.list)
    end if
  end function

end class
